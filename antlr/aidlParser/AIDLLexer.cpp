
// Generated from AIDLLexer.g4 by ANTLR 4.13.1


#include "AIDLLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct AIDLLexerStaticData final {
  AIDLLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  AIDLLexerStaticData(const AIDLLexerStaticData&) = delete;
  AIDLLexerStaticData(AIDLLexerStaticData&&) = delete;
  AIDLLexerStaticData& operator=(const AIDLLexerStaticData&) = delete;
  AIDLLexerStaticData& operator=(AIDLLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag aidllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
AIDLLexerStaticData *aidllexerLexerStaticData = nullptr;

void aidllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (aidllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(aidllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<AIDLLexerStaticData>(
    std::vector<std::string>{
      "ABSTRACT", "CONST", "ENUM", "EXTENDS", "IMPLEMENTS", "IMPORT", "INTERFACE", 
      "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "STATIC", "VOID", 
      "PARCELABLE", "IN", "OUT", "INOUT", "ONEWAY", "CPP_HEADER", "NDK_HEADER", 
      "RUST_TYPE", "ANNOTATION", "UNION", "VAR", "YIELD", "RECORD", "SEALED", 
      "PERMITS", "NON_SEALED", "INTVALUE", "HEXVALUE", "OCT_LITERAL", "BINARY_LITERAL", 
      "FLOATVALUE", "HEX_FLOAT_LITERAL", "TRUE_LITERAL", "FALSE_LITERAL", 
      "CHARVALUE", "C_STR", "TEXT_BLOCK", "NULL_LITERAL", "LPAREN", "RPAREN", 
      "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", 
      "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUALITY", "LEQ", 
      "GEQ", "NEQ", "LOGICAL_AND", "LOGICAL_OR", "UNARY_PLUS", "UNARY_MINUS", 
      "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", "LSHIFT", 
      "RSHIFT", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
      "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", "ELLIPSIS", 
      "WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER", "ExponentPart", "EscapeSequence", 
      "HexDigits", "HexDigit", "Digits", "LetterOrDigit", "Letter"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'abstract'", "'const'", "'enum'", "'extends'", "'implements'", 
      "'import'", "'interface'", "'package'", "'private'", "'protected'", 
      "'public'", "'return'", "'static'", "'void'", "'parcelable'", "'in'", 
      "'out'", "'inout'", "'oneway'", "'cpp_header'", "'ndk_header'", "'rust_type'", 
      "", "'union'", "'var'", "'yield'", "'record'", "'sealed'", "'permits'", 
      "'non-sealed'", "", "", "", "", "", "", "'true'", "'false'", "", "", 
      "", "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", 
      "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'\\u003F'", "':'", "'=='", 
      "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", 
      "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'<<'", "'>>'", "'+='", 
      "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", 
      "'>>>='", "'->'", "'::'", "'...'"
    },
    std::vector<std::string>{
      "", "ABSTRACT", "CONST", "ENUM", "EXTENDS", "IMPLEMENTS", "IMPORT", 
      "INTERFACE", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", 
      "STATIC", "VOID", "PARCELABLE", "IN", "OUT", "INOUT", "ONEWAY", "CPP_HEADER", 
      "NDK_HEADER", "RUST_TYPE", "ANNOTATION", "UNION", "VAR", "YIELD", 
      "RECORD", "SEALED", "PERMITS", "NON_SEALED", "INTVALUE", "HEXVALUE", 
      "OCT_LITERAL", "BINARY_LITERAL", "FLOATVALUE", "HEX_FLOAT_LITERAL", 
      "TRUE_LITERAL", "FALSE_LITERAL", "CHARVALUE", "C_STR", "TEXT_BLOCK", 
      "NULL_LITERAL", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
      "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", 
      "QUESTION", "COLON", "EQUALITY", "LEQ", "GEQ", "NEQ", "LOGICAL_AND", 
      "LOGICAL_OR", "UNARY_PLUS", "UNARY_MINUS", "ADD", "SUB", "MUL", "DIV", 
      "BITAND", "BITOR", "CARET", "MOD", "LSHIFT", "RSHIFT", "ADD_ASSIGN", 
      "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
      "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
      "ARROW", "COLONCOLON", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT", 
      "IDENTIFIER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,94,821,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,
  	1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
  	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
  	9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,
  	1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,29,1,30,1,30,1,30,3,30,430,8,30,1,30,4,30,433,8,30,11,30,12,30,
  	434,1,30,3,30,438,8,30,3,30,440,8,30,1,30,3,30,443,8,30,1,31,1,31,1,31,
  	1,31,5,31,449,8,31,10,31,12,31,452,9,31,1,31,3,31,455,8,31,1,31,3,31,
  	458,8,31,1,32,1,32,5,32,462,8,32,10,32,12,32,465,9,32,1,32,1,32,5,32,
  	469,8,32,10,32,12,32,472,9,32,1,32,3,32,475,8,32,1,32,3,32,478,8,32,1,
  	33,1,33,1,33,1,33,5,33,484,8,33,10,33,12,33,487,9,33,1,33,3,33,490,8,
  	33,1,33,3,33,493,8,33,1,34,1,34,1,34,3,34,498,8,34,1,34,1,34,3,34,502,
  	8,34,1,34,3,34,505,8,34,1,34,3,34,508,8,34,1,34,1,34,1,34,3,34,513,8,
  	34,1,34,3,34,516,8,34,3,34,518,8,34,1,35,1,35,1,35,1,35,3,35,524,8,35,
  	1,35,3,35,527,8,35,1,35,1,35,3,35,531,8,35,1,35,1,35,3,35,535,8,35,1,
  	35,1,35,3,35,539,8,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,
  	37,1,37,1,38,1,38,1,38,3,38,555,8,38,1,38,1,38,1,39,1,39,1,39,5,39,562,
  	8,39,10,39,12,39,565,9,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,5,40,574,
  	8,40,10,40,12,40,577,9,40,1,40,1,40,1,40,5,40,582,8,40,10,40,12,40,585,
  	9,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,43,1,43,
  	1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,
  	1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,
  	1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,
  	1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,67,1,67,
  	1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,
  	1,74,1,75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,
  	1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,
  	1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,
  	1,87,1,87,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,90,4,90,722,8,90,11,90,
  	12,90,723,1,90,1,90,1,91,1,91,1,91,1,91,5,91,732,8,91,10,91,12,91,735,
  	9,91,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,5,92,746,8,92,10,92,
  	12,92,749,9,92,1,92,1,92,1,93,1,93,5,93,755,8,93,10,93,12,93,758,9,93,
  	1,94,1,94,3,94,762,8,94,1,94,1,94,1,95,1,95,1,95,1,95,3,95,770,8,95,1,
  	95,3,95,773,8,95,1,95,1,95,1,95,4,95,778,8,95,11,95,12,95,779,1,95,1,
  	95,1,95,1,95,1,95,3,95,787,8,95,1,96,1,96,1,96,5,96,792,8,96,10,96,12,
  	96,795,9,96,1,96,3,96,798,8,96,1,97,1,97,1,98,1,98,5,98,804,8,98,10,98,
  	12,98,807,9,98,1,98,3,98,810,8,98,1,99,1,99,3,99,814,8,99,1,100,1,100,
  	1,100,1,100,3,100,820,8,100,2,583,733,0,101,1,1,3,2,5,3,7,4,9,5,11,6,
  	13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
  	37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
  	30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
  	83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
  	53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
  	63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,
  	73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,
  	83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,181,91,183,92,185,
  	93,187,94,189,0,191,0,193,0,195,0,197,0,199,0,201,0,1,0,29,1,0,49,57,
  	2,0,76,76,108,108,2,0,88,88,120,120,3,0,48,57,65,70,97,102,4,0,48,57,
  	65,70,95,95,97,102,1,0,48,55,2,0,48,55,95,95,2,0,66,66,98,98,1,0,48,49,
  	2,0,48,49,95,95,4,0,68,68,70,70,100,100,102,102,2,0,80,80,112,112,2,0,
  	43,43,45,45,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,92,92,2,
  	0,9,9,32,32,2,0,10,10,13,13,3,0,9,10,12,13,32,32,3,0,65,90,95,95,97,122,
  	4,0,48,57,65,90,95,95,97,122,2,0,69,69,101,101,8,0,34,34,39,39,92,92,
  	98,98,102,102,110,110,114,114,116,116,1,0,48,51,1,0,48,57,2,0,48,57,95,
  	95,4,0,36,36,65,90,95,95,97,122,2,0,0,127,55296,56319,1,0,55296,56319,
  	1,0,56320,57343,864,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
  	9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
  	0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
  	0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
  	41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
  	0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
  	0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
  	73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
  	0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
  	0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
  	0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,
  	0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
  	0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,
  	0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,
  	0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,
  	0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,
  	0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,
  	0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,
  	0,185,1,0,0,0,0,187,1,0,0,0,1,203,1,0,0,0,3,212,1,0,0,0,5,218,1,0,0,0,
  	7,223,1,0,0,0,9,231,1,0,0,0,11,242,1,0,0,0,13,249,1,0,0,0,15,259,1,0,
  	0,0,17,267,1,0,0,0,19,275,1,0,0,0,21,285,1,0,0,0,23,292,1,0,0,0,25,299,
  	1,0,0,0,27,306,1,0,0,0,29,311,1,0,0,0,31,322,1,0,0,0,33,325,1,0,0,0,35,
  	329,1,0,0,0,37,335,1,0,0,0,39,342,1,0,0,0,41,353,1,0,0,0,43,364,1,0,0,
  	0,45,374,1,0,0,0,47,377,1,0,0,0,49,383,1,0,0,0,51,387,1,0,0,0,53,393,
  	1,0,0,0,55,400,1,0,0,0,57,407,1,0,0,0,59,415,1,0,0,0,61,439,1,0,0,0,63,
  	444,1,0,0,0,65,459,1,0,0,0,67,479,1,0,0,0,69,517,1,0,0,0,71,519,1,0,0,
  	0,73,540,1,0,0,0,75,545,1,0,0,0,77,551,1,0,0,0,79,558,1,0,0,0,81,568,
  	1,0,0,0,83,590,1,0,0,0,85,595,1,0,0,0,87,597,1,0,0,0,89,599,1,0,0,0,91,
  	601,1,0,0,0,93,603,1,0,0,0,95,605,1,0,0,0,97,607,1,0,0,0,99,609,1,0,0,
  	0,101,611,1,0,0,0,103,613,1,0,0,0,105,615,1,0,0,0,107,617,1,0,0,0,109,
  	619,1,0,0,0,111,621,1,0,0,0,113,623,1,0,0,0,115,625,1,0,0,0,117,627,1,
  	0,0,0,119,630,1,0,0,0,121,633,1,0,0,0,123,636,1,0,0,0,125,639,1,0,0,0,
  	127,642,1,0,0,0,129,645,1,0,0,0,131,648,1,0,0,0,133,651,1,0,0,0,135,653,
  	1,0,0,0,137,655,1,0,0,0,139,657,1,0,0,0,141,659,1,0,0,0,143,661,1,0,0,
  	0,145,663,1,0,0,0,147,665,1,0,0,0,149,667,1,0,0,0,151,670,1,0,0,0,153,
  	673,1,0,0,0,155,676,1,0,0,0,157,679,1,0,0,0,159,682,1,0,0,0,161,685,1,
  	0,0,0,163,688,1,0,0,0,165,691,1,0,0,0,167,694,1,0,0,0,169,697,1,0,0,0,
  	171,701,1,0,0,0,173,705,1,0,0,0,175,710,1,0,0,0,177,713,1,0,0,0,179,716,
  	1,0,0,0,181,721,1,0,0,0,183,727,1,0,0,0,185,741,1,0,0,0,187,752,1,0,0,
  	0,189,759,1,0,0,0,191,786,1,0,0,0,193,788,1,0,0,0,195,799,1,0,0,0,197,
  	801,1,0,0,0,199,813,1,0,0,0,201,819,1,0,0,0,203,204,5,97,0,0,204,205,
  	5,98,0,0,205,206,5,115,0,0,206,207,5,116,0,0,207,208,5,114,0,0,208,209,
  	5,97,0,0,209,210,5,99,0,0,210,211,5,116,0,0,211,2,1,0,0,0,212,213,5,99,
  	0,0,213,214,5,111,0,0,214,215,5,110,0,0,215,216,5,115,0,0,216,217,5,116,
  	0,0,217,4,1,0,0,0,218,219,5,101,0,0,219,220,5,110,0,0,220,221,5,117,0,
  	0,221,222,5,109,0,0,222,6,1,0,0,0,223,224,5,101,0,0,224,225,5,120,0,0,
  	225,226,5,116,0,0,226,227,5,101,0,0,227,228,5,110,0,0,228,229,5,100,0,
  	0,229,230,5,115,0,0,230,8,1,0,0,0,231,232,5,105,0,0,232,233,5,109,0,0,
  	233,234,5,112,0,0,234,235,5,108,0,0,235,236,5,101,0,0,236,237,5,109,0,
  	0,237,238,5,101,0,0,238,239,5,110,0,0,239,240,5,116,0,0,240,241,5,115,
  	0,0,241,10,1,0,0,0,242,243,5,105,0,0,243,244,5,109,0,0,244,245,5,112,
  	0,0,245,246,5,111,0,0,246,247,5,114,0,0,247,248,5,116,0,0,248,12,1,0,
  	0,0,249,250,5,105,0,0,250,251,5,110,0,0,251,252,5,116,0,0,252,253,5,101,
  	0,0,253,254,5,114,0,0,254,255,5,102,0,0,255,256,5,97,0,0,256,257,5,99,
  	0,0,257,258,5,101,0,0,258,14,1,0,0,0,259,260,5,112,0,0,260,261,5,97,0,
  	0,261,262,5,99,0,0,262,263,5,107,0,0,263,264,5,97,0,0,264,265,5,103,0,
  	0,265,266,5,101,0,0,266,16,1,0,0,0,267,268,5,112,0,0,268,269,5,114,0,
  	0,269,270,5,105,0,0,270,271,5,118,0,0,271,272,5,97,0,0,272,273,5,116,
  	0,0,273,274,5,101,0,0,274,18,1,0,0,0,275,276,5,112,0,0,276,277,5,114,
  	0,0,277,278,5,111,0,0,278,279,5,116,0,0,279,280,5,101,0,0,280,281,5,99,
  	0,0,281,282,5,116,0,0,282,283,5,101,0,0,283,284,5,100,0,0,284,20,1,0,
  	0,0,285,286,5,112,0,0,286,287,5,117,0,0,287,288,5,98,0,0,288,289,5,108,
  	0,0,289,290,5,105,0,0,290,291,5,99,0,0,291,22,1,0,0,0,292,293,5,114,0,
  	0,293,294,5,101,0,0,294,295,5,116,0,0,295,296,5,117,0,0,296,297,5,114,
  	0,0,297,298,5,110,0,0,298,24,1,0,0,0,299,300,5,115,0,0,300,301,5,116,
  	0,0,301,302,5,97,0,0,302,303,5,116,0,0,303,304,5,105,0,0,304,305,5,99,
  	0,0,305,26,1,0,0,0,306,307,5,118,0,0,307,308,5,111,0,0,308,309,5,105,
  	0,0,309,310,5,100,0,0,310,28,1,0,0,0,311,312,5,112,0,0,312,313,5,97,0,
  	0,313,314,5,114,0,0,314,315,5,99,0,0,315,316,5,101,0,0,316,317,5,108,
  	0,0,317,318,5,97,0,0,318,319,5,98,0,0,319,320,5,108,0,0,320,321,5,101,
  	0,0,321,30,1,0,0,0,322,323,5,105,0,0,323,324,5,110,0,0,324,32,1,0,0,0,
  	325,326,5,111,0,0,326,327,5,117,0,0,327,328,5,116,0,0,328,34,1,0,0,0,
  	329,330,5,105,0,0,330,331,5,110,0,0,331,332,5,111,0,0,332,333,5,117,0,
  	0,333,334,5,116,0,0,334,36,1,0,0,0,335,336,5,111,0,0,336,337,5,110,0,
  	0,337,338,5,101,0,0,338,339,5,119,0,0,339,340,5,97,0,0,340,341,5,121,
  	0,0,341,38,1,0,0,0,342,343,5,99,0,0,343,344,5,112,0,0,344,345,5,112,0,
  	0,345,346,5,95,0,0,346,347,5,104,0,0,347,348,5,101,0,0,348,349,5,97,0,
  	0,349,350,5,100,0,0,350,351,5,101,0,0,351,352,5,114,0,0,352,40,1,0,0,
  	0,353,354,5,110,0,0,354,355,5,100,0,0,355,356,5,107,0,0,356,357,5,95,
  	0,0,357,358,5,104,0,0,358,359,5,101,0,0,359,360,5,97,0,0,360,361,5,100,
  	0,0,361,362,5,101,0,0,362,363,5,114,0,0,363,42,1,0,0,0,364,365,5,114,
  	0,0,365,366,5,117,0,0,366,367,5,115,0,0,367,368,5,116,0,0,368,369,5,95,
  	0,0,369,370,5,116,0,0,370,371,5,121,0,0,371,372,5,112,0,0,372,373,5,101,
  	0,0,373,44,1,0,0,0,374,375,5,64,0,0,375,376,3,187,93,0,376,46,1,0,0,0,
  	377,378,5,117,0,0,378,379,5,110,0,0,379,380,5,105,0,0,380,381,5,111,0,
  	0,381,382,5,110,0,0,382,48,1,0,0,0,383,384,5,118,0,0,384,385,5,97,0,0,
  	385,386,5,114,0,0,386,50,1,0,0,0,387,388,5,121,0,0,388,389,5,105,0,0,
  	389,390,5,101,0,0,390,391,5,108,0,0,391,392,5,100,0,0,392,52,1,0,0,0,
  	393,394,5,114,0,0,394,395,5,101,0,0,395,396,5,99,0,0,396,397,5,111,0,
  	0,397,398,5,114,0,0,398,399,5,100,0,0,399,54,1,0,0,0,400,401,5,115,0,
  	0,401,402,5,101,0,0,402,403,5,97,0,0,403,404,5,108,0,0,404,405,5,101,
  	0,0,405,406,5,100,0,0,406,56,1,0,0,0,407,408,5,112,0,0,408,409,5,101,
  	0,0,409,410,5,114,0,0,410,411,5,109,0,0,411,412,5,105,0,0,412,413,5,116,
  	0,0,413,414,5,115,0,0,414,58,1,0,0,0,415,416,5,110,0,0,416,417,5,111,
  	0,0,417,418,5,110,0,0,418,419,5,45,0,0,419,420,5,115,0,0,420,421,5,101,
  	0,0,421,422,5,97,0,0,422,423,5,108,0,0,423,424,5,101,0,0,424,425,5,100,
  	0,0,425,60,1,0,0,0,426,440,5,48,0,0,427,437,7,0,0,0,428,430,3,197,98,
  	0,429,428,1,0,0,0,429,430,1,0,0,0,430,438,1,0,0,0,431,433,5,95,0,0,432,
  	431,1,0,0,0,433,434,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,436,1,
  	0,0,0,436,438,3,197,98,0,437,429,1,0,0,0,437,432,1,0,0,0,438,440,1,0,
  	0,0,439,426,1,0,0,0,439,427,1,0,0,0,440,442,1,0,0,0,441,443,7,1,0,0,442,
  	441,1,0,0,0,442,443,1,0,0,0,443,62,1,0,0,0,444,445,5,48,0,0,445,446,7,
  	2,0,0,446,454,7,3,0,0,447,449,7,4,0,0,448,447,1,0,0,0,449,452,1,0,0,0,
  	450,448,1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,450,1,0,0,0,453,455,
  	7,3,0,0,454,450,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,458,7,1,0,
  	0,457,456,1,0,0,0,457,458,1,0,0,0,458,64,1,0,0,0,459,463,5,48,0,0,460,
  	462,5,95,0,0,461,460,1,0,0,0,462,465,1,0,0,0,463,461,1,0,0,0,463,464,
  	1,0,0,0,464,466,1,0,0,0,465,463,1,0,0,0,466,474,7,5,0,0,467,469,7,6,0,
  	0,468,467,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,
  	473,1,0,0,0,472,470,1,0,0,0,473,475,7,5,0,0,474,470,1,0,0,0,474,475,1,
  	0,0,0,475,477,1,0,0,0,476,478,7,1,0,0,477,476,1,0,0,0,477,478,1,0,0,0,
  	478,66,1,0,0,0,479,480,5,48,0,0,480,481,7,7,0,0,481,489,7,8,0,0,482,484,
  	7,9,0,0,483,482,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,
  	0,486,488,1,0,0,0,487,485,1,0,0,0,488,490,7,8,0,0,489,485,1,0,0,0,489,
  	490,1,0,0,0,490,492,1,0,0,0,491,493,7,1,0,0,492,491,1,0,0,0,492,493,1,
  	0,0,0,493,68,1,0,0,0,494,495,3,197,98,0,495,497,5,46,0,0,496,498,3,197,
  	98,0,497,496,1,0,0,0,497,498,1,0,0,0,498,502,1,0,0,0,499,500,5,46,0,0,
  	500,502,3,197,98,0,501,494,1,0,0,0,501,499,1,0,0,0,502,504,1,0,0,0,503,
  	505,3,189,94,0,504,503,1,0,0,0,504,505,1,0,0,0,505,507,1,0,0,0,506,508,
  	7,10,0,0,507,506,1,0,0,0,507,508,1,0,0,0,508,518,1,0,0,0,509,515,3,197,
  	98,0,510,512,3,189,94,0,511,513,7,10,0,0,512,511,1,0,0,0,512,513,1,0,
  	0,0,513,516,1,0,0,0,514,516,7,10,0,0,515,510,1,0,0,0,515,514,1,0,0,0,
  	516,518,1,0,0,0,517,501,1,0,0,0,517,509,1,0,0,0,518,70,1,0,0,0,519,520,
  	5,48,0,0,520,530,7,2,0,0,521,523,3,193,96,0,522,524,5,46,0,0,523,522,
  	1,0,0,0,523,524,1,0,0,0,524,531,1,0,0,0,525,527,3,193,96,0,526,525,1,
  	0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,529,5,46,0,0,529,531,3,193,
  	96,0,530,521,1,0,0,0,530,526,1,0,0,0,531,532,1,0,0,0,532,534,7,11,0,0,
  	533,535,7,12,0,0,534,533,1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,
  	538,3,197,98,0,537,539,7,10,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,72,
  	1,0,0,0,540,541,5,116,0,0,541,542,5,114,0,0,542,543,5,117,0,0,543,544,
  	5,101,0,0,544,74,1,0,0,0,545,546,5,102,0,0,546,547,5,97,0,0,547,548,5,
  	108,0,0,548,549,5,115,0,0,549,550,5,101,0,0,550,76,1,0,0,0,551,554,5,
  	39,0,0,552,555,8,13,0,0,553,555,3,191,95,0,554,552,1,0,0,0,554,553,1,
  	0,0,0,555,556,1,0,0,0,556,557,5,39,0,0,557,78,1,0,0,0,558,563,5,34,0,
  	0,559,562,8,14,0,0,560,562,3,191,95,0,561,559,1,0,0,0,561,560,1,0,0,0,
  	562,565,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,563,
  	1,0,0,0,566,567,5,34,0,0,567,80,1,0,0,0,568,569,5,34,0,0,569,570,5,34,
  	0,0,570,571,5,34,0,0,571,575,1,0,0,0,572,574,7,15,0,0,573,572,1,0,0,0,
  	574,577,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,575,
  	1,0,0,0,578,583,7,16,0,0,579,582,9,0,0,0,580,582,3,191,95,0,581,579,1,
  	0,0,0,581,580,1,0,0,0,582,585,1,0,0,0,583,584,1,0,0,0,583,581,1,0,0,0,
  	584,586,1,0,0,0,585,583,1,0,0,0,586,587,5,34,0,0,587,588,5,34,0,0,588,
  	589,5,34,0,0,589,82,1,0,0,0,590,591,5,110,0,0,591,592,5,117,0,0,592,593,
  	5,108,0,0,593,594,5,108,0,0,594,84,1,0,0,0,595,596,5,40,0,0,596,86,1,
  	0,0,0,597,598,5,41,0,0,598,88,1,0,0,0,599,600,5,123,0,0,600,90,1,0,0,
  	0,601,602,5,125,0,0,602,92,1,0,0,0,603,604,5,91,0,0,604,94,1,0,0,0,605,
  	606,5,93,0,0,606,96,1,0,0,0,607,608,5,59,0,0,608,98,1,0,0,0,609,610,5,
  	44,0,0,610,100,1,0,0,0,611,612,5,46,0,0,612,102,1,0,0,0,613,614,5,61,
  	0,0,614,104,1,0,0,0,615,616,5,62,0,0,616,106,1,0,0,0,617,618,5,60,0,0,
  	618,108,1,0,0,0,619,620,5,33,0,0,620,110,1,0,0,0,621,622,5,126,0,0,622,
  	112,1,0,0,0,623,624,5,63,0,0,624,114,1,0,0,0,625,626,5,58,0,0,626,116,
  	1,0,0,0,627,628,5,61,0,0,628,629,5,61,0,0,629,118,1,0,0,0,630,631,5,60,
  	0,0,631,632,5,61,0,0,632,120,1,0,0,0,633,634,5,62,0,0,634,635,5,61,0,
  	0,635,122,1,0,0,0,636,637,5,33,0,0,637,638,5,61,0,0,638,124,1,0,0,0,639,
  	640,5,38,0,0,640,641,5,38,0,0,641,126,1,0,0,0,642,643,5,124,0,0,643,644,
  	5,124,0,0,644,128,1,0,0,0,645,646,5,43,0,0,646,647,5,43,0,0,647,130,1,
  	0,0,0,648,649,5,45,0,0,649,650,5,45,0,0,650,132,1,0,0,0,651,652,5,43,
  	0,0,652,134,1,0,0,0,653,654,5,45,0,0,654,136,1,0,0,0,655,656,5,42,0,0,
  	656,138,1,0,0,0,657,658,5,47,0,0,658,140,1,0,0,0,659,660,5,38,0,0,660,
  	142,1,0,0,0,661,662,5,124,0,0,662,144,1,0,0,0,663,664,5,94,0,0,664,146,
  	1,0,0,0,665,666,5,37,0,0,666,148,1,0,0,0,667,668,5,60,0,0,668,669,5,60,
  	0,0,669,150,1,0,0,0,670,671,5,62,0,0,671,672,5,62,0,0,672,152,1,0,0,0,
  	673,674,5,43,0,0,674,675,5,61,0,0,675,154,1,0,0,0,676,677,5,45,0,0,677,
  	678,5,61,0,0,678,156,1,0,0,0,679,680,5,42,0,0,680,681,5,61,0,0,681,158,
  	1,0,0,0,682,683,5,47,0,0,683,684,5,61,0,0,684,160,1,0,0,0,685,686,5,38,
  	0,0,686,687,5,61,0,0,687,162,1,0,0,0,688,689,5,124,0,0,689,690,5,61,0,
  	0,690,164,1,0,0,0,691,692,5,94,0,0,692,693,5,61,0,0,693,166,1,0,0,0,694,
  	695,5,37,0,0,695,696,5,61,0,0,696,168,1,0,0,0,697,698,5,60,0,0,698,699,
  	5,60,0,0,699,700,5,61,0,0,700,170,1,0,0,0,701,702,5,62,0,0,702,703,5,
  	62,0,0,703,704,5,61,0,0,704,172,1,0,0,0,705,706,5,62,0,0,706,707,5,62,
  	0,0,707,708,5,62,0,0,708,709,5,61,0,0,709,174,1,0,0,0,710,711,5,45,0,
  	0,711,712,5,62,0,0,712,176,1,0,0,0,713,714,5,58,0,0,714,715,5,58,0,0,
  	715,178,1,0,0,0,716,717,5,46,0,0,717,718,5,46,0,0,718,719,5,46,0,0,719,
  	180,1,0,0,0,720,722,7,17,0,0,721,720,1,0,0,0,722,723,1,0,0,0,723,721,
  	1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,726,6,90,0,0,726,182,1,0,
  	0,0,727,728,5,47,0,0,728,729,5,42,0,0,729,733,1,0,0,0,730,732,9,0,0,0,
  	731,730,1,0,0,0,732,735,1,0,0,0,733,734,1,0,0,0,733,731,1,0,0,0,734,736,
  	1,0,0,0,735,733,1,0,0,0,736,737,5,42,0,0,737,738,5,47,0,0,738,739,1,0,
  	0,0,739,740,6,91,0,0,740,184,1,0,0,0,741,742,5,47,0,0,742,743,5,47,0,
  	0,743,747,1,0,0,0,744,746,8,16,0,0,745,744,1,0,0,0,746,749,1,0,0,0,747,
  	745,1,0,0,0,747,748,1,0,0,0,748,750,1,0,0,0,749,747,1,0,0,0,750,751,6,
  	92,0,0,751,186,1,0,0,0,752,756,7,18,0,0,753,755,7,19,0,0,754,753,1,0,
  	0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,0,0,0,757,188,1,0,0,0,758,
  	756,1,0,0,0,759,761,7,20,0,0,760,762,7,12,0,0,761,760,1,0,0,0,761,762,
  	1,0,0,0,762,763,1,0,0,0,763,764,3,197,98,0,764,190,1,0,0,0,765,766,5,
  	92,0,0,766,787,7,21,0,0,767,772,5,92,0,0,768,770,7,22,0,0,769,768,1,0,
  	0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,773,7,5,0,0,772,769,1,0,0,0,772,
  	773,1,0,0,0,773,774,1,0,0,0,774,787,7,5,0,0,775,777,5,92,0,0,776,778,
  	5,117,0,0,777,776,1,0,0,0,778,779,1,0,0,0,779,777,1,0,0,0,779,780,1,0,
  	0,0,780,781,1,0,0,0,781,782,3,195,97,0,782,783,3,195,97,0,783,784,3,195,
  	97,0,784,785,3,195,97,0,785,787,1,0,0,0,786,765,1,0,0,0,786,767,1,0,0,
  	0,786,775,1,0,0,0,787,192,1,0,0,0,788,797,3,195,97,0,789,792,3,195,97,
  	0,790,792,5,95,0,0,791,789,1,0,0,0,791,790,1,0,0,0,792,795,1,0,0,0,793,
  	791,1,0,0,0,793,794,1,0,0,0,794,796,1,0,0,0,795,793,1,0,0,0,796,798,3,
  	195,97,0,797,793,1,0,0,0,797,798,1,0,0,0,798,194,1,0,0,0,799,800,7,3,
  	0,0,800,196,1,0,0,0,801,809,7,23,0,0,802,804,7,24,0,0,803,802,1,0,0,0,
  	804,807,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,806,808,1,0,0,0,807,805,
  	1,0,0,0,808,810,7,23,0,0,809,805,1,0,0,0,809,810,1,0,0,0,810,198,1,0,
  	0,0,811,814,3,201,100,0,812,814,7,23,0,0,813,811,1,0,0,0,813,812,1,0,
  	0,0,814,200,1,0,0,0,815,820,7,25,0,0,816,820,8,26,0,0,817,818,7,27,0,
  	0,818,820,7,28,0,0,819,815,1,0,0,0,819,816,1,0,0,0,819,817,1,0,0,0,820,
  	202,1,0,0,0,50,0,429,434,437,439,442,450,454,457,463,470,474,477,485,
  	489,492,497,501,504,507,512,515,517,523,526,530,534,538,554,561,563,575,
  	581,583,723,733,747,756,761,769,772,779,786,791,793,797,805,809,813,819,
  	1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  aidllexerLexerStaticData = staticData.release();
}

}

AIDLLexer::AIDLLexer(CharStream *input) : Lexer(input) {
  AIDLLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *aidllexerLexerStaticData->atn, aidllexerLexerStaticData->decisionToDFA, aidllexerLexerStaticData->sharedContextCache);
}

AIDLLexer::~AIDLLexer() {
  delete _interpreter;
}

std::string AIDLLexer::getGrammarFileName() const {
  return "AIDLLexer.g4";
}

const std::vector<std::string>& AIDLLexer::getRuleNames() const {
  return aidllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& AIDLLexer::getChannelNames() const {
  return aidllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& AIDLLexer::getModeNames() const {
  return aidllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& AIDLLexer::getVocabulary() const {
  return aidllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView AIDLLexer::getSerializedATN() const {
  return aidllexerLexerStaticData->serializedATN;
}

const atn::ATN& AIDLLexer::getATN() const {
  return *aidllexerLexerStaticData->atn;
}




void AIDLLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  aidllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(aidllexerLexerOnceFlag, aidllexerLexerInitialize);
#endif
}
