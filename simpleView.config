ClassScope class_view = "android.view.View";
ClassScope class_usedBy_view = usedBy ( class_view );
ClassScope class_usedBy_view_exclusive = class_usedBy_view - class_view;
ClassScope package_android_view = inPackage ( "android.view" );
ClassScope runtimeScope = { class_view };
ClassScope class_bitmap = "android.graphics.Bitmap";
ClassScope class_context = "android.content.Context";
Node method_view = MethodOf ( class_view );
Node field_view_flag = "android.view.View.mViewFlags" ("android.view.View");
Node field_view_pflags = "android.view.View.mPrivateFlags" ("android.view.View");
Node field_of_view = FieldOf ( class_view );
Node param_of_constructor_view = "android.view.View.View::Context,AttributeSet,Integer,Integer:context" ("android.view.View");
Node field_view_flag_copy = { field_view_pflags };
Node creator_usedBy_view = CreatorOf ( class_usedBy_view );
Node method_usedBy_view = MethodOf ( class_usedBy_view );
Node method_usedBy_view_exclusive = MethodOf ( class_usedBy_view_exclusive );
Node creator_view = CreatorOf ( class_view );
Node params_of_constructor_view = ParameterOf ( creator_view );
Node called_creator_usedBy_view = CalledMethodOf ( creator_usedBy_view );
Node called_method_view = CalledMethodOf ( method_view );
Node called_method_usedBy_view = CalledMethodOf ( method_usedBy_view );
Node called_method_usedBy_view_exclusive = CalledMethodOf ( method_usedBy_view_exclusive );
Node methods_view = creator_view | method_view;
Node InstanceFromView = InstanceOf ( class_view,class_bitmap );
Node fieldOfView = FieldOf ( class_view );
Node contextOfView = "android.view.View.mContext" ("android.view.View");
Node methodsUsedByView = MethodOf ( class_usedBy_view );
Node calledMethodsUsedByView = CalledMethodOf ( methodsUsedByView );
Node heavyMethod = "android.view.View.clearParentsWantFocus:::" ("android.view.View");
Node heavyMethod2 = "android.view.View.setFlags::Integer,Integer:" ("android.view.View");
Node methodOfTheClass = MethodOf ( class_view );
Node returnOfView = ReturnOf ( method_view );
Node calledReturnOfView = CalledReturnOf ( returnOfView );
Node methodUsedByView = MethodOf ( class_usedBy_view );
Node parameterUsedByView = ParameterOf ( methodUsedByView );
Node calledMethodOfView = CalledMethodOf ( method_view );
Node returnUsedByView = ReturnOf ( methodUsedByView );
Node calledParam = CalledParamOf ( parameterUsedByView );
Seg seg_call = Condition*->called_method_view->Step->methodOfTheClass;
Seg seg_any_line = Any->Any*;
Seg seg_referenced_by = Any+->Reference;
Seg seg_refed_by_field_of_view = field_of_view->Any*->Reference;
Seg seg_else = Condition->Else->Condition;
Seg seg_anyToRef = Reference*->Condition*;
Seg seg_callThisMethod = method_view->Condition*->calledMethodsUsedByView->Step;
Line timing_call_stack_of_view = method_view->Condition*->called_method_view->Step->method_view;
Line reference_by_field_of_view = [seg_refed_by_field_of_view]->called_method_usedBy_view_exclusive;
Line timing_created_by_view = method_view->Condition*->called_creator_usedBy_view;
Line timing_call_other_class_method = method_view->Condition*->called_method_usedBy_view_exclusive;
Line logic_controledBy_flag_view = field_view_flag_copy->Any*->Condition*->called_method_usedBy_view;
Line dataFlow_from_paramOf_constructor_view = param_of_constructor_view->Any+;
Line dataFlow_with_ref_from_paramOf_constructor_view = param_of_constructor_view->Any*->Reference*->Any+;
Line calledByElseCond = method_view->[seg_else]+->calledMethodsUsedByView;
Line paramPassInternal(p1) = [seg_anyToRef]*->p1->[seg_anyToRef]*;
Line paramToField(F,P) = F->P->[seg_anyToRef]*->P->F;
Line methodPlexStructure = heavyMethod2->[seg_call]+;
Line creatorStruct = creator_view->[seg_call];
Line callChain = methodOfTheClass->Condition*->calledMethodsUsedByView;
Line referenceChain = fieldOfView->Any*->Reference->calledMethodsUsedByView;
Graph view_call_other_class_method = timing_call_other_class_method,reference_by_field_of_view<[0,0,1],[[0,0,0],1]>;
LineInstance paramPassInternal1_I1 = paramPassInternal(returnUsedByView);
