ClassScope class_view = "android.view.View";
ClassScope class_usedBy_view = usedBy ( class_view );
ClassScope scopeOfParamToRuntime = { class_usedBy_view };
ClassScope scopeOfParamToAddressable = usedBy ( scopeOfParamToRuntime );
ClassScope class_runtime = "android.util.SparseArray";
Node separatorParamTo___________________________________________________________ = "android.view.View.ALPHA" ("android.view.View");
Node param_of_constructor_view = "android.view.View.View::Context,AttributeSet,int,int:context" ("android.view.View");
Node p = "android.view.View.View::Context:context" ("android.view.View");
Node cp = CalledParamOf ( p );
Node var_param_to = { param_of_constructor_view };
Node field_for_param_to = FieldOf ( scopeOfParamToAddressable );
Node method_for_param_to = MethodOf ( scopeOfParamToAddressable );
Node construtor_for_param_to = CreatorOf ( scopeOfParamToAddressable );
Node method_and_construct_for_param_to = method_for_param_to | construtor_for_param_to;
Node called_method_for_param_to = CalledMethodOf ( method_and_construct_for_param_to );
Node referenced_for_param_to = field_for_param_to | called_method_for_param_to;
Node return_for_param_to = ReturnOf ( method_and_construct_for_param_to );
Node called_return_for_param_to = CalledReturnOf ( return_for_param_to );
Node param_for_param_to = ParameterOf ( method_and_construct_for_param_to );
Node called_param_for_param_to = CalledParamOf ( param_for_param_to );
Node dst_for_param_to = field_for_param_to | called_param_for_param_to;
Node dst_for_param_to2 = dst_for_param_to | param_for_param_to;
Node separatorMethodStack_____________________________________________________________ = { separatorParamTo___________________________________________________________ };
Node methodView = "android.view.View.View::Context,AttributeSet,int,int:" ("android.view.View");
Node methodSetFlag = "android.view.View.setFlags::int,int:" ("android.view.View");
Node separatorDataFlowFromReturn________________________________________________________________________________ = { separatorMethodStack_____________________________________________________________ };
Node returnSrc = "android.view.View.getAlpha:::return" ("android.view.View");
Node calledReturnOfFindView = CalledReturnOf ( returnSrc );
Node returnDst = "android.content.res.TypedArray.getDimension::int,float:return" ("android.content.res.TypedArray");
Node param_dst = "android.view.View.internalSetPadding::int,int,int,int:top" ("android.view.View");
Node calledParam_dst = CalledParamOf ( param_dst );
Node creator_view = CreatorOf ( class_view );
Node method_view = MethodOf ( class_view );
Node called_method_view = CalledMethodOf ( method_view );
Node methodsUsedByView = MethodOf ( class_usedBy_view );
Node calledMethodsUsedByView = CalledMethodOf ( methodsUsedByView );
Node methodUsedByView = MethodOf ( class_usedBy_view );
Node methodOfTheClass = MethodOf ( class_view );
Node calledMethodOfView = CalledMethodOf ( method_view );
Node params_of_constructor_view = ParameterOf ( creator_view );
Node method_usedBy_view = MethodOf ( class_usedBy_view );
Node called_method_usedBy_view = CalledMethodOf ( method_usedBy_view );
Node parameterUsedByView = ParameterOf ( methodUsedByView );
Node paramOfView = ParameterOf ( method_view );
Node called_paramOfView = CalledParamOf ( paramOfView );
Node returnOfView = ReturnOf ( method_view );
Node calledReturnOfView = CalledReturnOf ( returnOfView );
Node returnUsedByView = ReturnOf ( methodUsedByView );
Node field_view_pflags = "android.view.View.mPrivateFlags" ("android.view.View");
Node field_view_flag_copy = { field_view_pflags };
Node method_dumpflag = "android.view.View.dumpFlag::HashMap,String,int:" ("android.view.View");
Node method_to_be_inspected = { method_dumpflag };
Node methods_view = creator_view | method_view;
Node field_used_by_view = FieldOf ( class_usedBy_view );
Node creator_usedBy_view = CreatorOf ( class_usedBy_view );
Node called_creator_usedBy_view = CalledMethodOf ( creator_usedBy_view );
Seg SEG_UNITS____________________________________________________________________ = Any->Any;
Seg seg_unit_paramUpWithStepNode = DataStep->Parameter;
Seg seg_unit_generalAny = Any?->Parameter?;
Seg seg_unit_refField = Reference->Field;
Seg seg_unit_refMethod = Reference->CalledMethod->CalledReturn;
Seg seg_unit_ref = [seg_unit_refField]?->[seg_unit_refMethod]?;
Seg seg_unit_CParamToCReturn = CalledParameter->CalledMethod->CalledReturn;
Seg seg_unit_stepIn = CalledParameter->DataStep->Parameter;
Seg seg_unit_stepOut = Return->DataStep->CalledReturn;
Seg seg_unit_step = [seg_unit_stepIn]?->[seg_unit_stepOut]?;
Seg seg_unit_indexAny = Index->Any;
Seg seg_unit_indexField = Index->Field;
Seg seg_unit_indexParam = Index->Parameter;
Seg seg_unit_indexCReturn = Index->CalledReturn;
Seg seg_unit_index = [seg_unit_indexAny]?->[seg_unit_indexField]?->[seg_unit_indexParam]?->[seg_unit_indexCReturn]?;
Seg SEG_UNITS_COMB________________________________________________________________ = Any->Any;
Seg seg_dataFlow_withinMethod = [seg_unit_generalAny]?->[seg_unit_ref]?->[seg_unit_CParamToCReturn]?->[seg_unit_index]?;
Seg seg_dataFlow_beyondMethod = [seg_unit_generalAny]?->[seg_unit_ref]?->[seg_unit_step]?->[seg_unit_index]?;
Seg SEG_LINE_DOWN_AND_UP______________________________________________________ = Any->Any;
Seg seg_linedown_CParamToCReturn = CalledMethod->CalledReturn;
Seg seg_lineup_CReturnFromCParam = CalledParameter->CalledMethod;
Seg seg_linedown_calledKeyToAny = CalledMethod?->CalledReturn?->[seg_dataFlow_withinMethod]*->Field?->Return?;
Seg seg_lineup_refedBy = Field?->Parameter?->[seg_dataFlow_withinMethod]*->Reference;
Seg seg_lineup_CParamOfCMethod = Field?->Parameter?->[seg_dataFlow_withinMethod]*->CalledParameter;
Seg seg_lineup_anyFromAny = Field?->[seg_unit_paramUpWithStepNode]?->[seg_dataFlow_withinMethod]*;
Seg SEG_END_____________________________________________________________________ = Any->Any;
Seg seg_timing_step2 = method_and_construct_for_param_to->Condition*->called_method_for_param_to->TimingStep;
Seg seg_timing_step = Condition*->called_method_for_param_to->TimingStep->method_and_construct_for_param_to;
Line dataFlow_parameter_toField = var_param_to->[seg_dataFlow_beyondMethod]*->Field;
Line data_flow_paramToCParam = var_param_to->[seg_dataFlow_beyondMethod]*->CalledParameter;
Line datatFlow_param_to_calledParam = var_param_to->[seg_dataFlow_beyondMethod]*->CalledParameter;
Line dataFlow_fromReturn = returnSrc->DataStep->calledReturnOfFindView->[seg_dataFlow_beyondMethod]*->Condition;
Line dataFlow_toParam = [seg_dataFlow_beyondMethod]*->calledParam_dst;
Line dataFlow_toReturn = [seg_dataFlow_beyondMethod]*->returnDst;
Line timingFlow_callStack = methodView->[seg_timing_step]*;
Line timingFlowToSetFlag = [seg_timing_step2]*->methodSetFlag;
Line logice_flow_param_to = var_param_to->[seg_dataFlow_beyondMethod]*->Condition;
Line line_for_method_inspection_timing = method_to_be_inspected->Condition*->Any;
Line line_for_method_inspection_condition = method_to_be_inspected->Condition*;
Line timing_call_stack_of_view = method_view->Condition*->called_method_view->TimingStep->method_view;
Line timing_created_by_view = method_view->Condition*->called_creator_usedBy_view;
Line timing_call_method_used_by = method_view->Condition*->called_method_usedBy_view;
Line logic_controledBy_flag_view = field_view_flag_copy->Any*->Condition*->called_method_usedBy_view;
Graph zhanwei = dataFlow_parameter_toField<[0,[[0,0],[[0,0],[0,0,0]],[[0,0,0],[0,0,0]],[[0,0],[0,0],[0,0],[0,0]]],0]>;
