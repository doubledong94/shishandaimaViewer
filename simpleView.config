ClassScope class_view = "android.view.View";
ClassScope class_bitmap = "android.graphics.Bitmap";
ClassScope package_android_view = inPackage ( "android.view" );
ClassScope class_usedBy_view = usedBy ( class_view );
ClassScope class_usedBy_view2 = usedBy ( class_usedBy_view );
ClassScope class_usedBy_view3 = usedBy ( class_usedBy_view2 );
ClassScope runtimeScope = { class_view };
ClassScope scope_of_param_to = { class_usedBy_view };
Node constructor_of_view = "android.view.View.View::Context,AttributeSet,int,int:" ("android.view.View");
Node field_view_flag = "android.view.View.mViewFlags" ("android.view.View");
Node param_of_constructor_view = "android.view.View.View::Context,AttributeSet,int,int:context" ("android.view.View");
Node debug_param = "android.animation.AnimatorInflater.parseAnimatorFromTypeArray::ValueAnimator,TypedArray,TypedArray,float:arrayAnimator" ("android.animation.AnimatorInflater");
Node contextOfView = "android.view.View.mContext" ("android.view.View");
Node field_view_pflags = "android.view.View.mPrivateFlags" ("android.view.View");
Node method_dumpflags = "android.view.View.dumpFlags:::" ("android.view.View");
Node method_generateDisplayHash = "android.view.View.generateDisplayHash::String,Rect,Executor,DisplayHashResultCallback:" ("android.view.View");
Node method_dumpflag = "android.view.View.dumpFlag::HashMap,String,int:" ("android.view.View");
Node param_of_conostructor_of_view = "android.view.View.View::Context:context" ("android.view.View");
Node called_param_of_constructor_of_view = CalledParamOf ( param_of_conostructor_of_view );
Node field_of_view = FieldOf ( class_view );
Node field_used_by_view = FieldOf ( class_usedBy_view );
Node InstanceFromView = InstanceOf ( class_view,class_bitmap );
Node creator_usedBy_view = CreatorOf ( class_usedBy_view );
Node creator_view = CreatorOf ( class_view );
Node method_usedBy_view = MethodOf ( class_usedBy_view );
Node method_view = MethodOf ( class_view );
Node called_creator_usedBy_view = CalledMethodOf ( creator_usedBy_view );
Node called_method_view = CalledMethodOf ( method_view );
Node called_method_usedBy_view = CalledMethodOf ( method_usedBy_view );
Node methodsUsedByView = MethodOf ( class_usedBy_view );
Node calledMethodsUsedByView = CalledMethodOf ( methodsUsedByView );
Node method_for_param_to = MethodOf ( scope_of_param_to );
Node construtor_for_param_to = CreatorOf ( scope_of_param_to );
Node method_and_construct_for_param_to = method_for_param_to | construtor_for_param_to;
Node called_method_for_param_to = CalledMethodOf ( method_for_param_to );
Node field_for_param_to = FieldOf ( scope_of_param_to );
Node referenced_for_param_to = field_for_param_to | called_method_for_param_to;
Node param_for_param_to = ParameterOf ( method_and_construct_for_param_to );
Node return_for_param_to = ReturnOf ( method_for_param_to );
Node called_param_for_param_to = CalledParamOf ( param_for_param_to );
Node called_return_for_param_to = CalledReturnOf ( return_for_param_to );
Node dst_for_param_to = field_for_param_to | called_param_for_param_to;
Node methodUsedByView = MethodOf ( class_usedBy_view );
Node methodOfTheClass = MethodOf ( class_view );
Node calledMethodOfView = CalledMethodOf ( method_view );
Node params_of_constructor_view = ParameterOf ( creator_view );
Node parameterUsedByView = ParameterOf ( methodUsedByView );
Node paramOfView = ParameterOf ( method_view );
Node called_paramOfView = CalledParamOf ( paramOfView );
Node returnOfView = ReturnOf ( method_view );
Node calledReturnOfView = CalledReturnOf ( returnOfView );
Node returnUsedByView = ReturnOf ( methodUsedByView );
Node field_view_flag_copy = { field_view_pflags };
Node method_to_be_inspected = { method_dumpflag };
Node var_param_to = { param_of_constructor_view };
Node methods_view = creator_view | method_view;
Seg seg_reference = Reference->Any;
Seg seg_line_down_or_up = [seg_reference]*->Any*->Condition?;
Seg seg_call = Condition*->called_method_view->TimingStep->methodOfTheClass;
Seg seg_else = Else->Condition;
Seg seg_callThisMethod = method_view->Condition*->calledMethodsUsedByView->TimingStep;
Seg seg_step_and_ref = Any*->Reference?->DataStep?;
Line dataFlow_parameter_to = var_param_to->[seg_step_and_ref]*->dst_for_param_to;
Line line_for_method_inspection_timing = method_to_be_inspected->Condition*->Any;
Line line_for_method_inspection_condition = method_to_be_inspected->Condition*;
Line line_for_method_inspection_data_flow(P) = [seg_reference]*->Any+->P;
Line timing_call_stack_of_view = method_view->Condition*->called_method_view->TimingStep->method_view;
Line timing_created_by_view = method_view->Condition*->called_creator_usedBy_view;
Line timing_call_method_used_by = method_view->Condition*->called_method_usedBy_view;
Line logic_controledBy_flag_view = field_view_flag_copy->Any*->Condition*->called_method_usedBy_view;
Line calledByElseCond = method_view->[seg_else]+->calledMethodsUsedByView;
Graph method_inspection = line_for_method_inspection_timing,line_for_method_inspection_data_flow(field_used_by_view)<[0,0,1],[[0,0],0,1]>;
LineInstance line_for_method_inspection_data_flow_to_method = line_for_method_inspection_data_flow(called_method_usedBy_view);
LineInstance line_for_method_inspection_data_flow_to_field = line_for_method_inspection_data_flow(field_used_by_view);
