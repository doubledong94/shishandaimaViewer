ClassScope SpecificKeys__________________________________________________________________________________________ = "android.view.View";
ClassScope temp1 = "android.app.servertransaction.BaseClientRequest";
ClassScope temp2 = superOf ( temp1 );
ClassScope baseClientRequest = "android.app.servertransaction.BaseClientRequest";
ClassScope sub_baseClientRequest = subOf ( baseClientRequest );
ClassScope allowedOverrideClass3 = baseClientRequest | sub_baseClientRequest;
ClassScope clientTransactionHandler = "android.app.ClientTransactionHandler";
ClassScope sub_clientTransactionHandler = subOf ( clientTransactionHandler );
ClassScope allowedOverrideClass1 = clientTransactionHandler | sub_clientTransactionHandler;
ClassScope IInterface = "android.os.IInterface";
ClassScope subOf_IInterface = subOf ( IInterface );
ClassScope allowedOverrideClass2 = IInterface | subOf_IInterface;
ClassScope allowedOverrideClass4 = allowedOverrideClass1 | allowedOverrideClass2;
ClassScope allowedOverrideClass = allowedOverrideClass3 | allowedOverrideClass4;
ClassScope AsyncTask = "android.os.AsyncTask";
ClassScope message = "android.os.Message";
ClassScope Choreographer = ["android.view.Choreographer","android.view.Choreographer.CallbackQueue","android.view.Choreographer.CallbackRecord","android.view.Choreographer.FrameCallback","android.view.Choreographer.FrameData","android.view.Choreographer.FrameDisplayEventReceiver","android.view.Choreographer.FrameHandler","android.view.Choreographer.FrameTimeline","android.view.Choreographer.VsyncCallback"];
ClassScope activityThread_handler = "android.app.ActivityThread.H";
ClassScope ServiceConnection = "android.content.ServiceConnection";
ClassScope Service = "android.app.Service";
ClassScope subOf_Service = subOf ( Service );
ClassScope SystemService = "com.android.server.SystemService";
ClassScope subOf_SystemService = subOf ( SystemService );
ClassScope ActivityManagerService = "com.android.server.am.ActivityManagerService";
ClassScope ActivityLifecycleItem = "android.app.servertransaction.ActivityLifecycleItem";
ClassScope subOf_ActivityLifecycleItem = subOf ( ActivityLifecycleItem );
ClassScope ActivityTransactionItem = "android.app.servertransaction.ActivityTransactionItem";
ClassScope subOf_ActivityTransactionItem = subOf ( ActivityTransactionItem );
ClassScope LaunchActivityItem = "android.app.servertransaction.LaunchActivityItem";
ClassScope supOf_LaunchActivityItem = superOf ( LaunchActivityItem );
ClassScope ClientTransactionItem = "android.app.servertransaction.ClientTransactionItem";
ClassScope subOf_ClientTransactionItem = subOf ( ClientTransactionItem );
ClassScope ActivityRecord = "com.android.server.wm.ActivityRecord";
ClassScope ActivityManagerInternal = "android.app.ActivityManagerInternal";
ClassScope ZygoteProcess = "android.os.ZygoteProcess";
ClassScope ActivityStarter = "com.android.server.wm.ActivityStarter";
ClassScope ActivityTaskManagerService = "com.android.server.wm.ActivityTaskManagerService";
ClassScope android_content_broadcastReceiver = "android.content.BroadcastReceiver";
ClassScope android_server_am_processList = "com.android.server.am.ProcessList";
ClassScope os_ZygoteInit = "com.android.internal.os.ZygoteInit";
ClassScope java_reflec_method = "java.lang.reflect.Method";
ClassScope androd_os_hanlder = "android.os.Handler";
ClassScope android_view_windowManagerGlobal = "android.view.WindowManagerGlobal";
ClassScope activityTaskManagerService = "com.android.server.wm.ActivityTaskManagerService";
ClassScope android_os_messageQueue = "android.os.MessageQueue";
ClassScope android_app_ActivityThread = "android.app.ActivityThread";
ClassScope android_app_instrumentation = "android.app.Instrumentation";
ClassScope resourceImpl_themeImpl = "android.content.res.ResourcesImpl.ThemeImpl";
ClassScope windowManagerImpl = "android.view.WindowManagerImpl";
ClassScope android_internal_phoneWindow = "com.android.internal.policy.PhoneWindow";
ClassScope android_view_view = "android.view.View";
ClassScope android_view_contextThemeWrapper = "android.view.ContextThemeWrapper";
ClassScope android_view_layoutInflater = "android.view.LayoutInflater";
ClassScope android_app_activity = "android.app.Activity";
ClassScope android_view_window = "android.view.Window";
ClassScope android_content_context = "android.content.Context";
ClassScope android_util_xml = "android.util.Xml";
ClassScope android_os_handler = "android.os.Handler";
ClassScope classContextImpl = "android.app.ContextImpl";
ClassScope subClass_______________________________________________________ = { SpecificKeys__________________________________________________________________________________________ };
ClassScope show_sub_of = subOf ( activityTaskManagerService );
ClassScope subclass_of_window = subOf ( android_view_window );
ClassScope subclass_of_context = subOf ( android_content_context );
ClassScope subclass_of_view = subOf ( android_view_view );
ClassScope superClass_______________________________________________________________ = { SpecificKeys__________________________________________________________________________________________ };
ClassScope super_of_view = superOf ( android_view_view );
ClassScope superOf_windowManager = superOf ( windowManagerImpl );
ClassScope inPackage______________________________________________________________________ = { SpecificKeys__________________________________________________________________________________________ };
ClassScope android_app = inPackage ( "android.app" );
Node MSG_broadcast_intent = ["com.android.server.am.BroadcastQueueImpl.BROADCAST_INTENT_MSG" ("com.android.server.am.BroadcastQueueImpl")];
Node Method_____________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node allowedOverride = MethodOf ( allowedOverrideClass );
Node calledAllowedOverride = CalledMethodOf ( allowedOverride );
Node handleMessage = "android.os.Handler.handleMessage::Message:" ("android.os.Handler");
Node sub_handleMessage = subOf ( handleMessage );
Node MSG_byHandleMessage = fieldUsedBy ( sub_handleMessage );
Node fieldOf_message = FieldOf ( message );
Node message_by_handler = MSG_byHandleMessage - fieldOf_message;
Node postCallback = "android.view.Choreographer.postCallback::int,Runnable,Object:" ("android.view.Choreographer");
Node nativeScheduleVsync = "android.view.DisplayEventReceiver.nativeScheduleVsync::long:" ("android.view.DisplayEventReceiver");
Node message_what = ["android.os.Message.obtain::Handler,int:what" ("android.os.Message"),"android.os.Handler.obtainMessage::int:what" ("android.os.Handler"),"android.os.Handler.obtainMessage::int,Object:what" ("android.os.Handler"),"android.os.Handler.obtainMessage::int,int,int:what" ("android.os.Handler"),"android.os.Handler.obtainMessage::int,int,int,Object:what" ("android.os.Handler"),"android.os.Message.obtain::Handler,int,Object:what" ("android.os.Message"),"android.os.Message.obtain::Handler,int,int,int:what" ("android.os.Message"),"android.os.Message.obtain::Handler,int,int,int,Object:what" ("android.os.Message")];
Node called_message_what = CalledParamOf ( message_what );
Node processCurBroadcastLocked = "com.android.server.am.BroadcastQueueImpl.processCurBroadcastLocked::BroadcastRecord,ProcessRecord:" ("com.android.server.am.BroadcastQueueImpl");
Node processNextBroadcastLocked = "com.android.server.am.BroadcastQueueImpl.processNextBroadcastLocked::boolean,boolean:" ("com.android.server.am.BroadcastQueueImpl");
Node sendBroadcast = "android.content.Context.sendBroadcast::Intent:" ("android.content.Context");
Node sub_sendBroadcast = subOf ( sendBroadcast );
Node broadcastIntentWithFeature = "com.android.server.am.ActivityManagerService.broadcastIntentWithFeature::IApplicationThread,String,Intent,String,IIntentReceiver,int,String,Bundle,String[],String[],String[],int,Bundle,boolean,boolean,int:" ("com.android.server.am.ActivityManagerService");
Node sendBroadCast = "android.app.ContextImpl.sendBroadcast::Intent:" ("android.app.ContextImpl");
Node scheduleReceiverList = "com.android.server.am.SameProcessApplicationThread.scheduleReceiverList::List:" ("com.android.server.am.SameProcessApplicationThread");
Node superOf_scheduleReceiverList = superOf ( scheduleReceiverList );
Node BroadcastReceiver_onReceive = "android.content.BroadcastReceiver.onReceive::Context,Intent:" ("android.content.BroadcastReceiver");
Node Called_BroadcastReceiver_onReceive = CalledParamOf ( BroadcastReceiver_onReceive );
Node messageQueue = "android.os.Handler.mQueue" ("android.os.Handler");
Node loopOnce = "android.os.Looper.loopOnce::Looper,long,int:" ("android.os.Looper");
Node AnimationListener_onStart = "android.view.animation.Animation.AnimationListener.onAnimationStart::Animation:" ("android.view.animation.Animation.AnimationListener");
Node AnimatorUpdateListener_onUpdate = "android.animation.ValueAnimator.AnimatorUpdateListener.onAnimationUpdate::ValueAnimator:" ("android.animation.ValueAnimator.AnimatorUpdateListener");
Node Choreographer_postCallback = "android.view.Choreographer.postCallback::int,Runnable,Object:" ("android.view.Choreographer");
Node view_invalidate = "android.view.View.invalidate:::" ("android.view.View");
Node injectInputEvent = "com.android.internal.policy.PhoneWindow.injectInputEvent::InputEvent:" ("com.android.internal.policy.PhoneWindow");
Node supOf_injectInputEvent = superOf ( injectInputEvent );
Node doConsumeBatchedInput = "android.view.BatchedInputEventReceiver.doConsumeBatchedInput::long:" ("android.view.BatchedInputEventReceiver");
Node onTouchEvent = "android.view.View.onTouchEvent::MotionEvent:" ("android.view.View");
Node doScheduleVsync = "android.view.Choreographer.doScheduleVsync:::" ("android.view.Choreographer");
Node vsync_msg = "android.view.Choreographer.MSG_DO_SCHEDULE_VSYNC" ("android.view.Choreographer");
Node choreographer_doCallbacks = "android.view.Choreographer.doCallbacks::int,long:" ("android.view.Choreographer");
Node Choreographer_CallbackQueue_head = "android.view.Choreographer.CallbackQueue.mHead" ("android.view.Choreographer.CallbackQueue");
Node doScheduleCallback = "android.view.Choreographer.doScheduleCallback::int:" ("android.view.Choreographer");
Node methodOf_AsyncTask = MethodOf ( AsyncTask );
Node methodOf_choreographer = MethodOf ( Choreographer );
Node ZygoteInit_Main = "com.android.internal.os.ZygoteInit.main::String[]:" ("com.android.internal.os.ZygoteInit");
Node AM_getService = ["android.app.ActivityManager.getService:::" ("android.app.ActivityManager"),"android.app.ActivityTaskManager.getService:::" ("android.app.ActivityTaskManager")];
Node activityThread_Main = "android.app.ActivityThread.main::String[]:" ("android.app.ActivityThread");
Node activityThread_handleBindApplication = "android.app.ActivityThread.handleBindApplication::ActivityThread.AppBindData:" ("android.app.ActivityThread");
Node activityThread_H_executeTransaction = "android.app.ActivityThread.H.EXECUTE_TRANSACTION" ("android.app.ActivityThread.H");
Node activity_oncreate = ["android.app.Activity.onCreate::Bundle:" ("android.app.Activity"),"android.app.Activity.onCreate::Bundle,PersistableBundle:" ("android.app.Activity")];
Node AMS_attachApplicationLocked = "com.android.server.am.ActivityManagerService.attachApplicationLocked::IApplicationThread,int,int,long:" ("com.android.server.am.ActivityManagerService");
Node ATMS_attachApplication = "com.android.server.wm.ActivityTaskManagerService.LocalService.attachApplication::WindowProcessController:" ("com.android.server.wm.ActivityTaskManagerService.LocalService");
Node ATSup_realStartActivityLocked = "com.android.server.wm.ActivityTaskSupervisor.realStartActivityLocked::ActivityRecord,WindowProcessController,boolean,boolean:" ("com.android.server.wm.ActivityTaskSupervisor");
Node AMS_finishAttachApplication = "com.android.server.am.ActivityManagerService.finishAttachApplication::long:" ("com.android.server.am.ActivityManagerService");
Node activityThread_sendMessage = ["android.app.ActivityThread.sendMessage::int,Object:" ("android.app.ActivityThread"),"android.app.ActivityThread.sendMessage::int,Object,int:" ("android.app.ActivityThread"),"android.app.ActivityThread.sendMessage::int,Object,int,int:" ("android.app.ActivityThread"),"android.app.ActivityThread.sendMessage::int,Object,int,int,boolean:" ("android.app.ActivityThread")];
Node context_startService = "android.app.ContextImpl.startService::Intent:" ("android.app.ContextImpl");
Node service_onCreate = "android.app.Service.onCreate:::" ("android.app.Service");
Node MSG_CREATE_SERVICE = "android.app.ActivityThread.H.CREATE_SERVICE" ("android.app.ActivityThread.H");
Node creatorOf_LaunchActivityItem = CreatorOf ( LaunchActivityItem );
Node AMS_startService = "com.android.server.am.ActivityManagerService.startService::IApplicationThread,Intent,String,boolean,String,String,int:" ("com.android.server.am.ActivityManagerService");
Node PooledRunnable_recycleOnUse = "com.android.internal.util.function.pooled.PooledRunnable.recycleOnUse:::" ("com.android.internal.util.function.pooled.PooledRunnable");
Node subOf_PooledRunnable_recycleOnUse = superOf ( PooledRunnable_recycleOnUse );
Node localService_startProcess = "com.android.server.am.ActivityManagerService.LocalService.startProcess::String,ApplicationInfo,boolean,boolean,String,ComponentName:" ("com.android.server.am.ActivityManagerService.LocalService");
Node superOf_startProcess = superOf ( localService_startProcess );
Node attachApplication = "com.android.server.am.ActivityManagerService.attachApplication::IApplicationThread,long:" ("com.android.server.am.ActivityManagerService");
Node superOf_attachApplication = superOf ( attachApplication );
Node attemptZygoteSendArgsAndGetResult = "android.os.ZygoteProcess.attemptZygoteSendArgsAndGetResult::ZygoteProcess.ZygoteState,String:" ("android.os.ZygoteProcess");
Node ActivityRecord_isProcessRunning = "com.android.server.wm.ActivityRecord.isProcessRunning:::" ("com.android.server.wm.ActivityRecord");
Node ATMS_startProcess = "com.android.server.wm.ActivityTaskManagerService.startProcessAsync::ActivityRecord,boolean,boolean,String:" ("com.android.server.wm.ActivityTaskManagerService");
Node methodUse_ATMS_startProcess = methodUse ( ATMS_startProcess );
Node ActivityManagerInternal_startProcess = "android.app.ActivityManagerInternal.startProcess::String,ApplicationInfo,boolean,boolean,String,ComponentName:" ("android.app.ActivityManagerInternal");
Node sub_atms_startProcess = subOf ( ActivityManagerInternal_startProcess );
Node methodOfZygoteProcess = MethodOf ( ZygoteProcess );
Node methodUsedBy_ZygoteProcess = methodUsedBy ( methodOfZygoteProcess );
Node atms_startActivity = ["com.android.server.wm.ActivityTaskManagerService.startActivity::IApplicationThread,String,String,Intent,String,IBinder,String,int,int,ProfilerInfo,Bundle:" ("com.android.server.wm.ActivityTaskManagerService"),"com.android.server.wm.ActivityTaskManagerService.startActivityAndWait::IApplicationThread,String,String,Intent,String,IBinder,String,int,int,ProfilerInfo,Bundle,int:" ("com.android.server.wm.ActivityTaskManagerService"),"com.android.server.wm.ActivityTaskManagerService.startActivityAsCaller::IApplicationThread,String,Intent,String,IBinder,String,int,int,ProfilerInfo,Bundle,boolean,int:" ("com.android.server.wm.ActivityTaskManagerService"),"com.android.server.wm.ActivityTaskManagerService.startActivityFromGameSession::IApplicationThread,String,String,int,int,Intent,int,int:" ("com.android.server.wm.ActivityTaskManagerService"),"com.android.server.wm.ActivityTaskManagerService.startActivityIntentSender::IApplicationThread,IIntentSender,IBinder,Intent,String,IBinder,String,int,int,int,Bundle:" ("com.android.server.wm.ActivityTaskManagerService"),"com.android.server.wm.ActivityTaskManagerService.startActivityWithConfig::IApplicationThread,String,String,Intent,String,IBinder,String,int,int,Configuration,Bundle,int:" ("com.android.server.wm.ActivityTaskManagerService")];
Node methodOf_ActivityStarter = MethodOf ( ActivityStarter );
Node methodUsedBy_ActivityStarter = methodUsedBy ( methodOf_ActivityStarter );
Node activityThread_attach = "android.app.ActivityThread.attach::boolean,long:" ("android.app.ActivityThread");
Node zygoteSerever_zygoteSocket = ["com.android.internal.os.ZygoteServer.mZygoteSocket" ("com.android.internal.os.ZygoteServer")];
Node zygoteConnection_mSocket = ["com.android.internal.os.ZygoteConnection.mSocket" ("com.android.internal.os.ZygoteConnection")];
Node messageQueue_enqueueMessage = "android.os.MessageQueue.enqueueMessage::Message,long:" ("android.os.MessageQueue");
Node methodOf_activityThread = MethodOf ( android_app_ActivityThread );
Node methodOf_instrumentation = MethodOf ( android_app_instrumentation );
Node calledMethodOf_activityThread = CalledMethodOf ( methodOf_activityThread );
Node getLifecyclePath = ["android.app.servertransaction.TransactionExecutorHelper.getLifecyclePath::int,int,boolean:" ("android.app.servertransaction.TransactionExecutorHelper")];
Node ClientTransactionHandler_scheduleTransaction = ["android.app.ClientTransactionHandler.scheduleTransaction::ClientTransaction:" ("android.app.ClientTransactionHandler")];
Node activityStarter_executeRequest = ["com.android.server.wm.ActivityStarter.executeRequest::ActivityStarter.Request:" ("com.android.server.wm.ActivityStarter")];
Node context_startActivity = "android.content.Context.startActivity::Intent:" ("android.content.Context");
Node activity_startActivity = "android.app.Activity.startActivity::Intent:" ("android.app.Activity");
Node subMethod_context_startActivity = subOf ( context_startActivity );
Node activity_onStart = "android.app.Activity.onStart:::" ("android.app.Activity");
Node activityTaskManagerService_startActivity = "com.android.server.wm.ActivityTaskManagerService.startActivity::IApplicationThread,String,String,Intent,String,IBinder,String,int,int,ProfilerInfo,Bundle:" ("com.android.server.wm.ActivityTaskManagerService");
Node view_draw_1 = "android.view.View.draw::Canvas:" ("android.view.View");
Node view_draw_3 = "android.view.View.draw::Canvas,ViewGroup,long:" ("android.view.View");
Node view_ondraw = "android.view.View.onDraw::Canvas:" ("android.view.View");
Node view_segFlags = "android.view.View.setFlags::int,int:" ("android.view.View");
Node view_view = "android.view.View.View::Context,AttributeSet,int,int:" ("android.view.View");
Node view_onTouch = "android.view.View.onTouchEvent::MotionEvent:" ("android.view.View");
Node processList_startProcessLocked = "com.android.server.am.ProcessList.startProcessLocked::ProcessRecord,HostingRecord,int,boolean,boolean,String:" ("com.android.server.am.ProcessList");
Node broadcastReceiver_onreceiver = "android.content.BroadcastReceiver.onReceive::Context,Intent:" ("android.content.BroadcastReceiver");
Node runtimeInit_findStaticMain = "com.android.internal.os.RuntimeInit.findStaticMain::String,String[],ClassLoader:" ("com.android.internal.os.RuntimeInit");
Node method_of_resourceImpl_themeImpl = MethodOf ( resourceImpl_themeImpl );
Node method_of_view = MethodOf ( android_view_view );
Node method_of_reflectMethod = MethodOf ( java_reflec_method );
Node methodOf_ZygoteInit = MethodOf ( os_ZygoteInit );
Node methodOf_broadcastReceiver = MethodOf ( android_content_broadcastReceiver );
Node methodOf_processList = MethodOf ( android_server_am_processList );
Node methodOf_atms = MethodOf ( ActivityTaskManagerService );
Node methodOf_ams = MethodOf ( ActivityManagerService );
Node Field_________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node field_message_what = "android.os.Message.what" ("android.os.Message");
Node MSG_Receiver = ["android.app.ActivityThread.H.RECEIVER" ("android.app.ActivityThread.H")];
Node dispatchInputEvent_event = "android.view.ViewRootImpl.dispatchInputEvent::InputEvent,InputEventReceiver:event" ("android.view.ViewRootImpl");
Node mPendingInputEventHead = "android.view.ViewRootImpl.mPendingInputEventHead" ("android.view.ViewRootImpl");
Node mTraversalRunnable = "android.view.ViewRootImpl.mTraversalRunnable" ("android.view.ViewRootImpl");
Node LaunchActivityItem_CREATOR = "android.app.servertransaction.LaunchActivityItem.CREATOR" ("android.app.servertransaction.LaunchActivityItem");
Node ANDROID_MANIFEST_FILENAME = ["com.android.internal.pm.pkg.parsing.ParsingPackageUtils.ANDROID_MANIFEST_FILENAME" ("com.android.internal.pm.pkg.parsing.ParsingPackageUtils"),"android.content.pm.PackageParser.ANDROID_MANIFEST_FILENAME" ("android.content.pm.PackageParser")];
Node ACTION_MAIN = "android.content.Intent.ACTION_MAIN" ("android.content.Intent");
Node fieldOf_activityThread_handler = FieldOf ( activityThread_handler );
Node processList_pendingStarts = "com.android.server.am.ProcessList.mPendingStarts" ("com.android.server.am.ProcessList");
Node activityThread_mStartSeq = ["android.app.ActivityThread.mStartSeq" ("android.app.ActivityThread")];
Node messageQueue_mMessages = ["android.os.MessageQueue.mMessages" ("android.os.MessageQueue")];
Node fieldOf_windowManagerGlobal = FieldOf ( android_view_windowManagerGlobal );
Node fieldOf_activityThread = FieldOf ( android_app_ActivityThread );
Node fieldOf_instrumentation = FieldOf ( android_app_instrumentation );
Node phoneWindow_mDecor = ["com.android.internal.policy.PhoneWindow.mDecor" ("com.android.internal.policy.PhoneWindow")];
Node activity_mDecor = ["android.app.Activity.mDecor" ("android.app.Activity")];
Node viewRootImpl_mView = ["android.view.ViewRootImpl.mView" ("android.view.ViewRootImpl")];
Node viewRootImpl_mSurface = ["android.view.ViewRootImpl.mSurface" ("android.view.ViewRootImpl")];
Node assetManager_frameworkApkPath = "android.content.res.AssetManager.FRAMEWORK_APK_PATH" ("android.content.res.AssetManager");
Node resourceImpl_themeImpl_mThemeResId = ["android.content.res.ResourcesImpl.ThemeImpl.mThemeResId" ("android.content.res.ResourcesImpl.ThemeImpl")];
Node themeWrapper_themeResource = ["android.view.ContextThemeWrapper.mThemeResource" ("android.view.ContextThemeWrapper")];
Node phoneWindow_mTheme = ["com.android.internal.policy.PhoneWindow.mTheme" ("com.android.internal.policy.PhoneWindow")];
Node layoutInflater_mFactory = ["android.view.LayoutInflater.mFactory2" ("android.view.LayoutInflater"),"android.view.LayoutInflater.mFactory" ("android.view.LayoutInflater"),"android.view.LayoutInflater.mPrivateFactory" ("android.view.LayoutInflater")];
Node view_mViewFlags = "android.view.View.mViewFlags" ("android.view.View");
Node processRecord_info = "com.android.server.am.ProcessRecord.info" ("com.android.server.am.ProcessRecord");
Node Parameter____________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node modern_enqueueBroadcastLocked_r = "com.android.server.am.BroadcastQueueModernImpl.enqueueBroadcastLocked::BroadcastRecord:r" ("com.android.server.am.BroadcastQueueModernImpl");
Node enqueueBroadcastLocked_r = "com.android.server.am.BroadcastQueueImpl.enqueueBroadcastLocked::BroadcastRecord:r" ("com.android.server.am.BroadcastQueueImpl");
Node onTouchEvent_event = "android.view.View.onTouchEvent::MotionEvent:event" ("android.view.View");
Node ServiceConnection_service = "android.content.ServiceConnection.onServiceConnected::ComponentName,IBinder:service" ("android.content.ServiceConnection");
Node called_ServiceConnection_service = CalledParamOf ( ServiceConnection_service );
Node ams_attachApplication_startSeq = "com.android.server.am.ActivityManagerService.attachApplication::IApplicationThread,long:startSeq" ("com.android.server.am.ActivityManagerService");
Node activityThread_handleBindApp_data = "android.app.ActivityThread.handleBindApplication::ActivityThread.AppBindData:data" ("android.app.ActivityThread");
Node paramOf_instrumentation = ParameterOf ( methodOf_instrumentation );
Node paramOf_activityThread_attach = ParameterOf ( activityThread_attach );
Node paramOf_getLifecyclePath = ParameterOf ( getLifecyclePath );
Node performLifecycleSequence_path = ["android.app.servertransaction.TransactionExecutor.performLifecycleSequence::ActivityThread.ActivityClientRecord,IntArray,ClientTransaction:path" ("android.app.servertransaction.TransactionExecutor")];
Node performLifecycleSequence_path_called = CalledParamOf ( performLifecycleSequence_path );
Node activityStarter_executeRequest_request = ParameterOf ( activityStarter_executeRequest );
Node handler_post_r = "android.os.Handler.post::Runnable:r" ("android.os.Handler");
Node view_ondraw_canvas = "android.view.View.onDraw::Canvas:canvas" ("android.view.View");
Node view_ondraw_canvas_called = CalledParamOf ( view_ondraw_canvas );
Node view_draw_canvas = "android.view.View.draw::Canvas:canvas" ("android.view.View");
Node phoneWindow_setTheme_resId = "com.android.internal.policy.PhoneWindow.setTheme::int:resid" ("com.android.internal.policy.PhoneWindow");
Node layoutInflater_inflate_resource = "android.view.LayoutInflater.inflate::int,ViewGroup,boolean:resource" ("android.view.LayoutInflater");
Node contextImpl_setTheme_resId = ["android.app.ContextImpl.setTheme::int:resId" ("android.app.ContextImpl")];
Node xml_asAttributeSet_parser = ["android.util.Xml.asAttributeSet::XmlPullParser:parser" ("android.util.Xml")];
Node view_view_context = "android.view.View.View::Context,AttributeSet,int,int:context" ("android.view.View");
Node activity_setTheme_resId = "android.app.Activity.setTheme::int:resid" ("android.app.Activity");
Node view_setflags_flags = "android.view.View.setFlags::int,int:flags" ("android.view.View");
Node startProcessList_entryPoint = "com.android.server.am.ProcessList.startProcessLocked::HostingRecord,String,ProcessRecord,int,int[],int,int,int,String,String,String,String,long,long:entryPoint" ("com.android.server.am.ProcessList");
Node paramOf_atms_startActivity = ParameterOf ( atms_startActivity );
Node Return___________________________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node createBitmap_return = ["android.graphics.Bitmap.createBitmap::DisplayMetrics,int,int,Bitmap.Config,boolean:return" ("android.graphics.Bitmap")];
Node activityStarter_executeRequest_return = ReturnOf ( activityStarter_executeRequest );
Node messageQueue_next = "android.os.MessageQueue.next:::return" ("android.os.MessageQueue");
Node CalledReturn______________________________________________________ = { Method_____________________________________________________________________________________ };
Node calledMessageQueue = CalledReturnOf ( messageQueue_next );
Node instance______________________________________________________________________ = { Method_____________________________________________________________________________________ };
Node instanceOfActivityThread = InstanceOf ( android_app,android_app_ActivityThread );
Seg UNITS________________________________________________________________________________________________________________________________ = Any->Any;
Seg unit_data_stepIn = CalledParameter->DataStep->Parameter;
Seg unit_data_overrideIn = CalledParameter->DataOverride->Parameter;
Seg unit_data_stepOut = Return->DataStep->CalledReturn?;
Seg unit_data_overrideOut = Return->DataOverride->CalledReturn?;
Seg unit_timing_stepIn = CalledMethod->TimingStep->Method->Condition*;
Seg unit_timing_anonymous = Anonymous->Method->Condition*;
Seg unit_timing_allowed_override = calledAllowedOverride->TimingOverride->allowedOverride->Condition*;
Seg unit_timing_overrideIn = CalledMethod->TimingOverride->Method->Condition*;
Seg unit_stepOver = CalledParameter->CalledMethod->CalledReturn?;
Seg unit_refField = Reference->Field;
Seg unit_refMethod = Reference->CalledReturn;
Seg unit_refError = Reference->Error;
Seg unit_revRefField = Field->Reference;
Seg unit_revRefMethod = CalledReturn->Reference;
Seg unit_revRefError = Error->Reference;
Seg unit_indexLocal = Index->LV;
Seg unit_indexField = Index->Field;
Seg unit_indexParam = Index->Parameter;
Seg unit_indexCReturn = Index->CalledReturn?;
Seg unit_CMCR = CalledMethod->CalledReturn;
Seg unit_refClass = Class->Reference;
Seg unit_CPCM = CalledParameter->CalledMethod;
Seg unit_revRefClass = Reference->Class;
Seg COMB_______________________________________________________________________________________________________________________ = Any->Any;
Seg comb_generalAny = LV || Field || Parameter || Any || Error;
Seg comb_gernalAny_noOptr = LV || Field || Parameter;
Seg comb_ref = [unit_refField] || [unit_refMethod] || [unit_revRefField] || [unit_revRefMethod] || [unit_refError] || [unit_revRefError];
Seg comb_index = [unit_indexLocal] || [unit_indexField] || [unit_indexParam] || [unit_indexCReturn];
Seg comb_Point = [comb_generalAny] || [comb_ref] || [comb_index];
Seg comb_stepOver = [comb_Point] || [unit_stepOver];
Seg comb_stepInAndOver = [comb_Point] || [unit_stepOver] || [unit_data_stepIn];
Seg comb_stepOutAndOver = [comb_Point] || [unit_stepOver] || [unit_data_stepOut];
Seg comb_overrideIn = [comb_Point] || [unit_data_overrideIn];
Seg comb_overrideOut = [comb_Point] || [unit_data_overrideOut];
Seg comb_method_input = Final || Field || Parameter || [unit_CMCR] || [unit_refClass] || Error;
Seg comb_method_output = Field || Return || [unit_CPCM] || Condition || [unit_revRefClass] || LV || Error;
Seg comb_revRef = [unit_revRefMethod] || [unit_revRefField] || [unit_revRefError];
Seg comb_timing_receiver = LV || Field || Parameter || Return || CalledMethod || Error;
Seg seg_dataFlow_stepIn_noOver = [comb_gernalAny_noOptr]*->[unit_data_stepIn]->[comb_gernalAny_noOptr]*;
Seg dataFlowToMessageWhat = Field->[seg_dataFlow_stepIn_noOver]*->field_message_what;
Seg unit_timing_by_msg = message_by_handler{ NULL  dataFlowToMessageWhat }->FieldConnection->message_by_handler->Any*->Condition*;
Seg comb_timing_stepIn = [unit_timing_stepIn] || [unit_timing_anonymous] || [unit_timing_allowed_override] || [unit_timing_by_msg];
Seg SEG_______________________________________________________________________________________________________________________________________ = Any->Any;
Seg seg_dataFlow_stepIn = [comb_stepOver]*->[unit_data_stepIn]->[comb_stepOver]*;
Seg seg_dataFlow_stepInAndOut = [seg_dataFlow_stepIn]+->[comb_stepOutAndOver]?;
Seg seg_dataFlow_stepOutAndIn = [comb_stepOutAndOver]*->[comb_stepOver]*->[comb_stepInAndOver]*;
Seg seg_toOutput_withinMethod = [comb_stepOver]*->[comb_method_output];
Seg seg_toOutput_stepIn = [comb_stepInAndOver]*->[comb_method_output];
Seg seg_toOutput_stepOut = [comb_stepOutAndOver]*->[comb_method_output];
Seg seg_toOutput_stepInAndOut = [seg_dataFlow_stepInAndOut]->[comb_method_output];
Seg seg_toOutput_stepOutAndIn = [seg_dataFlow_stepOutAndIn]->[comb_method_output];
Seg seg_toReturn_withinMethod = [comb_stepOver]*->Return;
Seg seg_toReturn_stepIn = [comb_stepInAndOver]*->Return;
Seg seg_toReturn_stepOut = [comb_stepOutAndOver]*->Return;
Seg seg_toReturn_stepInAndOut = [seg_dataFlow_stepInAndOut]->Return;
Seg seg_toField_withinMethod = [comb_stepOver]*->Field;
Seg seg_toField_stepIn = [comb_stepInAndOver]*->Field;
Seg seg_toFIeld_stepOut = [comb_stepOutAndOver]*->Field;
Seg seg_toFIeld_stepInAndOut = [seg_dataFlow_stepInAndOut]->Field;
Seg seg_toCalledParam_withinMethod = [comb_stepOver]*->CalledParameter;
Seg seg_toCalledParam_stepIn = [comb_stepInAndOver]*->CalledParameter;
Seg seg_toCalledParam_stepOut = [comb_stepOutAndOver]*->CalledParameter;
Seg seg_toCalledParam_stepInAndOut = [seg_dataFlow_stepInAndOut]->CalledParameter;
Seg seg_toCondition_withinMethod = [comb_stepOver]*->Condition;
Seg seg_toCondition_stepIn = [comb_stepInAndOver]*->Condition;
Seg seg_toCondition_stepOut = [comb_stepOutAndOver]*->Condition;
Seg seg_toCondition_stepInAndOut = [seg_dataFlow_stepInAndOut]->Condition;
Seg seg_toBeCalled_withinMethod = [comb_stepOver]*->[unit_refMethod];
Seg seg_toBeCalled_stepIn = [comb_stepInAndOver]*->[unit_refMethod];
Seg seg_toBeCalled_stepOut = [comb_stepOutAndOver]*->[unit_refMethod];
Seg seg_toBeCalled_stepInAndOut = [seg_dataFlow_stepInAndOut]->[unit_refMethod];
Seg seg_inputTo_withinMethod = [comb_method_input]->[comb_stepOver]*;
Seg seg_inputTo_stepIn = [comb_method_input]->[comb_stepInAndOver]*;
Seg seg_inputTo_stepOut = [comb_method_input]->[comb_stepOutAndOver]*;
Seg seg_inputTo_stepInAndOut = [comb_method_input]->[seg_dataFlow_stepInAndOut];
Seg seg_paramTo_withinMethod = Parameter->[comb_stepOver]*;
Seg seg_paramTo_stepIn = Parameter->[comb_stepInAndOver]*;
Seg seg_paramTo_stepOut = Parameter->[comb_stepOutAndOver]*;
Seg seg_paramTo_stepInAndOut = Parameter->[seg_dataFlow_stepInAndOut];
Seg seg_fieldTo_withMethod = Field->[comb_stepOver]*;
Seg seg_fieldTo_stepIn = Field->[comb_stepInAndOver]*;
Seg seg_fieldTo_stepOut = Field->[comb_stepOutAndOver]*;
Seg seg_fieldTo_stepInAndOut = Field->[seg_dataFlow_stepInAndOut];
Seg seg_calledReturnTo_withinMethod = CalledReturn->[comb_stepOver]*;
Seg seg_calledReturnTo_stepIn = CalledReturn->[comb_stepInAndOver]*;
Seg seg_calledReturnTo_stepOut = CalledReturn->[comb_stepOutAndOver]*;
Seg seg_calledReturnTo_stepInAndOut = CalledReturn->[seg_dataFlow_stepInAndOut];
Seg toCondition = [comb_stepOver]*->Else?->Condition;
Seg LINE_DOWN_AND_UP_______________________________________________________________________________________________________________ = Any->Any;
Seg linedown_toOutput = CalledReturn?->Reference?->Condition*->[seg_toOutput_withinMethod];
Seg linedown_stepOut_toOutput = DataStep?->CalledReturn?->[seg_toOutput_stepOut];
Seg linedown_setpIn_toOutput = DataStep->Parameter->[seg_toOutput_stepIn];
Seg linedown_overrideIn_toOutput = DataOverride->Parameter->[seg_toOutput_withinMethod];
Seg linedown_timingOverride = TimingOverride->Method->Condition*->[unit_timing_overrideIn]*->CalledMethod;
Seg linedown_timing_stepIn = TimingStep?->Method?->Condition*->[unit_timing_stepIn]*->CalledMethod;
Seg linedown_conditionTo = TimingStep?->Method?->Condition*->[comb_timing_receiver];
Seg linedown_CMCR = CalledMethod?->CalledReturn;
Seg lineup_fromInput = [seg_inputTo_withinMethod]->CalledParameter?->DataStep?->Reference?;
Seg lineup_stepOut_formInput = [seg_inputTo_stepIn]->CalledParameter->DataStep;
Seg lineup_stepIn_fromInput = [seg_inputTo_stepOut]->Return?->CalledParameter?->DataStep?;
Seg lineup_overrideParam = [comb_method_input]->[comb_overrideIn]*->CalledParameter->DataOverride;
Seg lineup_refed_fromInput_stepIn = [seg_inputTo_stepIn]->Reference;
Seg lineup_refed_fromInput = [seg_inputTo_withinMethod]->Reference;
Seg lineup_timing_override = CalledMethod->TimingOverride;
Seg lineup_timing_step = Method->Condition*->[unit_timing_stepIn]*->CalledMethod?->TimingStep?;
Seg lineup_timing_step_1 = Method->Condition*->[unit_timing_stepIn]->CalledMethod?->TimingStep?;
Seg lineup_timing_step_2 = Method->Condition*->[unit_timing_stepIn]->[unit_timing_stepIn]->CalledMethod?->TimingStep?;
Seg lineup_toLogic = [comb_method_input]->[comb_stepOver]*;
Seg lineup_CRCM = CalledMethod->Any?;
Seg lineup_conditionTo = Method->Condition*;
Seg lineup_methodTo = [lineup_conditionTo]->[unit_timing_stepIn]*;
Seg lineup_valueFrom = [comb_method_input]->[comb_stepOver]*;
Line LINES______________________________________________________________________________________________________________________________(P) = P->Any;
Line toOutput_withinMethod(P) = P->[seg_toOutput_withinMethod];
Line toOutput_stepIn(P) = P->[seg_toOutput_stepIn];
Line toOutput_stepOut(P) = P->[seg_toOutput_stepOut];
Line toOutput_stepInAndOut(P) = P->[seg_toOutput_stepInAndOut];
Line toOutput_stepOutAndIn(P) = P->[seg_toOutput_stepOutAndIn];
Line toReturn_withinMethod(P) = P->[seg_toReturn_withinMethod];
Line toReturn_stepIn(P) = P->[seg_toReturn_stepIn];
Line toReturn_stepOut(P) = P->[seg_toReturn_stepOut];
Line toReturn_stepInAndOut(P) = P->[seg_toReturn_stepInAndOut];
Line toField_withinMethod(P) = P->[seg_toField_withinMethod];
Line toField_stepIn(P) = P->[seg_toField_stepIn];
Line toField_stepOut(P) = P->[seg_toFIeld_stepOut];
Line toField_stepInAndOut(P) = P->[seg_toFIeld_stepInAndOut];
Line toCalledParam_withinMethod(P) = P->[seg_toCalledParam_withinMethod];
Line toCalledParam_stepIn(P) = P->[seg_toCalledParam_stepIn];
Line toCalledParam_stepOut(P) = P->[seg_toCalledParam_stepOut];
Line toCalledParam_stepInAndOut(P) = P->[seg_toCalledParam_stepInAndOut];
Line toCondition_withinMethod(P) = P->[seg_toCondition_withinMethod];
Line toCondition_stepIn(P) = P->[seg_toCondition_stepIn];
Line toCondition_stepOut(P) = P->[seg_toCondition_stepOut];
Line toCondition_stepInAndOut(P) = P->[seg_toCondition_stepInAndOut];
Line toBeCalled_withinMethod(P) = P->[seg_toBeCalled_withinMethod];
Line toBeCalled_stepIn(P) = P->[seg_toBeCalled_stepIn];
Line toBeCalled_stepOut(P) = P->[seg_toBeCalled_stepOut];
Line toBeCalled_stepInAndOut(P) = P->[seg_toBeCalled_stepInAndOut];
Line inputTo_withinMethod(P) = [seg_inputTo_withinMethod]->CalledParameter?->DataStep?->P;
Line inputTo_stepIn(P) = [seg_inputTo_stepIn]->CalledParameter?->DataStep?->P;
Line inputTo_stepOut(P) = [seg_inputTo_stepOut]->P;
Line inputTo_stepInAndOut(P) = [seg_inputTo_stepInAndOut]->P;
Line paramTo_withinMethod(P) = [seg_paramTo_withinMethod]->P;
Line paramTo_stepIn(P) = [seg_paramTo_stepIn]->P;
Line paramTo_stepOut(P) = [seg_paramTo_stepOut]->P;
Line paramTo_stepInAndOut(P) = [seg_paramTo_stepInAndOut]->P;
Line fieldTo_withMethod(P) = [seg_fieldTo_withMethod]->P;
Line fieldTo_stepIn(P) = [seg_fieldTo_stepIn]->P;
Line fieldTo_stepOut(P) = [seg_fieldTo_stepOut]->P;
Line fieldTo_stepInAndOut(P) = [seg_fieldTo_stepInAndOut]->P;
Line calledReturnTo_withinMethod(P) = [seg_calledReturnTo_withinMethod]->P;
Line calledReturnTo_stepIn(P) = [seg_calledReturnTo_stepIn]->P;
Line calledReturnTo_stepOut(P) = [seg_calledReturnTo_stepOut]->P;
Line calledReturnTo_stepInAndOut(P) = [seg_calledReturnTo_stepInAndOut]->P;
Line TIMING___________________________________________________________________________________________________________________________(P) = P->Any;
Line timing_insideClass(MethodOfClass) = MethodOfClass->Condition*->[comb_timing_receiver];
Line timing_insideOf_class(M1,M2) = M1->Condition*->CalledMethod->TimingStep->M2;
Line timing_insideOf(M) = M->Condition*->[comb_timing_receiver];
Line timing_methodCallInsideOf(M1) = M1->Condition*->CalledMethod->TimingStep?->Method?;
Line timing_toCondition_stepIn(M) = M->Condition*->[unit_timing_stepIn]*->CalledMethod;
Line timing_conditionTo_stepIn(M) = Method->Condition*->[comb_timing_stepIn]*->CalledMethod?->TimingStep?->M;
Line timing_toMsg_stepIn(M) = M->Condition*->[unit_timing_stepIn]*->Field->called_message_what;
Line timing_MsgTo_stepIn(M) = Field->FieldConnection->Any*->Condition*->[unit_timing_stepIn]*->CalledMethod?->TimingStep?->M;
Line timing_toMsg_and_msgTo_stepIn(M1,M2) = M1->Condition*->[unit_timing_stepIn]*->message_by_handler->FieldConnection->message_by_handler->Any*->Condition*->[unit_timing_stepIn]*->CalledMethod?->TimingStep?->M2;
Line timing_path_search(M1,M2) = M1->Condition*->[comb_timing_stepIn]*->CalledMethod?->TimingStep?->M2;
Line timingMethodUseField(M,F) = M->Condition*->F;
Line timing_methodUse(P) = Method->Condition*->P;
Line timing_overrideIn(CalledM) = CalledM->TimingStep->Method;
Line FOR_GRAPH______________________________________________________(P) = P->Any;
Line stepInAndOverTo(P) = P->[comb_stepInAndOver]*->[comb_stepInAndOver];
Line stepOutAndInTo(P) = P->[seg_dataFlow_stepOutAndIn]->[comb_stepInAndOver];
Line revRefed(P) = CalledMethod->[comb_revRef]+->P;
Graph stepInAndCalled(P,ByIntersection) = stepInAndOverTo(P),revRefed(ByIntersection)<[0,[[[0,0,0,0,0],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]]],[0,0,0],[0,0,0]],[[[1,1,1,0,1],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,1],[0,1],[0,1],[0,0]]],[0,0,0],[0,0,1]]],[0,[[0,0],[0,0],[0,0]],1]>;
Graph timing_byMsg(M1,M2) = timing_toMsg_stepIn(M1),timing_MsgTo_stepIn(M2)<[0,0,[0,0,0,0],1,0],[1,0,0,0,[0,0,0,0],0,0,0]>;
Graph stepOutAndInAndCalled(P,ByIntersection) = stepOutAndInTo(P),revRefed(ByIntersection)<[0,[[[[0,0,0,0,0],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]]],[0,0,0],[0,0,0]],[[[0,0,0,0,0],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]]],[0,0,0]],[[[0,0,0,0,0],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]]],[0,0,0],[0,0,0]]],[[[1,1,1,0,1],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]]],[0,0,0],[0,0,1]]],[0,[[0,0],[0,0],[0,0]],1]>;
LineInstance timing_path_search_start_to_onstart = timing_path_search(subMethod_context_startActivity,activity_onStart);
LineInstance timing_toMsg_and_msgTo_stepIn_postCallback_to_vsync = timing_toMsg_and_msgTo_stepIn(postCallback,nativeScheduleVsync);
LineInstance timing_path_search_startToOnStart = timing_path_search(activity_startActivity,activity_onStart);
LineInstance timing_conditionTo_stepIn_onStart = timing_conditionTo_stepIn(activity_onStart);
LineInstance timing_conditionTo_stepIn_activity_onStart = timing_conditionTo_stepIn(activity_onStart);
LineInstance timing_conditionTo_stepIn_processCurBroadcastLocked = timing_conditionTo_stepIn(processCurBroadcastLocked);
LineInstance timing_toCondition_stepIn_sendBroadcast_sub = timing_toCondition_stepIn(sub_sendBroadcast);
LineInstance toOutput_stepIn_modern_enqueueBroadcastLocked_r = toOutput_stepIn(modern_enqueueBroadcastLocked_r);
LineInstance timing_conditionTo_stepIn_MSG_broadcast_intent = timing_conditionTo_stepIn(MSG_broadcast_intent);
LineInstance timing_conditionTo_stepIn_processNextBroadcastLocked = timing_conditionTo_stepIn(processNextBroadcastLocked);
LineInstance toOutput_stepIn_enqueueBroadcastLocked_r = toOutput_stepIn(enqueueBroadcastLocked_r);
LineInstance timing_toCondition_stepIn_broadcastIntentWithFeature = timing_toCondition_stepIn(broadcastIntentWithFeature);
LineInstance timing_toCondition_stepIn_sendBroadcast = timing_toCondition_stepIn(sendBroadCast);
LineInstance timing_conditionTo_stepIn_scheduleReceiverList = timing_conditionTo_stepIn(scheduleReceiverList);
LineInstance timing_conditionTo_stepIn_Receiver = timing_conditionTo_stepIn(MSG_Receiver);
LineInstance timing_conditionTo_stepIn_onReceive = timing_conditionTo_stepIn(BroadcastReceiver_onReceive);
LineInstance inputTo_withinMethod_mgsQ = inputTo_withinMethod(messageQueue);
LineInstance inputTo_stepIn_mgsQ = inputTo_stepIn(messageQueue);
LineInstance timing_conditionTo_stepIn_loopOnce = timing_conditionTo_stepIn(loopOnce);
LineInstance timing_conditionTo_stepIn_Choreographer_postCallback = timing_conditionTo_stepIn(Choreographer_postCallback);
LineInstance timing_toCondition_stepIn_view_invalidate = timing_toCondition_stepIn(view_invalidate);
LineInstance inputTo_stepIn_dispatchInputEvent_event = inputTo_stepIn(dispatchInputEvent_event);
LineInstance inputTo_stepIn_mPendingInputEventHead = inputTo_stepIn(mPendingInputEventHead);
LineInstance inputTo_stepIn_motionEvent = inputTo_stepIn(onTouchEvent_event);
LineInstance timing_conditionTo_stepIn_onTouchEvent = timing_conditionTo_stepIn(onTouchEvent);
LineInstance timing_methodCallInsideOf_AsyncTask = timing_methodCallInsideOf(methodOf_AsyncTask);
LineInstance timing_conditionTo_stepIn_AMS_attachApplicationLocked = timing_conditionTo_stepIn(AMS_attachApplicationLocked);
LineInstance timing_toCondition_stepIn_activityThread_main = timing_toCondition_stepIn(activityThread_Main);
LineInstance timing_conditionTo_stepIn_atSup_realStart = timing_conditionTo_stepIn(ATSup_realStartActivityLocked);
LineInstance timing_toCondition_stepIn_ATSup_realStartActivityLocked = timing_toCondition_stepIn(ATSup_realStartActivityLocked);
LineInstance timing_conditionTo_stepIn_creatorOf_LaunchActivityItem = timing_conditionTo_stepIn(creatorOf_LaunchActivityItem);
LineInstance timing_toCondition_stepIn_AMS_finishAttachApplication = timing_toCondition_stepIn(AMS_finishAttachApplication);
LineInstance timing_toCondition_stepIn_ATMS_attachApplication = timing_toCondition_stepIn(ATMS_attachApplication);
LineInstance timing_conditionTo_stepIn_ACTION_MAIN = timing_conditionTo_stepIn(ACTION_MAIN);
LineInstance timing_conditionTo_stepIn_ANDROID_MANIFEST_FILENAME = timing_conditionTo_stepIn(ANDROID_MANIFEST_FILENAME);
LineInstance timing_conditionTo_stepIn_LaunchActivityItem_CREATOR = timing_conditionTo_stepIn(LaunchActivityItem_CREATOR);
LineInstance timing_path_search_startService_to_getService = timing_path_search(context_startService,AM_getService);
LineInstance timing_path_search_startService_to_startProcess = timing_path_search(AMS_startService,attemptZygoteSendArgsAndGetResult);
LineInstance timing_conditionTo_stepIn_MSG_CREATE_SERVICE = timing_conditionTo_stepIn(MSG_CREATE_SERVICE);
LineInstance timing_conditionTo_stepIn_service_onCreate = timing_conditionTo_stepIn(service_onCreate);
LineInstance timing_toCondition_stepIn_AMS_startService = timing_toCondition_stepIn(AMS_startService);
LineInstance timing_insideOf_class_ams = timing_insideOf_class(methodOf_ams,methodOf_ams);
LineInstance timing_conditionTo_stepIn_getLifePath = timing_conditionTo_stepIn(getLifecyclePath);
LineInstance inputTo_stepIn_ServiceConnection_service = inputTo_stepIn(called_ServiceConnection_service);
LineInstance timing_conditionTo_stepIn_attemptZygoteSendArgsAndGetResult = timing_conditionTo_stepIn(attemptZygoteSendArgsAndGetResult);
LineInstance timing_conditionTo_stepIn_isProcessRunning = timing_conditionTo_stepIn(ActivityRecord_isProcessRunning);
LineInstance timing_conditionTo_stepIn_ATMS_startProcess = timing_conditionTo_stepIn(ATMS_startProcess);
LineInstance timing_conditionTo_stepIn_startProcessLocked = timing_conditionTo_stepIn(processList_startProcessLocked);
LineInstance timing_conditionTo_stepIn_findStaticMain = timing_conditionTo_stepIn(runtimeInit_findStaticMain);
LineInstance timing_toCondition_stepIn_view_draw3 = timing_toCondition_stepIn(view_draw_3);
LineInstance timing_toCondition_stepIn_view_onTouch = timing_toCondition_stepIn(view_onTouch);
LineInstance timing_toCondition_stepIn_activity_startActivity = timing_toCondition_stepIn(activity_startActivity);
LineInstance timing_toCondition_stepIn_startProcessLocked = timing_toCondition_stepIn(processList_startProcessLocked);
LineInstance timing_path_search_startActivity_to_getService = timing_path_search(activity_startActivity,AM_getService);
LineInstance timing_path_search_startProcessLocked_ToFindStaticMain = timing_path_search(processList_startProcessLocked,runtimeInit_findStaticMain);
LineInstance timing_path_search_startProcess_toInvocation = timing_path_search(processList_startProcessLocked,method_of_reflectMethod);
LineInstance timing_insideOf_class_ZygoteProcess = timing_insideOf_class(methodOfZygoteProcess,methodUsedBy_ZygoteProcess);
LineInstance timing_insideOf_class_ActivityStarter2 = timing_insideOf_class(methodOf_ActivityStarter,methodUsedBy_ActivityStarter);
LineInstance timing_insideOf_class_ActivityStarter = timing_insideOf_class(methodOf_ActivityStarter,methodOf_ActivityStarter);
LineInstance timing_insideOf_class_atms = timing_insideOf_class(methodOf_atms,methodOf_atms);
LineInstance timing_insideOf_class_processList = timing_insideOf_class(methodOf_processList,methodOf_processList);
LineInstance timing_insideOf_activityThread_attach = timing_insideOf(activityThread_attach);
LineInstance timing_insideOf_class_activityThread = timing_insideOf_class(methodOf_activityThread,methodOf_activityThread);
LineInstance timing_insideOf_messageQueue_enqueueMessage = timing_insideOf(messageQueue_enqueueMessage);
LineInstance timing_insideClass_activityThread = timing_insideClass(methodOf_activityThread);
LineInstance timing_insideOf_activityStarter_executeRequest = timing_insideOf(activityStarter_executeRequest);
LineInstance timing_methodCallInsideOf_activityStarter_executeRequest = timing_methodCallInsideOf(activityStarter_executeRequest);
LineInstance timing_methodCallInsideOf_view_onTouch = timing_methodCallInsideOf(view_onTouch);
LineInstance timing_methodCallInsideOf_view_view = timing_methodCallInsideOf(view_view);
LineInstance timing_methodCallInsideOf_view_setFlags = timing_methodCallInsideOf(view_segFlags);
LineInstance timing_MethodUseField_setFlags_use_mViewFlags = timingMethodUseField(view_segFlags,view_mViewFlags);
LineInstance toOutput_stepIn_paramOf_atms_startActivity = toOutput_stepIn(paramOf_atms_startActivity);
LineInstance toOutput_stepIn_ams_attachApplication_startSeq = toOutput_stepIn(ams_attachApplication_startSeq);
LineInstance toOutput_withinMethod_activityThread_mStartSeq = toOutput_withinMethod(activityThread_mStartSeq);
LineInstance toOutput_stepIn_entryPoint = toOutput_stepIn(startProcessList_entryPoint);
LineInstance toOutput_stepOutAndIn_messageQueue_mMessage = toOutput_stepOutAndIn(messageQueue_mMessages);
LineInstance toOutput_withinMethod_fieldOf_windowManagerGlobal = toOutput_withinMethod(fieldOf_windowManagerGlobal);
LineInstance toOutput_withinMethod_paramOf_instrumentation = toOutput_withinMethod(paramOf_instrumentation);
LineInstance toOutput_withinMethod_fieldOf_instrumentation = toOutput_withinMethod(fieldOf_instrumentation);
LineInstance toOutput_withinMethod_paramOf_getLifecyclePath = toOutput_withinMethod(paramOf_getLifecyclePath);
LineInstance toOutput_withinMethod_view_mViewFlags = toOutput_withinMethod(view_mViewFlags);
LineInstance toOutput_withinMethod_view_setflag_flags = toOutput_withinMethod(view_setflags_flags);
LineInstance toOutput_withinMethod_view_view_context = toOutput_withinMethod(view_view_context);
LineInstance toOutput_stepIn_messageQueue_mMessages = toOutput_stepIn(messageQueue_mMessages);
LineInstance toOutput_setpIn_assetManager_framewordApkPath = toOutput_stepIn(assetManager_frameworkApkPath);
LineInstance toOutput_stepIn_view_draw_canvas = toOutput_stepIn(view_draw_canvas);
LineInstance toOutput_setpIn_phoneWindow_mTheme = toOutput_stepIn(phoneWindow_mTheme);
LineInstance toOutput_setpIn_activity_setTheme_resId = toOutput_stepIn(activity_setTheme_resId);
LineInstance toOutput_setpIn_contextThemeWrapper_mThemeResource = toOutput_stepIn(themeWrapper_themeResource);
LineInstance toOutput_setpIn_hanlder_post_r = toOutput_stepIn(handler_post_r);
LineInstance toOutput_stepInAndOut_handler_post_r = toOutput_stepInAndOut(handler_post_r);
LineInstance inputTo_stepIn_processRecord_info = inputTo_stepIn(processRecord_info);
LineInstance inputTo_stepIn_processList_pendingStarts = inputTo_stepIn(processList_pendingStarts);
LineInstance inputTo_stepIn_paramOf_attach = inputTo_stepIn(paramOf_activityThread_attach);
LineInstance inputTo_withinMethod_zygoteServer_zygoteSocket = inputTo_withinMethod(zygoteSerever_zygoteSocket);
LineInstance inputTo_withinMethod_zygoteConnection_mSocket = inputTo_withinMethod(zygoteConnection_mSocket);
LineInstance toReturn_withinMethod_layoutInflater_inflate_resource = toReturn_withinMethod(layoutInflater_inflate_resource);
LineInstance toReturn_stepInAndOut_layoutInflater_inflate_resource = toReturn_stepInAndOut(layoutInflater_inflate_resource);
LineInstance inputTo_withinMethod_activityStarter_executeRequest_return = inputTo_withinMethod(activityStarter_executeRequest_return);
LineInstance inputTo_withinMethod_fieldOf_instrumentation = inputTo_withinMethod(fieldOf_instrumentation);
LineInstance inputTo_withinMethod_fieldOf_activityThread = inputTo_withinMethod(fieldOf_activityThread);
LineInstance inputTo_stepIn_performLifecycleSequence_path = inputTo_stepIn(performLifecycleSequence_path_called);
LineInstance inputTo_stepIn_view_ondraw_canvas = inputTo_stepIn(view_ondraw_canvas_called);
LineInstance inputTo_stepIn_createBitmap_return = inputTo_stepIn(createBitmap_return);
LineInstance inputTo_stepIn_activity_mDecor = inputTo_stepIn(activity_mDecor);
LineInstance inputTo_stepIn_phoneWindow_mDecor = inputTo_stepIn(phoneWindow_mDecor);
LineInstance inputTo_stepIn_viewRootImpl_mSurface = inputTo_stepIn(viewRootImpl_mSurface);
LineInstance inputTo_stepIn_viewRootImpl_mView = inputTo_stepIn(viewRootImpl_mView);
LineInstance timing_conditionTo_stepIn_scheduleTransaction = timing_conditionTo_stepIn(ClientTransactionHandler_scheduleTransaction);
GraphInstance timing_byMsg_1 = timing_byMsg(postCallback,nativeScheduleVsync);
GraphInstance stepOutAndInAndCalled_messageQueue = stepOutAndInAndCalled(messageQueue_mMessages,ByIntersection);
