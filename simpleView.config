ClassScope SpecificKeys__________________________________________________________________________________________ = "android.view.View";
ClassScope resourceImpl_themeImpl = "android.content.res.ResourcesImpl.ThemeImpl";
ClassScope windowManagerImpl = "android.view.WindowManagerImpl";
ClassScope android_internal_phoneWindow = "com.android.internal.policy.PhoneWindow";
ClassScope android_view_view = "android.view.View";
ClassScope android_view_contextThemeWrapper = "android.view.ContextThemeWrapper";
ClassScope android_view_layoutInflater = "android.view.LayoutInflater";
ClassScope android_app_activity = "android.app.Activity";
ClassScope android_view_window = "android.view.Window";
ClassScope android_content_context = "android.content.Context";
ClassScope android_util_xml = "android.util.Xml";
ClassScope classContextImpl = "android.app.ContextImpl";
ClassScope subClass_______________________________________________________ = { SpecificKeys__________________________________________________________________________________________ };
ClassScope subclass_of_window = subOf ( android_view_window );
ClassScope subclass_of_context = subOf ( android_content_context );
ClassScope subclass_of_view = subOf ( android_view_view );
ClassScope superClass_______________________________________________________________ = { SpecificKeys__________________________________________________________________________________________ };
ClassScope super_of_view = superOf ( android_view_view );
ClassScope superOf_windowManager = superOf ( windowManagerImpl );
Node Method_____________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node view_ondraw = "android.view.View.onDraw::Canvas:" ("android.view.View");
Node view_segFlags = "android.view.View.setFlags::int,int:" ("android.view.View");
Node view_view = "android.view.View.View::Context,AttributeSet,int,int:" ("android.view.View");
Node view_onTouch = "android.view.View.onTouchEvent::MotionEvent:" ("android.view.View");
Node method_of_resourceImpl_themeImpl = MethodOf ( resourceImpl_themeImpl );
Node method_of_view = MethodOf ( android_view_view );
Node Field_________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node phoneWindow_mDecor = ["com.android.internal.policy.PhoneWindow.mDecor" ("com.android.internal.policy.PhoneWindow")];
Node activity_mDecor = ["android.app.Activity.mDecor" ("android.app.Activity")];
Node viewRootImpl_mView = ["android.view.ViewRootImpl.mView" ("android.view.ViewRootImpl")];
Node viewRootImpl_mSurface = ["android.view.ViewRootImpl.mSurface" ("android.view.ViewRootImpl")];
Node assetManager_frameworkApkPath = "android.content.res.AssetManager.FRAMEWORK_APK_PATH" ("android.content.res.AssetManager");
Node resourceImpl_themeImpl_mThemeResId = ["android.content.res.ResourcesImpl.ThemeImpl.mThemeResId" ("android.content.res.ResourcesImpl.ThemeImpl")];
Node themeWrapper_themeResource = ["android.view.ContextThemeWrapper.mThemeResource" ("android.view.ContextThemeWrapper")];
Node phoneWindow_mTheme = ["com.android.internal.policy.PhoneWindow.mTheme" ("com.android.internal.policy.PhoneWindow")];
Node layoutInflater_mFactory = ["android.view.LayoutInflater.mFactory2" ("android.view.LayoutInflater"),"android.view.LayoutInflater.mFactory" ("android.view.LayoutInflater"),"android.view.LayoutInflater.mPrivateFactory" ("android.view.LayoutInflater")];
Node view_mViewFlags = "android.view.View.mViewFlags" ("android.view.View");
Node Parameter____________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node view_ondraw_canvas = "android.view.View.onDraw::Canvas:canvas" ("android.view.View");
Node view_ondraw_canvas_called = CalledParamOf ( view_ondraw_canvas );
Node view_draw_canvas = "android.view.View.draw::Canvas:canvas" ("android.view.View");
Node phoneWindow_setTheme_resId = "com.android.internal.policy.PhoneWindow.setTheme::int:resid" ("com.android.internal.policy.PhoneWindow");
Node layoutInflater_inflate_resource = "android.view.LayoutInflater.inflate::int,ViewGroup,boolean:resource" ("android.view.LayoutInflater");
Node contextImpl_setTheme_resId = ["android.app.ContextImpl.setTheme::int:resId" ("android.app.ContextImpl")];
Node xml_asAttributeSet_parser = ["android.util.Xml.asAttributeSet::XmlPullParser:parser" ("android.util.Xml")];
Node view_view_context = "android.view.View.View::Context,AttributeSet,int,int:context" ("android.view.View");
Node activity_setTheme_resId = "android.app.Activity.setTheme::int:resid" ("android.app.Activity");
Node view_setflags_flags = "android.view.View.setFlags::int,int:flags" ("android.view.View");
Node Return___________________________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node createBitmap_return = ["android.graphics.Bitmap.createBitmap::DisplayMetrics,int,int,Bitmap.Config,boolean:return" ("android.graphics.Bitmap")];
Seg SEG_UNITS____________________________________________________________________ = Any->Any;
Seg unit_stepIn = CalledParameter->DataStep->Parameter;
Seg unit_stepOut = Return->DataStep->CalledReturn;
Seg unit_stepOver = CalledParameter->CalledMethod->CalledReturn;
Seg unit_overrideIn = CalledParameter->DataOverride->Parameter;
Seg unit_overrideOut = Return->DataOverride->CalledReturn;
Seg unit_refField = Reference->Field;
Seg unit_refMethod = Reference->CalledMethod->CalledReturn;
Seg unit_localRefMethod = Any->Reference->CalledMethod;
Seg unit_indexAny = Index->Any;
Seg unit_indexField = Index->Field;
Seg unit_indexParam = Index->Parameter;
Seg unit_indexCReturn = Index->CalledReturn;
Seg SEG_UNITS_COMB________________________________________________________________ = Any->Any;
Seg comb_generalAny = Any || Parameter;
Seg comb_step = [unit_stepIn] || [unit_stepOut] || [unit_stepOver];
Seg comb_stepInAndOut = [unit_stepIn] || [unit_stepOut];
Seg comb_stepInAndOver = [unit_stepIn] || [unit_stepOver];
Seg comb_ref = [unit_refField] || [unit_refMethod];
Seg comb_index = [unit_indexAny] || [unit_indexField] || [unit_indexParam] || [unit_indexCReturn];
Seg comb_noStep = [comb_generalAny] || [comb_ref] || [comb_index];
Seg comb_noStepover = [comb_generalAny] || [comb_ref] || [comb_index] || [comb_stepInAndOut];
Seg comb_noStepout = [comb_generalAny] || [comb_ref] || [comb_index] || [comb_stepInAndOver];
Seg comb_noStepInNorOut = [comb_generalAny] || [comb_ref] || [comb_index] || [unit_stepOver];
Seg comb_noStepInNorOver = [comb_generalAny] || [comb_ref] || [comb_index] || [unit_stepOut];
Seg comb_overrideIn = [comb_generalAny] || [comb_ref] || [comb_index] || [unit_overrideIn];
Seg comb_overrideOut = [comb_generalAny] || [comb_ref] || [comb_index] || [comb_step] || [unit_overrideOut];
Seg comb_all = [comb_generalAny] || [comb_ref] || [comb_index] || [comb_step];
Seg comb_method_input = Field || CalledReturn || Parameter;
Seg comb_method_output = Field || Return || CalledParameter || [unit_localRefMethod] || Condition;
Seg SEG_DATAFLOW_______________________________________________________________ = Any->Any;
Seg dataFlow_stepInAndOutOnce = [unit_stepIn]->[comb_noStepInNorOut]*->[unit_stepOut];
Seg dataFlow_stepInAndOutTwice = [unit_stepIn]->[comb_noStepInNorOut]*->[dataFlow_stepInAndOutOnce]*->[comb_noStepInNorOut]*->[unit_stepOut];
Seg dataFlow_stepInAndOutThreeTimes = [unit_stepIn]->[comb_noStepInNorOut]*->[dataFlow_stepInAndOutTwice]*->[comb_noStepInNorOut]*->[unit_stepOut];
Seg dataFlow_setInAndOutFourTimes = [unit_stepIn]->[comb_noStepInNorOut]*->[dataFlow_stepInAndOutThreeTimes]*->[comb_noStepInNorOut]*->[unit_stepOut];
Seg dataFlow_setInAndOutFiveTimes = [unit_stepIn]->[comb_noStepInNorOut]*->[dataFlow_setInAndOutFourTimes]*->[comb_noStepInNorOut]*->[unit_stepOut];
Seg dataFlow_setInAndOutSixTimes = [unit_stepIn]->[comb_noStepInNorOut]*->[dataFlow_setInAndOutFiveTimes]*->[comb_noStepInNorOut]*->[unit_stepOut];
Seg dataFlow_setInAndOutSevenTimes = [unit_stepIn]->[comb_noStepInNorOut]*->[dataFlow_setInAndOutSixTimes]*->[comb_noStepInNorOut]*->[unit_stepOut];
Seg dataFlow_setInAndOutEightTimes = [unit_stepIn]->[comb_noStepInNorOut]*->[dataFlow_setInAndOutSevenTimes]*->[comb_noStepInNorOut]*->[unit_stepOut];
Seg dataFlow_setInAndOutNineTimes = [unit_stepIn]->[comb_noStepInNorOut]*->[dataFlow_setInAndOutEightTimes]*->[comb_noStepInNorOut]*->[unit_stepOut];
Seg dataFlow_setInAndOutTenTimes = [unit_stepIn]->[comb_noStepInNorOut]*->[dataFlow_setInAndOutNineTimes]*->[comb_noStepInNorOut]*->[unit_stepOut];
Seg SEG_TIMINGFLOW____________________________________________________________________ = Any->Any;
Seg SEG_CONDITION_____________________________________________________________ = Any->Any;
Seg toCondition = [comb_noStep]*->Else?->Condition;
Seg SEG_LINE_DOWN_AND_UP______________________________________________________ = Any->Any;
Seg linedown_paramOneStepIn = DataStep->Parameter->[comb_noStepInNorOut]*->Return?->Field?->CalledParameter?;
Seg linedown_paramStepInAndOut = DataStep->Parameter->[comb_noStepInNorOut]*->[dataFlow_setInAndOutSevenTimes]*->[comb_noStepInNorOut]*->[unit_stepOut];
Seg linedown_CParamToCReturn = CalledMethod->CalledReturn;
Seg linedown_CparamCmethod = Any?->CalledMethod;
Seg linedown_calledKeyToAny = CalledMethod?->CalledReturn?->[comb_noStepInNorOut]*->Field?->Return?;
Seg linedown_overrideParam = DataOverride->Parameter->[comb_overrideIn]*->[comb_method_output];
Seg linedown_overrideReturn = DataOverride->CalledReturn->[comb_overrideOut]*->[comb_method_output];
Seg linedown_any = Any*->[comb_all]*;
Seg linedown_timing_calledM = Condition*->CalledMethod;
Seg lineup_overrideParam = [comb_method_input]->[comb_overrideIn]*->CalledParameter->DataOverride;
Seg lineup_overrideReturn = [comb_method_input]->[comb_overrideOut]*->Return->DataOverride;
Seg lineup_returnStepInAndOut = [unit_stepIn]->[comb_noStepInNorOut]*->[dataFlow_setInAndOutSevenTimes]*->[comb_noStepInNorOut]*->Return->DataStep;
Seg lineup_CReturnFromCParam = CalledParameter->CalledMethod;
Seg lineup_CParamOfCMethod = Field?->Parameter?->[comb_noStepInNorOut]*->CalledParameter;
Seg unit_paramUpWithStepNode = DataStep->Parameter;
Seg lineup_anyFromAny = Field?->[unit_paramUpWithStepNode]?->[comb_noStepInNorOut]*;
Seg lineup_conditionTo = [comb_method_input]*->[toCondition]+;
Seg lineup_refedBy = [comb_method_input]?->[comb_noStep]*->Reference;
Seg lineup_stepAndReturn = Return->DataStep;
Seg lineup_else = Condition->Else;
Line DATA_FLOW_________________________________________________________________________(P) = P->Any;
Line dataFlow_setpInAndOverFrom(P) = P->[comb_noStepout]*->[comb_method_output];
Line dataFlow_stepOverFrom(P) = P->[comb_noStepInNorOut]*->[comb_method_output];
Line dataFlow_from(P) = P->[comb_all]*->[comb_method_output];
Line dataFlow_stepInAndOverTo(F) = [comb_method_input]->[comb_all]*->F;
Line dataFlow_param_withinMethod_toReturn(P) = P->[comb_noStepInNorOut]*->Return;
Line dataFlow_stepOut(P) = P->[comb_noStepInNorOver]*->[comb_method_output];
Line dataFlow_fieldFrom = [comb_method_input]->[comb_noStep]*->layoutInflater_mFactory;
Line SCOPE_FLOW_____________________________________________________________________________(P) = P->Any;
Line scopeFlow_refField(F) = F->[comb_generalAny]*->Reference->CalledMethod;
Line TIMING_FLOW___________________________________________________________________________(P) = P->Any;
Line timingFlow_methodCallInsideOf(M1) = M1->Condition*->CalledMethod;
Line timingFlow_to(M) = Method->Condition*->CalledMethod->TimingStep->M;
Line timingMethodUseField(M,F) = M->F;
Line LOGIC_FLOW_____________________________________________________________________________(P) = P->Any;
Graph setFlag_use_mViewFlags = timingMethodUseField(view_segFlags,view_mViewFlags),dataFlow_stepOverFrom(view_mViewFlags)<[0,1],[1,[[0,0],[[0,0],[0,0,0]],[[0,0],[0,0],[0,0],[0,0]],[0,0,0]],[0,0,0,[0,0,0],0]]>;
LineInstance timingFlow_methodCallInsideOf_view_onTouch = timingFlow_methodCallInsideOf(view_onTouch);
LineInstance timingFlow_methodCallInsideOf_view_view = timingFlow_methodCallInsideOf(view_view);
LineInstance timingFlow_methodCallInsideOf_view_setFlags = timingFlow_methodCallInsideOf(view_segFlags);
LineInstance dataFlow_stepOverFrom_mViewFlags = dataFlow_stepOverFrom(view_mViewFlags);
LineInstance timingMethodUseField_setFlags_use_mViewFlags = timingMethodUseField(view_segFlags,view_mViewFlags);
LineInstance dataFlow_stepOverFrom_view_setflag_flags = dataFlow_stepOverFrom(view_setflags_flags);
LineInstance dataFlow_stepOverFrom_view_view_context = dataFlow_stepOverFrom(view_view_context);
LineInstance dataFlow_stepInAndOverTo_createBitmap_return = dataFlow_stepInAndOverTo(createBitmap_return);
LineInstance dataFlow_stepInAndOverTo_view_ondraw_canvas_called = dataFlow_stepInAndOverTo(view_ondraw_canvas_called);
LineInstance dataFlow_stepInAndOverTo_phoneWindow_mDecor = dataFlow_stepInAndOverTo(phoneWindow_mDecor);
LineInstance dataFlow_stepInAndOverTo_activity_mDecor = dataFlow_stepInAndOverTo(activity_mDecor);
LineInstance dataFlow_stepInAndOverTo_viewRootImpl_mView = dataFlow_stepInAndOverTo(viewRootImpl_mView);
LineInstance dataFlow_stepInAndOverTo_viewRootImpl_mSurface = dataFlow_stepInAndOverTo(viewRootImpl_mSurface);
LineInstance dataFlow_setpInAndOverFrom_draw_canvas = dataFlow_setpInAndOverFrom(view_ondraw_canvas);
LineInstance timingFlow_to_view_ondraw = timingFlow_to(view_ondraw);
LineInstance dataFlow_from_frameworkApkPath = dataFlow_from(assetManager_frameworkApkPath);
LineInstance dataFlow_setpInAndOverFrom_assetManager_framewordApkPath = dataFlow_setpInAndOverFrom(assetManager_frameworkApkPath);
LineInstance dataFlow_from_themeWrapper_themeResource = dataFlow_from(themeWrapper_themeResource);
LineInstance dataFlow_from_resourceImpl_themeImpl_mThemeResId = dataFlow_from(resourceImpl_themeImpl_mThemeResId);
LineInstance dataFlow_setpInAndOverFrom_resource_fromInflate = dataFlow_setpInAndOverFrom(layoutInflater_inflate_resource);
LineInstance dataFlow_setpInAndOverFrom_contextThemeWrapper_mThemeResource = dataFlow_setpInAndOverFrom(themeWrapper_themeResource);
LineInstance dataFlow_setpInAndOverFrom_phoneWindow_mTheme = dataFlow_setpInAndOverFrom(phoneWindow_mTheme);
LineInstance dataFlow_setpInAndOverFrom_activity_setTheme_resId = dataFlow_setpInAndOverFrom(activity_setTheme_resId);
LineInstance dataFlow_inflaterParamResource_withinMethod_toReturn = dataFlow_param_withinMethod_toReturn(layoutInflater_inflate_resource);
