ClassScope class_view = "android.view.View";
ClassScope class_usedBy_view = usedBy ( class_view );
ClassScope scopeOfParamToRuntime = { class_usedBy_view };
ClassScope scopeOfParamToAddressable = usedBy ( scopeOfParamToRuntime );
Node separatorParamTo___________________________________________________________ = "android.view.View.ALPHA" ("android.view.View");
Node param_of_constructor_view = "android.view.View.View::Context,AttributeSet,int,int:context" ("android.view.View");
Node var_param_to = { param_of_constructor_view };
Node field_for_param_to = FieldOf ( scopeOfParamToAddressable );
Node method_for_param_to = MethodOf ( scopeOfParamToAddressable );
Node construtor_for_param_to = CreatorOf ( scopeOfParamToAddressable );
Node method_and_construct_for_param_to = method_for_param_to | construtor_for_param_to;
Node called_method_for_param_to = CalledMethodOf ( method_and_construct_for_param_to );
Node referenced_for_param_to = field_for_param_to | called_method_for_param_to;
Node return_for_param_to = ReturnOf ( method_and_construct_for_param_to );
Node called_return_for_param_to = CalledReturnOf ( return_for_param_to );
Node param_for_param_to = ParameterOf ( method_and_construct_for_param_to );
Node called_param_for_param_to = CalledParamOf ( param_for_param_to );
Node dst_for_param_to = field_for_param_to | called_param_for_param_to;
Node separator_____________________________________________________________ = { separatorParamTo___________________________________________________________ };
Node creator_view = CreatorOf ( class_view );
Node method_view = MethodOf ( class_view );
Node called_method_view = CalledMethodOf ( method_view );
Node methodsUsedByView = MethodOf ( class_usedBy_view );
Node calledMethodsUsedByView = CalledMethodOf ( methodsUsedByView );
Node methodUsedByView = MethodOf ( class_usedBy_view );
Node methodOfTheClass = MethodOf ( class_view );
Node calledMethodOfView = CalledMethodOf ( method_view );
Node params_of_constructor_view = ParameterOf ( creator_view );
Node method_usedBy_view = MethodOf ( class_usedBy_view );
Node called_method_usedBy_view = CalledMethodOf ( method_usedBy_view );
Node parameterUsedByView = ParameterOf ( methodUsedByView );
Node paramOfView = ParameterOf ( method_view );
Node called_paramOfView = CalledParamOf ( paramOfView );
Node returnOfView = ReturnOf ( method_view );
Node calledReturnOfView = CalledReturnOf ( returnOfView );
Node returnUsedByView = ReturnOf ( methodUsedByView );
Node field_view_pflags = "android.view.View.mPrivateFlags" ("android.view.View");
Node field_view_flag_copy = { field_view_pflags };
Node method_dumpflag = "android.view.View.dumpFlag::HashMap,String,int:" ("android.view.View");
Node method_to_be_inspected = { method_dumpflag };
Node methods_view = creator_view | method_view;
Node field_used_by_view = FieldOf ( class_usedBy_view );
Node creator_usedBy_view = CreatorOf ( class_usedBy_view );
Node called_creator_usedBy_view = CalledMethodOf ( creator_usedBy_view );
Seg seg_called_param_to_called_return = called_param_for_param_to->called_method_for_param_to->called_return_for_param_to;
Seg seg_ref_for_param_to = Reference->referenced_for_param_to->called_return_for_param_to?;
Seg seg_data_step_param = called_param_for_param_to->DataStep;
Seg seg_data_step_return = return_for_param_to->DataStep;
Seg seg_data_step_and_ref = Any?->[seg_called_param_to_called_return]?->[seg_ref_for_param_to]?->[seg_data_step_param]?->[seg_data_step_return]?;
Seg seg_reference = Reference->Any;
Line dataFlow_parameter_to = var_param_to->[seg_data_step_and_ref]*->dst_for_param_to;
Line logice_flow_param_to = var_param_to->[seg_data_step_and_ref]*->Condition;
Line line_for_method_inspection_timing = method_to_be_inspected->Condition*->Any;
Line line_for_method_inspection_condition = method_to_be_inspected->Condition*;
Line line_for_method_inspection_data_flow(P) = [seg_reference]*->Any+->P;
Line timing_call_stack_of_view = method_view->Condition*->called_method_view->TimingStep->method_view;
Line timing_created_by_view = method_view->Condition*->called_creator_usedBy_view;
Line timing_call_method_used_by = method_view->Condition*->called_method_usedBy_view;
Line logic_controledBy_flag_view = field_view_flag_copy->Any*->Condition*->called_method_usedBy_view;
Graph method_inspection = line_for_method_inspection_timing,line_for_method_inspection_data_flow(field_used_by_view)<[0,0,1],[[0,0],0,1]>;
LineInstance line_for_method_inspection_data_flow_to_method = line_for_method_inspection_data_flow(called_method_usedBy_view);
LineInstance line_for_method_inspection_data_flow_to_field = line_for_method_inspection_data_flow(field_used_by_view);
