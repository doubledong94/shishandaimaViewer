ClassScope SpecificKeys__________________________________________________________________________________________ = "android.view.View";
ClassScope activityTaskManagerService = "com.android.server.wm.ActivityTaskManagerService";
ClassScope resourceImpl_themeImpl = "android.content.res.ResourcesImpl.ThemeImpl";
ClassScope windowManagerImpl = "android.view.WindowManagerImpl";
ClassScope android_internal_phoneWindow = "com.android.internal.policy.PhoneWindow";
ClassScope android_view_view = "android.view.View";
ClassScope android_view_contextThemeWrapper = "android.view.ContextThemeWrapper";
ClassScope android_view_layoutInflater = "android.view.LayoutInflater";
ClassScope android_app_activity = "android.app.Activity";
ClassScope android_view_window = "android.view.Window";
ClassScope android_content_context = "android.content.Context";
ClassScope android_util_xml = "android.util.Xml";
ClassScope classContextImpl = "android.app.ContextImpl";
ClassScope subClass_______________________________________________________ = { SpecificKeys__________________________________________________________________________________________ };
ClassScope show_sub_of = subOf ( activityTaskManagerService );
ClassScope subclass_of_window = subOf ( android_view_window );
ClassScope subclass_of_context = subOf ( android_content_context );
ClassScope subclass_of_view = subOf ( android_view_view );
ClassScope superClass_______________________________________________________________ = { SpecificKeys__________________________________________________________________________________________ };
ClassScope super_of_view = superOf ( android_view_view );
ClassScope superOf_windowManager = superOf ( windowManagerImpl );
Node Method_____________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node getLifecyclePath = ["android.app.servertransaction.TransactionExecutorHelper.getLifecyclePath::int,int,boolean:" ("android.app.servertransaction.TransactionExecutorHelper")];
Node ClientTransactionHandler_scheduleTransaction = ["android.app.ClientTransactionHandler.scheduleTransaction::ClientTransaction:" ("android.app.ClientTransactionHandler")];
Node activityStarter_executeRequest = ["com.android.server.wm.ActivityStarter.executeRequest::ActivityStarter.Request:" ("com.android.server.wm.ActivityStarter")];
Node activity_onStart = "android.app.Activity.onStart:::" ("android.app.Activity");
Node context_startActivity = "android.content.Context.startActivity::Intent:" ("android.content.Context");
Node subMethod_context_startAcctivity = subOf ( context_startActivity );
Node activity_startActivity = "android.app.Activity.startActivity::Intent:" ("android.app.Activity");
Node activityTaskManagerService_startActivity = "com.android.server.wm.ActivityTaskManagerService.startActivity::IApplicationThread,String,String,Intent,String,IBinder,String,int,int,ProfilerInfo,Bundle:" ("com.android.server.wm.ActivityTaskManagerService");
Node view_draw_1 = "android.view.View.draw::Canvas:" ("android.view.View");
Node view_draw_3 = "android.view.View.draw::Canvas,ViewGroup,long:" ("android.view.View");
Node view_ondraw = "android.view.View.onDraw::Canvas:" ("android.view.View");
Node view_segFlags = "android.view.View.setFlags::int,int:" ("android.view.View");
Node view_view = "android.view.View.View::Context,AttributeSet,int,int:" ("android.view.View");
Node view_onTouch = "android.view.View.onTouchEvent::MotionEvent:" ("android.view.View");
Node method_of_resourceImpl_themeImpl = MethodOf ( resourceImpl_themeImpl );
Node method_of_view = MethodOf ( android_view_view );
Node Field_________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node activityThread_H_executeTransation = ["android.app.ActivityThread.H.EXECUTE_TRANSACTION" ("android.app.ActivityThread.H")];
Node phoneWindow_mDecor = ["com.android.internal.policy.PhoneWindow.mDecor" ("com.android.internal.policy.PhoneWindow")];
Node activity_mDecor = ["android.app.Activity.mDecor" ("android.app.Activity")];
Node viewRootImpl_mView = ["android.view.ViewRootImpl.mView" ("android.view.ViewRootImpl")];
Node viewRootImpl_mSurface = ["android.view.ViewRootImpl.mSurface" ("android.view.ViewRootImpl")];
Node assetManager_frameworkApkPath = "android.content.res.AssetManager.FRAMEWORK_APK_PATH" ("android.content.res.AssetManager");
Node resourceImpl_themeImpl_mThemeResId = ["android.content.res.ResourcesImpl.ThemeImpl.mThemeResId" ("android.content.res.ResourcesImpl.ThemeImpl")];
Node themeWrapper_themeResource = ["android.view.ContextThemeWrapper.mThemeResource" ("android.view.ContextThemeWrapper")];
Node phoneWindow_mTheme = ["com.android.internal.policy.PhoneWindow.mTheme" ("com.android.internal.policy.PhoneWindow")];
Node layoutInflater_mFactory = ["android.view.LayoutInflater.mFactory2" ("android.view.LayoutInflater"),"android.view.LayoutInflater.mFactory" ("android.view.LayoutInflater"),"android.view.LayoutInflater.mPrivateFactory" ("android.view.LayoutInflater")];
Node view_mViewFlags = "android.view.View.mViewFlags" ("android.view.View");
Node Parameter____________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node paramOf_getLifecyclePath = ParameterOf ( getLifecyclePath );
Node performLifecycleSequence_path = ["android.app.servertransaction.TransactionExecutor.performLifecycleSequence::ActivityThread.ActivityClientRecord,IntArray,ClientTransaction:path" ("android.app.servertransaction.TransactionExecutor")];
Node performLifecycleSequence_path_called = CalledParamOf ( performLifecycleSequence_path );
Node activityStarter_executeRequest_request = ParameterOf ( activityStarter_executeRequest );
Node handler_post_r = "android.os.Handler.post::Runnable:r" ("android.os.Handler");
Node view_ondraw_canvas = "android.view.View.onDraw::Canvas:canvas" ("android.view.View");
Node view_ondraw_canvas_called = CalledParamOf ( view_ondraw_canvas );
Node view_draw_canvas = "android.view.View.draw::Canvas:canvas" ("android.view.View");
Node phoneWindow_setTheme_resId = "com.android.internal.policy.PhoneWindow.setTheme::int:resid" ("com.android.internal.policy.PhoneWindow");
Node layoutInflater_inflate_resource = "android.view.LayoutInflater.inflate::int,ViewGroup,boolean:resource" ("android.view.LayoutInflater");
Node contextImpl_setTheme_resId = ["android.app.ContextImpl.setTheme::int:resId" ("android.app.ContextImpl")];
Node xml_asAttributeSet_parser = ["android.util.Xml.asAttributeSet::XmlPullParser:parser" ("android.util.Xml")];
Node view_view_context = "android.view.View.View::Context,AttributeSet,int,int:context" ("android.view.View");
Node activity_setTheme_resId = "android.app.Activity.setTheme::int:resid" ("android.app.Activity");
Node view_setflags_flags = "android.view.View.setFlags::int,int:flags" ("android.view.View");
Node Return___________________________________________________________________________________________________ = "android.view.View.NO_ID" ("android.view.View");
Node createBitmap_return = ["android.graphics.Bitmap.createBitmap::DisplayMetrics,int,int,Bitmap.Config,boolean:return" ("android.graphics.Bitmap")];
Node activityStarter_executeRequest_return = ReturnOf ( activityStarter_executeRequest );
Seg UNITS________________________________________________________________________________________________________________________________ = Any->Any;
Seg unit_data_stepIn = CalledParameter->DataStep->Parameter;
Seg unit_data_overrideIn = CalledParameter->DataOverride->Parameter;
Seg unit_data_stepOut = Return->DataStep->CalledReturn;
Seg unit_data_overrideOut = Return->DataOverride->CalledReturn;
Seg unit_timing_stepIn = CalledMethod->TimingStep->Method->Condition*;
Seg unit_timing_overrideIn = CalledMethod->TimingOverride->Method->Condition*;
Seg unit_stepOver = CalledParameter?->CalledMethod->CalledReturn?;
Seg unit_CPCM = CalledParameter->CalledMethod;
Seg unit_CMCR = CalledMethod->CalledReturn;
Seg unit_refField = Reference->Field;
Seg unit_refMethod = Reference->CalledMethod->CalledReturn?;
Seg unit_revRefField = Field->Reference;
Seg unit_revRefMethod = CalledParameter?->CalledMethod->Reference;
Seg unit_indexLocal = Index->Any;
Seg unit_indexField = Index->Field;
Seg unit_indexParam = Index->Parameter;
Seg unit_indexCReturn = Index->CalledMethod->CalledReturn?;
Seg COMB_______________________________________________________________________________________________________________________ = Any->Any;
Seg comb_generalAny = Any || Parameter;
Seg comb_ref = [unit_refField] || [unit_refMethod] || [unit_revRefField] || [unit_revRefMethod];
Seg comb_index = [unit_indexLocal] || [unit_indexField] || [unit_indexParam] || [unit_indexCReturn];
Seg comb_stepOver = [comb_generalAny] || [comb_ref] || [comb_index] || [unit_stepOver];
Seg comb_stepInAndOver = [comb_generalAny] || [comb_ref] || [comb_index] || [unit_data_stepIn] || [unit_stepOver];
Seg comb_stepOutAndOver = [comb_generalAny] || [comb_ref] || [comb_index] || [unit_data_stepOut] || [unit_stepOver];
Seg comb_overrideIn = [comb_generalAny] || [comb_ref] || [comb_index] || [unit_data_overrideIn];
Seg comb_overrideOut = [comb_generalAny] || [comb_ref] || [comb_index] || [unit_data_overrideOut];
Seg comb_method_input = Final || Field || Parameter || [unit_CMCR];
Seg comb_method_output = Field || Return || [unit_CPCM] || Condition;
Seg SEG_______________________________________________________________________________________________________________________________________ = Any->Any;
Seg dataFlow_stepInAndOutOnce = [comb_stepOver]*->[unit_data_stepIn]->[comb_stepOver]*->[unit_data_stepOut]->[comb_stepOver]*;
Seg dataFlow_stepInAndOutTwice = [comb_stepOver]*->[unit_data_stepIn]->[dataFlow_stepInAndOutOnce]*->[unit_data_stepOut]->[comb_stepOver]*;
Seg dataFlow_stepInAndOutThreeTimes = [comb_stepOver]*->[unit_data_stepIn]->[dataFlow_stepInAndOutTwice]*->[unit_data_stepOut]->[comb_stepOver]*;
Seg dataFlow_setInAndOutFourTimes = [comb_stepOver]*->[unit_data_stepIn]->[dataFlow_stepInAndOutThreeTimes]*->[unit_data_stepOut]->[comb_stepOver]*;
Seg dataFlow_setInAndOutFiveTimes = [comb_stepOver]*->[unit_data_stepIn]->[dataFlow_setInAndOutFourTimes]*->[unit_data_stepOut]->[comb_stepOver]*;
Seg dataFlow_setInAndOutSixTimes = [comb_stepOver]*->[unit_data_stepIn]->[dataFlow_setInAndOutFiveTimes]*->[unit_data_stepOut]->[comb_stepOver]*;
Seg dataFlow_setInAndOutSevenTimes = [comb_stepOver]*->[unit_data_stepIn]->[dataFlow_setInAndOutSixTimes]*->[unit_data_stepOut]->[comb_stepOver]*;
Seg dataFlow_setInAndOutEightTimes = [comb_stepOver]*->[unit_data_stepIn]->[dataFlow_setInAndOutSevenTimes]*->[unit_data_stepOut]->[comb_stepOver]*;
Seg dataFlow_setInAndOutNineTimes = [comb_stepOver]*->[unit_data_stepIn]->[dataFlow_setInAndOutEightTimes]*->[unit_data_stepOut]->[comb_stepOver]*;
Seg dataFlow_setInAndOutTenTimes = [comb_stepOver]*->[unit_data_stepIn]->[dataFlow_setInAndOutNineTimes]*->[unit_data_stepOut]->[comb_stepOver]*;
Seg seg_toOutput_withinMethod = [comb_stepOver]*->[comb_method_output];
Seg seg_toOutput_stepIn = [comb_stepInAndOver]*->[comb_method_output];
Seg seg_toOutput_stepInAndOut = [dataFlow_setInAndOutFiveTimes]*->[comb_method_output];
Seg seg_toOutput_stepOut = [comb_stepOutAndOver]*->[comb_method_output];
Seg seg_toReturn_withinMethod = [comb_stepOver]*->Return;
Seg seg_toReturn_stepIn = [comb_stepInAndOver]*->Return;
Seg seg_toReturn_stepInAndOut = [dataFlow_setInAndOutFiveTimes]*->Return;
Seg seg_toReturn_stepOut = [comb_stepOutAndOver]*->Return;
Seg seg_toField_withinMethod = [comb_stepOver]*->Field;
Seg seg_toField_stepIn = [comb_stepInAndOver]*->Field;
Seg seg_toFIeld_stepInAndOut = [dataFlow_setInAndOutFiveTimes]*->Field;
Seg seg_toFIeld_stepOut = [comb_stepOutAndOver]*->Field;
Seg seg_toCalledParam_withinMethod = [comb_stepOver]*->CalledParameter;
Seg seg_toCalledParam_stepIn = [comb_stepInAndOver]*->CalledParameter;
Seg seg_toCalledParam_stepInAndOut = [dataFlow_setInAndOutFiveTimes]*->CalledParameter;
Seg seg_toCalledParam_stepOut = [comb_stepOutAndOver]*->CalledParameter;
Seg seg_toCondition_withinMethod = [comb_stepOver]*->Condition;
Seg seg_toCondition_stepIn = [comb_stepInAndOver]*->Condition;
Seg seg_toCondition_stepInAndOut = [dataFlow_setInAndOutFiveTimes]*->Condition;
Seg seg_toCondition_stepOut = [comb_stepOutAndOver]*->Condition;
Seg seg_toBeCalled_withinMethod = [comb_stepOver]*->[unit_refMethod];
Seg seg_toBeCalled_stepIn = [comb_stepInAndOver]*->[unit_refMethod];
Seg seg_toBeCalled_stepInAndOut = [dataFlow_setInAndOutFiveTimes]*->[unit_refMethod];
Seg seg_toBeCalled_stepOut = [comb_stepOutAndOver]*->[unit_refMethod];
Seg seg_inputTo_withinMethod = [comb_method_input]->[comb_stepOver]*;
Seg seg_inputTo_stepIn = [comb_method_input]->[comb_stepInAndOver]*;
Seg seg_inputTo_stepInAndOut = [comb_method_input]->[dataFlow_setInAndOutFiveTimes]*;
Seg seg_inputTo_stepOut = [comb_method_input]->[comb_stepOutAndOver]*;
Seg seg_paramTo_withinMethod = Parameter->[comb_stepOver]*;
Seg seg_paramTo_stepIn = Parameter->[comb_stepInAndOver]*;
Seg seg_paramTo_stepInAndOut = Parameter->[dataFlow_setInAndOutFiveTimes]*;
Seg seg_paramTo_stepOut = Parameter->[comb_stepOutAndOver]*;
Seg seg_fieldTo_withMethod = Field->[comb_stepOver]*;
Seg seg_fieldTo_stepIn = Field->[comb_stepInAndOver]*;
Seg seg_fieldTo_stepInAndOut = Field->[dataFlow_setInAndOutFiveTimes]*;
Seg seg_fieldTo_stepOut = Field->[comb_stepOutAndOver]*;
Seg seg_calledReturnTo_withinMethod = CalledReturn->[comb_stepOver]*;
Seg seg_calledReturnTo_stepIn = CalledReturn->[comb_stepInAndOver]*;
Seg seg_calledReturnTo_stepInAndOut = CalledReturn->[dataFlow_setInAndOutFiveTimes]*;
Seg seg_calledReturnTo_stepOut = CalledReturn->[comb_stepOutAndOver]*;
Seg toCondition = [comb_stepOver]*->Else?->Condition;
Seg LINE_DOWN_AND_UP_______________________________________________________________________________________________________________ = Any->Any;
Seg linedown_calledMethod_to_output = Reference?->CalledReturn?->[comb_stepOver]*->[comb_method_output]?;
Seg linedown_calledMethod_calledReturn = Any?->CalledReturn;
Seg lineDownOrUp_getCalledMethod = Any?->CalledMethod->Any?;
Seg linedown_overrideParam = DataOverride->Parameter->[comb_overrideIn]*->[comb_method_output];
Seg linedown_timingOverride = TimingOverride->Method->Condition*->[unit_timing_overrideIn]*->CalledMethod;
Seg linedown_timing_stepIn = TimingStep->Method->Condition*->[unit_timing_stepIn]?->[unit_timing_stepIn]?->[unit_timing_stepIn]?->[unit_timing_stepIn]?->CalledMethod;
Seg linedown_calledMethodToMethod = TimingStep->Method;
Seg linedown_refMethod = Any*->Reference->CalledMethod;
Seg lineup_calledMethod_from_input = [comb_method_input]->[comb_stepOver]*->CalledParameter;
Seg lineup_overrideParam = [comb_method_input]->[comb_overrideIn]*->CalledParameter->DataOverride;
Seg lineup_timing_override = CalledMethod->TimingOverride;
Seg lineup_timing_step = Method->Condition*->[unit_timing_stepIn]?->[unit_timing_stepIn]?->[unit_timing_stepIn]?->[unit_timing_stepIn]?->[unit_timing_stepIn]?;
Seg lineup_refedBy = [comb_method_input]?->[comb_stepOver]*->Reference;
Seg lineup_refedBy_noStepOver = [comb_method_input]->Any*->Reference;
Seg lineup_toLogic = [comb_method_input]->[comb_stepOver]*;
Seg lineup_CRCM = CalledMethod->Any?;
Line LINES______________________________________________________________________________________________________________________________(P) = P->Any;
Line toOutput_withinMethod(P) = P->[seg_toOutput_withinMethod];
Line toOutput_stepIn(P) = P->[seg_toOutput_stepIn];
Line toOutput_stepInAndOut(P) = P->[seg_toOutput_stepInAndOut];
Line toOutput_stepOut(P) = P->[seg_toOutput_stepOut];
Line toReturn_withinMethod(P) = P->[seg_toReturn_withinMethod];
Line toReturn_stepIn(P) = P->[seg_toReturn_stepIn];
Line toReturn_stepInAndOut(P) = P->[seg_toReturn_stepInAndOut];
Line toReturn_stepOut(P) = P->[seg_toReturn_stepOut];
Line toField_withinMethod(P) = P->[seg_toField_withinMethod];
Line toField_stepIn(P) = P->[seg_toField_stepIn];
Line toField_stepInAndOut(P) = P->[seg_toFIeld_stepInAndOut];
Line toField_stepOut(P) = P->[seg_toFIeld_stepOut];
Line toCalledParam_withinMethod(P) = P->[seg_toCalledParam_withinMethod];
Line toCalledParam_stepIn(P) = P->[seg_toCalledParam_stepIn];
Line toCalledParam_stepInAndOut(P) = P->[seg_toCalledParam_stepInAndOut];
Line toCalledParam_stepOut(P) = P->[seg_toCalledParam_stepOut];
Line toCondition_withinMethod(P) = P->[seg_toCondition_withinMethod];
Line toCondition_stepIn(P) = P->[seg_toCondition_stepIn];
Line toCondition_stepInAndOut(P) = P->[seg_toCondition_stepInAndOut];
Line toCondition_stepOut(P) = P->[seg_toCondition_stepOut];
Line toBeCalled_withinMethod(P) = P->[seg_toBeCalled_withinMethod];
Line toBeCalled_stepIn(P) = P->[seg_toBeCalled_stepIn];
Line toBeCalled_stepInAndOut(P) = P->[seg_toBeCalled_stepInAndOut];
Line toBeCalled_stepOut(P) = P->[seg_toBeCalled_stepOut];
Line inputTo_withinMethod(P) = [seg_inputTo_withinMethod]*->P;
Line inputTo_stepIn(P) = [seg_inputTo_stepIn]*->P;
Line inputTo_stepInAndOut(P) = [seg_inputTo_stepInAndOut]*->P;
Line inputTo_stepOut(P) = [seg_inputTo_stepOut]*->P;
Line paramTo_withinMethod(P) = [seg_paramTo_withinMethod]*->P;
Line paramTo_stepIn(P) = [seg_paramTo_stepIn]*->P;
Line paramTo_stepInAndOut(P) = [seg_paramTo_stepInAndOut]*->P;
Line paramTo_stepOut(P) = [seg_paramTo_stepOut]*->P;
Line fieldTo_withMethod(P) = [seg_fieldTo_withMethod]*->P;
Line fieldTo_stepIn(P) = [seg_fieldTo_stepIn]*->P;
Line fieldTo_stepInAndOut(P) = [seg_fieldTo_stepInAndOut]*->P;
Line fieldTo_stepOut(P) = [seg_fieldTo_stepOut]*->P;
Line calledReturnTo_withinMethod(P) = [seg_calledReturnTo_withinMethod]*->P;
Line calledReturnTo_stepIn(P) = [seg_calledReturnTo_stepIn]*->P;
Line calledReturnTo_stepInAndOut(P) = [seg_calledReturnTo_stepInAndOut]*->P;
Line calledReturnTo_stepOut(P) = [seg_calledReturnTo_stepOut]*->P;
Line TIMING___________________________________________________________________________________________________________________________(P) = P->Any;
Line timingFlow_methodCallInsideOf(M1) = M1->Condition*->CalledMethod;
Line timingFlow_insideClass(M1,M2) = M1->Condition*->CalledMethod->TimingStep->M2;
Line timing_toCondition_stepIn(M) = M->Condition*->[unit_timing_stepIn]?->[unit_timing_stepIn]?->[unit_timing_stepIn]?->[unit_timing_stepIn]?->[unit_timing_stepIn]?->CalledMethod;
Line timing_conditionTo_stepIn(M) = Method->Condition*->[unit_timing_stepIn]?->[unit_timing_stepIn]?->[unit_timing_stepIn]*->[unit_timing_stepIn]?->[unit_timing_stepIn]?->CalledMethod->TimingStep->M;
Line timingMethodUseField(M,F) = M->F;
Line timing_methodUse(P) = Method->Condition*->P;
Line timing_overrideIn(CalledM) = CalledM->TimingStep->Method;
Graph setFlag_use_mViewFlags = timingMethodUseField(view_segFlags,view_mViewFlags),toOutput_withinMethod(view_mViewFlags)<[0,1],[1,[[[0,0],[[0,0],[0,0,0]],[[0,0],[0,0],[0,0],[0,0,0]],[0,0,0]],[0,0,[0,0],0]]]>;
LineInstance timing_toCondition_stepIn_getLifecyclePath = timing_toCondition_stepIn(getLifecyclePath);
LineInstance toOutput_withinMethod_paramOf_getLifecyclePath = toOutput_withinMethod(paramOf_getLifecyclePath);
LineInstance inputTo_stepIn_performLifecycleSequence_path = inputTo_stepIn(performLifecycleSequence_path_called);
LineInstance timing_conditionTo_stepIn_scheduleTransaction = timing_conditionTo_stepIn(ClientTransactionHandler_scheduleTransaction);
LineInstance timing_methodUse_activityThread_H_executeTransaction = timing_methodUse(activityThread_H_executeTransation);
LineInstance timing_conditionTo_stepIn_activity_onStart = timing_conditionTo_stepIn(activity_onStart);
LineInstance inputTo_withinMethod_activityStarter_executeRequest_return = inputTo_withinMethod(activityStarter_executeRequest_return);
LineInstance timing_toCondition_stepIn_activityTaskManagerService_startActivity = timing_toCondition_stepIn(activityTaskManagerService_startActivity);
LineInstance toOutput_withinMethod_view_mViewFlags = toOutput_withinMethod(view_mViewFlags);
LineInstance toOutput_withinMethod_view_setflag_flags = toOutput_withinMethod(view_setflags_flags);
LineInstance toOutput_withinMethod_view_view_context = toOutput_withinMethod(view_view_context);
LineInstance toOutput_stepIn_draw_canvas = toOutput_stepIn(view_ondraw_canvas);
LineInstance toOutput_setpIn_hanlder_post_r = toOutput_stepIn(handler_post_r);
LineInstance toOutput_setpIn_assetManager_framewordApkPath = toOutput_stepIn(assetManager_frameworkApkPath);
LineInstance toOutput_setpIn_resource_fromInflate = toOutput_stepIn(layoutInflater_inflate_resource);
LineInstance toOutput_setpIn_phoneWindow_mTheme = toOutput_stepIn(phoneWindow_mTheme);
LineInstance toOutput_setpIn_activity_setTheme_resId = toOutput_stepIn(activity_setTheme_resId);
LineInstance toOutput_setpIn_contextThemeWrapper_mThemeResource = toOutput_stepIn(themeWrapper_themeResource);
LineInstance toReturn_withinMethod_layoutInflater_inflate_resource = toReturn_withinMethod(layoutInflater_inflate_resource);
LineInstance toReturn_stepInAndOut_layoutInflater_inflate_resource = toReturn_stepInAndOut(layoutInflater_inflate_resource);
LineInstance inputTo_stepIn_view_ondraw_canvas = inputTo_stepIn(view_ondraw_canvas_called);
LineInstance inputTo_stepIn_createBitmap_return = inputTo_stepIn(createBitmap_return);
LineInstance inputTo_stepIn_activity_mDecor = inputTo_stepIn(activity_mDecor);
LineInstance inputTo_stepIn_phoneWindow_mDecor = inputTo_stepIn(phoneWindow_mDecor);
LineInstance inputTo_stepIn_viewRootImpl_mSurface = inputTo_stepIn(viewRootImpl_mSurface);
LineInstance inputTo_stepIn_viewRootImpl_mView = inputTo_stepIn(viewRootImpl_mView);
LineInstance timing_toCondition_stepIn_view_draw3 = timing_toCondition_stepIn(view_draw_3);
LineInstance timing_toCondition_stepIn_view_onTouch = timing_toCondition_stepIn(view_onTouch);
LineInstance timing_toCondition_stepIn_activity_startActivity = timing_toCondition_stepIn(activity_startActivity);
LineInstance timingFlow_insideClass_view = timingFlow_insideClass(method_of_view,method_of_view);
LineInstance timingFlow_methodCallInsideOf_view_onTouch = timingFlow_methodCallInsideOf(view_onTouch);
LineInstance timingFlow_methodCallInsideOf_view_view = timingFlow_methodCallInsideOf(view_view);
LineInstance timingFlow_methodCallInsideOf_view_setFlags = timingFlow_methodCallInsideOf(view_segFlags);
LineInstance timingMethodUseField_setFlags_use_mViewFlags = timingMethodUseField(view_segFlags,view_mViewFlags);
