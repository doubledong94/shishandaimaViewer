
// Generated from JavaParser.g4 by ANTLR 4.13.1


#include "JavaParserVisitor.h"

#include "JavaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct JavaParserStaticData final {
  JavaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  JavaParserStaticData(const JavaParserStaticData&) = delete;
  JavaParserStaticData(JavaParserStaticData&&) = delete;
  JavaParserStaticData& operator=(const JavaParserStaticData&) = delete;
  JavaParserStaticData& operator=(JavaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag javaparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
JavaParserStaticData *javaparserParserStaticData = nullptr;

void javaparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (javaparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(javaparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<JavaParserStaticData>(
    std::vector<std::string>{
      "compilationUnit", "packageDeclaration", "importDeclaration", "typeDeclaration", 
      "modifier", "classOrInterfaceModifier", "variableModifier", "classDeclaration", 
      "typeParameters", "typeParameter", "typeBound", "enumDeclaration", 
      "enumConstants", "enumConstant", "enumBodyDeclarations", "interfaceDeclaration", 
      "classBody", "interfaceBody", "classBodyDeclaration", "memberDeclaration", 
      "methodDeclaration", "methodBody", "typeTypeOrVoid", "constructorDeclaration", 
      "fieldDeclaration", "interfaceBodyDeclaration", "interfaceMemberDeclaration", 
      "constDeclaration", "constantDeclarator", "interfaceMethodDeclaration", 
      "interfaceMethodModifier", "interfaceCommonBodyDeclaration", "variableDeclarators", 
      "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
      "arrayInitializer", "classOrInterfaceType", "typeArgument", "qualifiedNameList", 
      "formalParameters", "receiverParameter", "formalParameterList", "formalParameter", 
      "lastFormalParameter", "lambdaLVTIList", "lambdaLVTIParameter", "qualifiedName", 
      "literal", "integerLiteral", "floatLiteral", "altAnnotationQualifiedName", 
      "annotation", "elementValuePairs", "elementValuePair", "elementValue", 
      "elementValueArrayInitializer", "annotationTypeDeclaration", "annotationTypeBody", 
      "annotationTypeElementDeclaration", "annotationTypeElementRest", "annotationMethodOrConstantRest", 
      "annotationMethodRest", "annotationConstantRest", "defaultValue", 
      "moduleDeclaration", "moduleBody", "moduleDirective", "requiresModifier", 
      "recordDeclaration", "recordHeader", "recordComponentList", "recordComponent", 
      "recordBody", "block", "blockStatement", "localVariableDeclaration", 
      "identifier", "localTypeDeclaration", "statement", "catchClause", 
      "catchType", "finallyBlock", "resourceSpecification", "resources", 
      "resource", "switchBlockStatementGroup", "switchLabel", "forControl", 
      "forInit", "forCondition", "forUpdate", "enhancedForControl", "parExpression", 
      "expressionList", "methodCall", "expression", "pattern", "lambdaExpression", 
      "lambdaParameters", "lambdaBody", "primary", "switchExpression", "switchLabeledRule", 
      "guardedPattern", "switchRuleOutcome", "classType", "creator", "createdName", 
      "innerCreator", "arrayCreatorRest", "classCreatorRest", "explicitGenericInvocation", 
      "typeArgumentsOrDiamond", "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
      "typeList", "typeType", "primitiveType", "typeArguments", "superSuffix", 
      "explicitGenericInvocationSuffix", "arguments"
    },
    std::vector<std::string>{
      "", "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
      "'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
      "'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
      "'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", 
      "'instanceof'", "'int'", "'interface'", "'long'", "'native'", "'new'", 
      "'package'", "'private'", "'protected'", "'public'", "'return'", "'short'", 
      "'static'", "'strictfp'", "'super'", "'switch'", "'synchronized'", 
      "'this'", "'throw'", "'throws'", "'transient'", "'try'", "'void'", 
      "'volatile'", "'while'", "'module'", "'open'", "'requires'", "'exports'", 
      "'opens'", "'to'", "'uses'", "'provides'", "'with'", "'transitive'", 
      "'var'", "'yield'", "'record'", "'sealed'", "'permits'", "'non-sealed'", 
      "", "", "", "", "", "", "", "", "", "", "'null'", "'('", "')'", "'{'", 
      "'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", 
      "'~'", "'\\u003F'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", 
      "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", 
      "'^'", "'%'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
      "'%='", "'<<='", "'>>='", "'>>>='", "'->'", "'::'", "'@'", "'...'"
    },
    std::vector<std::string>{
      "", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
      "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
      "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", 
      "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", 
      "NATIVE", "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", 
      "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", 
      "THIS", "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
      "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", "OPENS", "TO", "USES", 
      "PROVIDES", "WITH", "TRANSITIVE", "VAR", "YIELD", "RECORD", "SEALED", 
      "PERMITS", "NON_SEALED", "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", 
      "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", 
      "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", "LPAREN", 
      "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
      "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
      "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", 
      "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", 
      "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
      "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
      "ARROW", "COLONCOLON", "AT", "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT", 
      "IDENTIFIER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,128,1750,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,1,0,3,0,248,8,0,1,0,1,0,5,0,252,8,0,10,0,12,0,255,9,0,1,0,1,0,5,
  	0,259,8,0,10,0,12,0,262,9,0,1,0,1,0,1,0,3,0,267,8,0,1,1,5,1,270,8,1,10,
  	1,12,1,273,9,1,1,1,1,1,1,1,1,1,1,2,1,2,3,2,281,8,2,1,2,1,2,1,2,3,2,286,
  	8,2,1,2,1,2,1,3,5,3,291,8,3,10,3,12,3,294,9,3,1,3,1,3,1,3,1,3,1,3,3,3,
  	301,8,3,1,4,1,4,1,4,1,4,1,4,3,4,308,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,5,3,5,320,8,5,1,6,1,6,3,6,324,8,6,1,7,1,7,1,7,3,7,329,8,7,1,7,
  	1,7,3,7,333,8,7,1,7,1,7,3,7,337,8,7,1,7,1,7,3,7,341,8,7,1,7,1,7,1,8,1,
  	8,1,8,1,8,5,8,349,8,8,10,8,12,8,352,9,8,1,8,1,8,1,9,5,9,357,8,9,10,9,
  	12,9,360,9,9,1,9,1,9,1,9,5,9,365,8,9,10,9,12,9,368,9,9,1,9,3,9,371,8,
  	9,1,10,1,10,1,10,5,10,376,8,10,10,10,12,10,379,9,10,1,11,1,11,1,11,1,
  	11,3,11,385,8,11,1,11,1,11,3,11,389,8,11,1,11,3,11,392,8,11,1,11,3,11,
  	395,8,11,1,11,1,11,1,12,1,12,1,12,5,12,402,8,12,10,12,12,12,405,9,12,
  	1,13,5,13,408,8,13,10,13,12,13,411,9,13,1,13,1,13,3,13,415,8,13,1,13,
  	3,13,418,8,13,1,14,1,14,5,14,422,8,14,10,14,12,14,425,9,14,1,15,1,15,
  	1,15,3,15,430,8,15,1,15,1,15,3,15,434,8,15,1,15,1,15,3,15,438,8,15,1,
  	15,1,15,1,16,1,16,5,16,444,8,16,10,16,12,16,447,9,16,1,16,1,16,1,17,1,
  	17,5,17,453,8,17,10,17,12,17,456,9,17,1,17,1,17,1,18,1,18,3,18,462,8,
  	18,1,18,1,18,5,18,466,8,18,10,18,12,18,469,9,18,1,18,3,18,472,8,18,1,
  	19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,482,8,19,1,20,3,20,485,8,20,
  	1,20,1,20,1,20,1,20,1,20,5,20,492,8,20,10,20,12,20,495,9,20,1,20,1,20,
  	3,20,499,8,20,1,20,1,20,1,21,1,21,3,21,505,8,21,1,22,1,22,3,22,509,8,
  	22,1,23,3,23,512,8,23,1,23,1,23,1,23,1,23,3,23,518,8,23,1,23,1,23,1,24,
  	1,24,1,24,1,24,1,25,5,25,527,8,25,10,25,12,25,530,9,25,1,25,1,25,3,25,
  	534,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,543,8,26,1,27,1,27,1,
  	27,1,27,5,27,549,8,27,10,27,12,27,552,9,27,1,27,1,27,1,28,1,28,1,28,5,
  	28,559,8,28,10,28,12,28,562,9,28,1,28,1,28,1,28,1,29,5,29,568,8,29,10,
  	29,12,29,571,9,29,1,29,3,29,574,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,
  	30,1,30,3,30,584,8,30,1,31,5,31,587,8,31,10,31,12,31,590,9,31,1,31,1,
  	31,1,31,1,31,1,31,5,31,597,8,31,10,31,12,31,600,9,31,1,31,1,31,3,31,604,
  	8,31,1,31,1,31,1,32,1,32,1,32,5,32,611,8,32,10,32,12,32,614,9,32,1,33,
  	1,33,1,33,3,33,619,8,33,1,34,1,34,1,34,5,34,624,8,34,10,34,12,34,627,
  	9,34,1,35,1,35,3,35,631,8,35,1,36,1,36,1,36,1,36,5,36,637,8,36,10,36,
  	12,36,640,9,36,1,36,3,36,643,8,36,3,36,645,8,36,1,36,1,36,1,37,1,37,3,
  	37,651,8,37,1,37,1,37,1,37,3,37,656,8,37,5,37,658,8,37,10,37,12,37,661,
  	9,37,1,38,1,38,5,38,665,8,38,10,38,12,38,668,9,38,1,38,1,38,1,38,3,38,
  	673,8,38,3,38,675,8,38,1,39,1,39,1,39,5,39,680,8,39,10,39,12,39,683,9,
  	39,1,40,1,40,3,40,687,8,40,1,40,1,40,1,40,3,40,692,8,40,1,40,3,40,695,
  	8,40,3,40,697,8,40,1,40,1,40,1,41,1,41,1,41,1,41,5,41,705,8,41,10,41,
  	12,41,708,9,41,1,41,1,41,1,42,1,42,1,42,5,42,715,8,42,10,42,12,42,718,
  	9,42,1,42,1,42,3,42,722,8,42,1,42,3,42,725,8,42,1,43,5,43,728,8,43,10,
  	43,12,43,731,9,43,1,43,1,43,1,43,1,44,5,44,737,8,44,10,44,12,44,740,9,
  	44,1,44,1,44,5,44,744,8,44,10,44,12,44,747,9,44,1,44,1,44,1,44,1,45,1,
  	45,1,45,5,45,755,8,45,10,45,12,45,758,9,45,1,46,5,46,761,8,46,10,46,12,
  	46,764,9,46,1,46,1,46,1,46,1,47,1,47,1,47,5,47,772,8,47,10,47,12,47,775,
  	9,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,784,8,48,1,49,1,49,1,50,
  	1,50,1,51,1,51,1,51,5,51,793,8,51,10,51,12,51,796,9,51,1,51,1,51,1,51,
  	1,52,1,52,1,52,3,52,804,8,52,1,52,1,52,1,52,3,52,809,8,52,1,52,3,52,812,
  	8,52,1,53,1,53,1,53,5,53,817,8,53,10,53,12,53,820,9,53,1,54,1,54,1,54,
  	1,54,1,55,1,55,1,55,3,55,829,8,55,1,56,1,56,1,56,1,56,5,56,835,8,56,10,
  	56,12,56,838,9,56,3,56,840,8,56,1,56,3,56,843,8,56,1,56,1,56,1,57,1,57,
  	1,57,1,57,1,57,1,58,1,58,5,58,854,8,58,10,58,12,58,857,9,58,1,58,1,58,
  	1,59,5,59,862,8,59,10,59,12,59,865,9,59,1,59,1,59,3,59,869,8,59,1,60,
  	1,60,1,60,1,60,1,60,1,60,3,60,877,8,60,1,60,1,60,3,60,881,8,60,1,60,1,
  	60,3,60,885,8,60,1,60,1,60,3,60,889,8,60,1,60,1,60,3,60,893,8,60,3,60,
  	895,8,60,1,61,1,61,3,61,899,8,61,1,62,1,62,1,62,1,62,3,62,905,8,62,1,
  	63,1,63,1,64,1,64,1,64,1,65,3,65,913,8,65,1,65,1,65,1,65,1,65,1,66,1,
  	66,5,66,921,8,66,10,66,12,66,924,9,66,1,66,1,66,1,67,1,67,5,67,930,8,
  	67,10,67,12,67,933,9,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,942,8,
  	67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,950,8,67,1,67,1,67,1,67,1,67,1,
  	67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,964,8,67,1,68,1,68,1,69,1,
  	69,1,69,3,69,971,8,69,1,69,1,69,1,69,3,69,976,8,69,1,69,1,69,1,70,1,70,
  	3,70,982,8,70,1,70,1,70,1,71,1,71,1,71,5,71,989,8,71,10,71,12,71,992,
  	9,71,1,72,1,72,1,72,1,73,1,73,5,73,999,8,73,10,73,12,73,1002,9,73,1,73,
  	1,73,1,74,1,74,5,74,1008,8,74,10,74,12,74,1011,9,74,1,74,1,74,1,75,1,
  	75,1,75,1,75,1,75,3,75,1020,8,75,1,76,5,76,1023,8,76,10,76,12,76,1026,
  	9,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1036,8,76,1,77,1,77,
  	1,78,5,78,1041,8,78,10,78,12,78,1044,9,78,1,78,1,78,1,78,3,78,1049,8,
  	78,1,78,3,78,1052,8,78,1,79,1,79,1,79,1,79,1,79,3,79,1059,8,79,1,79,1,
  	79,1,79,1,79,1,79,1,79,1,79,3,79,1068,8,79,1,79,1,79,1,79,1,79,1,79,1,
  	79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,
  	79,5,79,1090,8,79,10,79,12,79,1093,9,79,1,79,5,79,1096,8,79,10,79,12,
  	79,1099,9,79,1,79,1,79,1,79,1,79,1,79,4,79,1106,8,79,11,79,12,79,1107,
  	1,79,3,79,1111,8,79,1,79,3,79,1114,8,79,1,79,1,79,1,79,1,79,5,79,1120,
  	8,79,10,79,12,79,1123,9,79,1,79,3,79,1126,8,79,1,79,1,79,1,79,1,79,1,
  	79,1,79,3,79,1134,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1143,8,
  	79,1,79,1,79,1,79,3,79,1148,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,
  	79,1,79,1,79,1,79,3,79,1161,8,79,1,79,1,79,1,79,1,79,3,79,1167,8,79,1,
  	80,1,80,1,80,5,80,1172,8,80,10,80,12,80,1175,9,80,1,80,1,80,1,80,1,80,
  	1,80,1,81,1,81,1,81,5,81,1185,8,81,10,81,12,81,1188,9,81,1,82,1,82,1,
  	82,1,83,1,83,1,83,3,83,1196,8,83,1,83,1,83,1,84,1,84,1,84,5,84,1203,8,
  	84,10,84,12,84,1206,9,84,1,85,5,85,1209,8,85,10,85,12,85,1212,9,85,1,
  	85,1,85,1,85,1,85,1,85,3,85,1219,8,85,1,85,1,85,1,85,1,85,3,85,1225,8,
  	85,1,86,4,86,1228,8,86,11,86,12,86,1229,1,86,4,86,1233,8,86,11,86,12,
  	86,1234,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1243,8,87,1,88,1,88,3,88,1247,
  	8,88,1,88,1,88,3,88,1251,8,88,1,88,1,88,3,88,1255,8,88,3,88,1257,8,88,
  	1,89,1,89,3,89,1261,8,89,1,90,1,90,1,91,1,91,1,92,5,92,1268,8,92,10,92,
  	12,92,1271,9,92,1,92,1,92,3,92,1275,8,92,1,92,1,92,1,92,1,92,1,93,1,93,
  	1,93,1,93,1,94,1,94,1,94,5,94,1288,8,94,10,94,12,94,1291,9,94,1,95,1,
  	95,1,95,3,95,1296,8,95,1,95,1,95,1,95,1,95,1,95,3,95,1303,8,95,1,95,1,
  	95,1,95,1,95,3,95,1309,8,95,1,95,3,95,1312,8,95,1,96,1,96,1,96,1,96,1,
  	96,3,96,1319,8,96,1,96,1,96,1,96,5,96,1324,8,96,10,96,12,96,1327,9,96,
  	1,96,1,96,1,96,5,96,1332,8,96,10,96,12,96,1335,9,96,1,96,1,96,1,96,1,
  	96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1351,8,96,1,
  	96,1,96,3,96,1355,8,96,1,96,1,96,1,96,3,96,1360,8,96,1,96,1,96,3,96,1364,
  	8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
  	1,96,3,96,1380,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
  	1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
  	1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
  	3,96,1420,8,96,1,96,1,96,1,96,1,96,3,96,1426,8,96,1,96,1,96,1,96,1,96,
  	1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1439,8,96,1,96,1,96,1,96,3,96,
  	1444,8,96,1,96,5,96,1447,8,96,10,96,12,96,1450,9,96,1,97,5,97,1453,8,
  	97,10,97,12,97,1456,9,97,1,97,1,97,5,97,1460,8,97,10,97,12,97,1463,9,
  	97,1,97,1,97,1,98,1,98,1,98,1,98,1,99,1,99,1,99,3,99,1474,8,99,1,99,1,
  	99,1,99,1,99,1,99,5,99,1481,8,99,10,99,12,99,1484,9,99,1,99,1,99,1,99,
  	1,99,3,99,1490,8,99,1,99,3,99,1493,8,99,1,100,1,100,3,100,1497,8,100,
  	1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
  	1,101,1,101,1,101,1,101,3,101,1515,8,101,3,101,1517,8,101,1,102,1,102,
  	1,102,1,102,5,102,1523,8,102,10,102,12,102,1526,9,102,1,102,1,102,1,103,
  	1,103,1,103,1,103,3,103,1534,8,103,1,103,1,103,1,103,1,103,1,103,3,103,
  	1541,8,103,1,104,1,104,1,104,1,104,1,104,1,104,5,104,1549,8,104,10,104,
  	12,104,1552,9,104,1,104,1,104,5,104,1556,8,104,10,104,12,104,1559,9,104,
  	1,104,1,104,1,104,5,104,1564,8,104,10,104,12,104,1567,9,104,3,104,1569,
  	8,104,1,104,1,104,1,104,5,104,1574,8,104,10,104,12,104,1577,9,104,1,105,
  	1,105,5,105,1581,8,105,10,105,12,105,1584,9,105,3,105,1586,8,105,1,106,
  	1,106,1,106,3,106,1591,8,106,1,106,5,106,1594,8,106,10,106,12,106,1597,
  	9,106,1,106,1,106,3,106,1601,8,106,1,107,1,107,1,107,3,107,1606,8,107,
  	1,108,1,108,3,108,1610,8,108,1,108,1,108,1,108,3,108,1615,8,108,5,108,
  	1617,8,108,10,108,12,108,1620,9,108,1,108,3,108,1623,8,108,1,109,1,109,
  	3,109,1627,8,109,1,109,1,109,1,110,1,110,1,110,1,110,5,110,1635,8,110,
  	10,110,12,110,1638,9,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,5,
  	110,1647,8,110,10,110,12,110,1650,9,110,1,110,1,110,5,110,1654,8,110,
  	10,110,12,110,1657,9,110,3,110,1659,8,110,1,111,1,111,3,111,1663,8,111,
  	1,112,1,112,1,112,1,113,1,113,1,113,3,113,1671,8,113,1,114,1,114,1,114,
  	3,114,1676,8,114,1,115,1,115,1,115,1,115,1,116,1,116,1,116,5,116,1685,
  	8,116,10,116,12,116,1688,9,116,1,117,5,117,1691,8,117,10,117,12,117,1694,
  	9,117,1,117,1,117,3,117,1698,8,117,1,117,5,117,1701,8,117,10,117,12,117,
  	1704,9,117,1,117,1,117,5,117,1708,8,117,10,117,12,117,1711,9,117,1,118,
  	1,118,1,119,1,119,1,119,1,119,5,119,1719,8,119,10,119,12,119,1722,9,119,
  	1,119,1,119,1,120,1,120,1,120,3,120,1729,8,120,1,120,1,120,3,120,1733,
  	8,120,3,120,1735,8,120,1,121,1,121,1,121,1,121,1,121,3,121,1742,8,121,
  	1,122,1,122,3,122,1746,8,122,1,122,1,122,1,122,0,2,192,208,123,0,2,4,
  	6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
  	54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
  	100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
  	136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
  	172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
  	208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
  	244,0,14,2,0,17,17,40,40,1,0,67,70,1,0,71,72,2,0,38,38,60,60,2,0,51,65,
  	128,128,1,0,100,101,1,0,102,103,1,0,90,91,2,0,104,105,109,109,2,0,88,
  	89,95,96,2,0,94,94,97,97,2,0,87,87,110,120,2,0,93,93,121,121,8,0,3,3,
  	5,5,8,8,14,14,20,20,27,27,29,29,37,37,1950,0,266,1,0,0,0,2,271,1,0,0,
  	0,4,278,1,0,0,0,6,292,1,0,0,0,8,307,1,0,0,0,10,319,1,0,0,0,12,323,1,0,
  	0,0,14,325,1,0,0,0,16,344,1,0,0,0,18,358,1,0,0,0,20,372,1,0,0,0,22,380,
  	1,0,0,0,24,398,1,0,0,0,26,409,1,0,0,0,28,419,1,0,0,0,30,426,1,0,0,0,32,
  	441,1,0,0,0,34,450,1,0,0,0,36,471,1,0,0,0,38,481,1,0,0,0,40,484,1,0,0,
  	0,42,504,1,0,0,0,44,508,1,0,0,0,46,511,1,0,0,0,48,521,1,0,0,0,50,533,
  	1,0,0,0,52,542,1,0,0,0,54,544,1,0,0,0,56,555,1,0,0,0,58,569,1,0,0,0,60,
  	583,1,0,0,0,62,588,1,0,0,0,64,607,1,0,0,0,66,615,1,0,0,0,68,620,1,0,0,
  	0,70,630,1,0,0,0,72,632,1,0,0,0,74,648,1,0,0,0,76,674,1,0,0,0,78,676,
  	1,0,0,0,80,684,1,0,0,0,82,700,1,0,0,0,84,724,1,0,0,0,86,729,1,0,0,0,88,
  	738,1,0,0,0,90,751,1,0,0,0,92,762,1,0,0,0,94,768,1,0,0,0,96,783,1,0,0,
  	0,98,785,1,0,0,0,100,787,1,0,0,0,102,794,1,0,0,0,104,803,1,0,0,0,106,
  	813,1,0,0,0,108,821,1,0,0,0,110,828,1,0,0,0,112,830,1,0,0,0,114,846,1,
  	0,0,0,116,851,1,0,0,0,118,868,1,0,0,0,120,894,1,0,0,0,122,898,1,0,0,0,
  	124,900,1,0,0,0,126,906,1,0,0,0,128,908,1,0,0,0,130,912,1,0,0,0,132,918,
  	1,0,0,0,134,963,1,0,0,0,136,965,1,0,0,0,138,967,1,0,0,0,140,979,1,0,0,
  	0,142,985,1,0,0,0,144,993,1,0,0,0,146,996,1,0,0,0,148,1005,1,0,0,0,150,
  	1019,1,0,0,0,152,1024,1,0,0,0,154,1037,1,0,0,0,156,1051,1,0,0,0,158,1166,
  	1,0,0,0,160,1168,1,0,0,0,162,1181,1,0,0,0,164,1189,1,0,0,0,166,1192,1,
  	0,0,0,168,1199,1,0,0,0,170,1224,1,0,0,0,172,1227,1,0,0,0,174,1242,1,0,
  	0,0,176,1256,1,0,0,0,178,1260,1,0,0,0,180,1262,1,0,0,0,182,1264,1,0,0,
  	0,184,1269,1,0,0,0,186,1280,1,0,0,0,188,1284,1,0,0,0,190,1311,1,0,0,0,
  	192,1363,1,0,0,0,194,1454,1,0,0,0,196,1466,1,0,0,0,198,1492,1,0,0,0,200,
  	1496,1,0,0,0,202,1516,1,0,0,0,204,1518,1,0,0,0,206,1540,1,0,0,0,208,1568,
  	1,0,0,0,210,1585,1,0,0,0,212,1590,1,0,0,0,214,1602,1,0,0,0,216,1622,1,
  	0,0,0,218,1624,1,0,0,0,220,1630,1,0,0,0,222,1660,1,0,0,0,224,1664,1,0,
  	0,0,226,1670,1,0,0,0,228,1675,1,0,0,0,230,1677,1,0,0,0,232,1681,1,0,0,
  	0,234,1692,1,0,0,0,236,1712,1,0,0,0,238,1714,1,0,0,0,240,1734,1,0,0,0,
  	242,1741,1,0,0,0,244,1743,1,0,0,0,246,248,3,2,1,0,247,246,1,0,0,0,247,
  	248,1,0,0,0,248,253,1,0,0,0,249,252,3,4,2,0,250,252,5,84,0,0,251,249,
  	1,0,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,
  	0,254,260,1,0,0,0,255,253,1,0,0,0,256,259,3,6,3,0,257,259,5,84,0,0,258,
  	256,1,0,0,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,
  	0,0,0,261,267,1,0,0,0,262,260,1,0,0,0,263,264,3,130,65,0,264,265,5,0,
  	0,1,265,267,1,0,0,0,266,247,1,0,0,0,266,263,1,0,0,0,267,1,1,0,0,0,268,
  	270,3,104,52,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,
  	1,0,0,0,272,274,1,0,0,0,273,271,1,0,0,0,274,275,5,32,0,0,275,276,3,94,
  	47,0,276,277,5,84,0,0,277,3,1,0,0,0,278,280,5,25,0,0,279,281,5,38,0,0,
  	280,279,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,285,3,94,47,0,283,
  	284,5,86,0,0,284,286,5,104,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,287,
  	1,0,0,0,287,288,5,84,0,0,288,5,1,0,0,0,289,291,3,10,5,0,290,289,1,0,0,
  	0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,300,1,0,0,0,294,
  	292,1,0,0,0,295,301,3,14,7,0,296,301,3,22,11,0,297,301,3,30,15,0,298,
  	301,3,114,57,0,299,301,3,138,69,0,300,295,1,0,0,0,300,296,1,0,0,0,300,
  	297,1,0,0,0,300,298,1,0,0,0,300,299,1,0,0,0,301,7,1,0,0,0,302,308,3,10,
  	5,0,303,308,5,30,0,0,304,308,5,42,0,0,305,308,5,46,0,0,306,308,5,49,0,
  	0,307,302,1,0,0,0,307,303,1,0,0,0,307,304,1,0,0,0,307,305,1,0,0,0,307,
  	306,1,0,0,0,308,9,1,0,0,0,309,320,3,104,52,0,310,320,5,35,0,0,311,320,
  	5,34,0,0,312,320,5,33,0,0,313,320,5,38,0,0,314,320,5,1,0,0,315,320,5,
  	18,0,0,316,320,5,39,0,0,317,320,5,64,0,0,318,320,5,66,0,0,319,309,1,0,
  	0,0,319,310,1,0,0,0,319,311,1,0,0,0,319,312,1,0,0,0,319,313,1,0,0,0,319,
  	314,1,0,0,0,319,315,1,0,0,0,319,316,1,0,0,0,319,317,1,0,0,0,319,318,1,
  	0,0,0,320,11,1,0,0,0,321,324,5,18,0,0,322,324,3,104,52,0,323,321,1,0,
  	0,0,323,322,1,0,0,0,324,13,1,0,0,0,325,326,5,9,0,0,326,328,3,154,77,0,
  	327,329,3,16,8,0,328,327,1,0,0,0,328,329,1,0,0,0,329,332,1,0,0,0,330,
  	331,5,17,0,0,331,333,3,234,117,0,332,330,1,0,0,0,332,333,1,0,0,0,333,
  	336,1,0,0,0,334,335,5,24,0,0,335,337,3,232,116,0,336,334,1,0,0,0,336,
  	337,1,0,0,0,337,340,1,0,0,0,338,339,5,65,0,0,339,341,3,232,116,0,340,
  	338,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,343,3,32,16,0,343,15,
  	1,0,0,0,344,345,5,89,0,0,345,350,3,18,9,0,346,347,5,85,0,0,347,349,3,
  	18,9,0,348,346,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,
  	0,351,353,1,0,0,0,352,350,1,0,0,0,353,354,5,88,0,0,354,17,1,0,0,0,355,
  	357,3,104,52,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,
  	1,0,0,0,359,361,1,0,0,0,360,358,1,0,0,0,361,370,3,154,77,0,362,366,5,
  	17,0,0,363,365,3,104,52,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,
  	0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,371,3,20,10,0,
  	370,362,1,0,0,0,370,371,1,0,0,0,371,19,1,0,0,0,372,377,3,234,117,0,373,
  	374,5,106,0,0,374,376,3,234,117,0,375,373,1,0,0,0,376,379,1,0,0,0,377,
  	375,1,0,0,0,377,378,1,0,0,0,378,21,1,0,0,0,379,377,1,0,0,0,380,381,5,
  	16,0,0,381,384,3,154,77,0,382,383,5,24,0,0,383,385,3,232,116,0,384,382,
  	1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,388,5,80,0,0,387,389,3,24,
  	12,0,388,387,1,0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,390,392,5,85,0,0,
  	391,390,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,395,3,28,14,0,394,
  	393,1,0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,396,397,5,81,0,0,397,23,1,
  	0,0,0,398,403,3,26,13,0,399,400,5,85,0,0,400,402,3,26,13,0,401,399,1,
  	0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,25,1,0,0,0,
  	405,403,1,0,0,0,406,408,3,104,52,0,407,406,1,0,0,0,408,411,1,0,0,0,409,
  	407,1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,409,1,0,0,0,412,414,3,
  	154,77,0,413,415,3,244,122,0,414,413,1,0,0,0,414,415,1,0,0,0,415,417,
  	1,0,0,0,416,418,3,32,16,0,417,416,1,0,0,0,417,418,1,0,0,0,418,27,1,0,
  	0,0,419,423,5,84,0,0,420,422,3,36,18,0,421,420,1,0,0,0,422,425,1,0,0,
  	0,423,421,1,0,0,0,423,424,1,0,0,0,424,29,1,0,0,0,425,423,1,0,0,0,426,
  	427,5,28,0,0,427,429,3,154,77,0,428,430,3,16,8,0,429,428,1,0,0,0,429,
  	430,1,0,0,0,430,433,1,0,0,0,431,432,5,17,0,0,432,434,3,232,116,0,433,
  	431,1,0,0,0,433,434,1,0,0,0,434,437,1,0,0,0,435,436,5,65,0,0,436,438,
  	3,232,116,0,437,435,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,440,3,
  	34,17,0,440,31,1,0,0,0,441,445,5,80,0,0,442,444,3,36,18,0,443,442,1,0,
  	0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,448,1,0,0,0,447,
  	445,1,0,0,0,448,449,5,81,0,0,449,33,1,0,0,0,450,454,5,80,0,0,451,453,
  	3,50,25,0,452,451,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,
  	0,0,455,457,1,0,0,0,456,454,1,0,0,0,457,458,5,81,0,0,458,35,1,0,0,0,459,
  	472,5,84,0,0,460,462,5,38,0,0,461,460,1,0,0,0,461,462,1,0,0,0,462,463,
  	1,0,0,0,463,472,3,148,74,0,464,466,3,8,4,0,465,464,1,0,0,0,466,469,1,
  	0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,470,1,0,0,0,469,467,1,0,0,0,
  	470,472,3,38,19,0,471,459,1,0,0,0,471,461,1,0,0,0,471,467,1,0,0,0,472,
  	37,1,0,0,0,473,482,3,138,69,0,474,482,3,40,20,0,475,482,3,48,24,0,476,
  	482,3,46,23,0,477,482,3,30,15,0,478,482,3,114,57,0,479,482,3,14,7,0,480,
  	482,3,22,11,0,481,473,1,0,0,0,481,474,1,0,0,0,481,475,1,0,0,0,481,476,
  	1,0,0,0,481,477,1,0,0,0,481,478,1,0,0,0,481,479,1,0,0,0,481,480,1,0,0,
  	0,482,39,1,0,0,0,483,485,3,16,8,0,484,483,1,0,0,0,484,485,1,0,0,0,485,
  	486,1,0,0,0,486,487,3,44,22,0,487,488,3,154,77,0,488,493,3,80,40,0,489,
  	490,5,82,0,0,490,492,5,83,0,0,491,489,1,0,0,0,492,495,1,0,0,0,493,491,
  	1,0,0,0,493,494,1,0,0,0,494,498,1,0,0,0,495,493,1,0,0,0,496,497,5,45,
  	0,0,497,499,3,78,39,0,498,496,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,
  	500,501,3,42,21,0,501,41,1,0,0,0,502,505,3,148,74,0,503,505,5,84,0,0,
  	504,502,1,0,0,0,504,503,1,0,0,0,505,43,1,0,0,0,506,509,3,234,117,0,507,
  	509,5,48,0,0,508,506,1,0,0,0,508,507,1,0,0,0,509,45,1,0,0,0,510,512,3,
  	16,8,0,511,510,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,514,3,154,
  	77,0,514,517,3,80,40,0,515,516,5,45,0,0,516,518,3,78,39,0,517,515,1,0,
  	0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,520,3,148,74,0,520,47,1,0,0,0,
  	521,522,3,234,117,0,522,523,3,64,32,0,523,524,5,84,0,0,524,49,1,0,0,0,
  	525,527,3,8,4,0,526,525,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,
  	1,0,0,0,529,531,1,0,0,0,530,528,1,0,0,0,531,534,3,52,26,0,532,534,5,84,
  	0,0,533,528,1,0,0,0,533,532,1,0,0,0,534,51,1,0,0,0,535,543,3,54,27,0,
  	536,543,3,58,29,0,537,543,3,30,15,0,538,543,3,114,57,0,539,543,3,14,7,
  	0,540,543,3,22,11,0,541,543,3,138,69,0,542,535,1,0,0,0,542,536,1,0,0,
  	0,542,537,1,0,0,0,542,538,1,0,0,0,542,539,1,0,0,0,542,540,1,0,0,0,542,
  	541,1,0,0,0,543,53,1,0,0,0,544,545,3,234,117,0,545,550,3,56,28,0,546,
  	547,5,85,0,0,547,549,3,56,28,0,548,546,1,0,0,0,549,552,1,0,0,0,550,548,
  	1,0,0,0,550,551,1,0,0,0,551,553,1,0,0,0,552,550,1,0,0,0,553,554,5,84,
  	0,0,554,55,1,0,0,0,555,560,3,154,77,0,556,557,5,82,0,0,557,559,5,83,0,
  	0,558,556,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,
  	563,1,0,0,0,562,560,1,0,0,0,563,564,5,87,0,0,564,565,3,70,35,0,565,57,
  	1,0,0,0,566,568,3,60,30,0,567,566,1,0,0,0,568,571,1,0,0,0,569,567,1,0,
  	0,0,569,570,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,572,574,3,16,8,0,
  	573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,3,62,31,0,576,
  	59,1,0,0,0,577,584,3,104,52,0,578,584,5,35,0,0,579,584,5,1,0,0,580,584,
  	5,12,0,0,581,584,5,38,0,0,582,584,5,39,0,0,583,577,1,0,0,0,583,578,1,
  	0,0,0,583,579,1,0,0,0,583,580,1,0,0,0,583,581,1,0,0,0,583,582,1,0,0,0,
  	584,61,1,0,0,0,585,587,3,104,52,0,586,585,1,0,0,0,587,590,1,0,0,0,588,
  	586,1,0,0,0,588,589,1,0,0,0,589,591,1,0,0,0,590,588,1,0,0,0,591,592,3,
  	44,22,0,592,593,3,154,77,0,593,598,3,80,40,0,594,595,5,82,0,0,595,597,
  	5,83,0,0,596,594,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,0,
  	0,0,599,603,1,0,0,0,600,598,1,0,0,0,601,602,5,45,0,0,602,604,3,78,39,
  	0,603,601,1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,606,3,42,21,0,606,
  	63,1,0,0,0,607,612,3,66,33,0,608,609,5,85,0,0,609,611,3,66,33,0,610,608,
  	1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,65,1,0,0,
  	0,614,612,1,0,0,0,615,618,3,68,34,0,616,617,5,87,0,0,617,619,3,70,35,
  	0,618,616,1,0,0,0,618,619,1,0,0,0,619,67,1,0,0,0,620,625,3,154,77,0,621,
  	622,5,82,0,0,622,624,5,83,0,0,623,621,1,0,0,0,624,627,1,0,0,0,625,623,
  	1,0,0,0,625,626,1,0,0,0,626,69,1,0,0,0,627,625,1,0,0,0,628,631,3,72,36,
  	0,629,631,3,192,96,0,630,628,1,0,0,0,630,629,1,0,0,0,631,71,1,0,0,0,632,
  	644,5,80,0,0,633,638,3,70,35,0,634,635,5,85,0,0,635,637,3,70,35,0,636,
  	634,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,642,1,
  	0,0,0,640,638,1,0,0,0,641,643,5,85,0,0,642,641,1,0,0,0,642,643,1,0,0,
  	0,643,645,1,0,0,0,644,633,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,
  	647,5,81,0,0,647,73,1,0,0,0,648,650,3,154,77,0,649,651,3,238,119,0,650,
  	649,1,0,0,0,650,651,1,0,0,0,651,659,1,0,0,0,652,653,5,86,0,0,653,655,
  	3,154,77,0,654,656,3,238,119,0,655,654,1,0,0,0,655,656,1,0,0,0,656,658,
  	1,0,0,0,657,652,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,
  	0,660,75,1,0,0,0,661,659,1,0,0,0,662,675,3,234,117,0,663,665,3,104,52,
  	0,664,663,1,0,0,0,665,668,1,0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,
  	669,1,0,0,0,668,666,1,0,0,0,669,672,5,92,0,0,670,671,7,0,0,0,671,673,
  	3,234,117,0,672,670,1,0,0,0,672,673,1,0,0,0,673,675,1,0,0,0,674,662,1,
  	0,0,0,674,666,1,0,0,0,675,77,1,0,0,0,676,681,3,94,47,0,677,678,5,85,0,
  	0,678,680,3,94,47,0,679,677,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,
  	682,1,0,0,0,682,79,1,0,0,0,683,681,1,0,0,0,684,696,5,78,0,0,685,687,3,
  	82,41,0,686,685,1,0,0,0,686,687,1,0,0,0,687,697,1,0,0,0,688,691,3,82,
  	41,0,689,690,5,85,0,0,690,692,3,84,42,0,691,689,1,0,0,0,691,692,1,0,0,
  	0,692,697,1,0,0,0,693,695,3,84,42,0,694,693,1,0,0,0,694,695,1,0,0,0,695,
  	697,1,0,0,0,696,686,1,0,0,0,696,688,1,0,0,0,696,694,1,0,0,0,697,698,1,
  	0,0,0,698,699,5,79,0,0,699,81,1,0,0,0,700,706,3,234,117,0,701,702,3,154,
  	77,0,702,703,5,86,0,0,703,705,1,0,0,0,704,701,1,0,0,0,705,708,1,0,0,0,
  	706,704,1,0,0,0,706,707,1,0,0,0,707,709,1,0,0,0,708,706,1,0,0,0,709,710,
  	5,43,0,0,710,83,1,0,0,0,711,716,3,86,43,0,712,713,5,85,0,0,713,715,3,
  	86,43,0,714,712,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,
  	0,717,721,1,0,0,0,718,716,1,0,0,0,719,720,5,85,0,0,720,722,3,88,44,0,
  	721,719,1,0,0,0,721,722,1,0,0,0,722,725,1,0,0,0,723,725,3,88,44,0,724,
  	711,1,0,0,0,724,723,1,0,0,0,725,85,1,0,0,0,726,728,3,12,6,0,727,726,1,
  	0,0,0,728,731,1,0,0,0,729,727,1,0,0,0,729,730,1,0,0,0,730,732,1,0,0,0,
  	731,729,1,0,0,0,732,733,3,234,117,0,733,734,3,68,34,0,734,87,1,0,0,0,
  	735,737,3,12,6,0,736,735,1,0,0,0,737,740,1,0,0,0,738,736,1,0,0,0,738,
  	739,1,0,0,0,739,741,1,0,0,0,740,738,1,0,0,0,741,745,3,234,117,0,742,744,
  	3,104,52,0,743,742,1,0,0,0,744,747,1,0,0,0,745,743,1,0,0,0,745,746,1,
  	0,0,0,746,748,1,0,0,0,747,745,1,0,0,0,748,749,5,124,0,0,749,750,3,68,
  	34,0,750,89,1,0,0,0,751,756,3,92,46,0,752,753,5,85,0,0,753,755,3,92,46,
  	0,754,752,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,0,0,0,757,
  	91,1,0,0,0,758,756,1,0,0,0,759,761,3,12,6,0,760,759,1,0,0,0,761,764,1,
  	0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,765,1,0,0,0,764,762,1,0,0,0,
  	765,766,5,61,0,0,766,767,3,154,77,0,767,93,1,0,0,0,768,773,3,154,77,0,
  	769,770,5,86,0,0,770,772,3,154,77,0,771,769,1,0,0,0,772,775,1,0,0,0,773,
  	771,1,0,0,0,773,774,1,0,0,0,774,95,1,0,0,0,775,773,1,0,0,0,776,784,3,
  	98,49,0,777,784,3,100,50,0,778,784,5,74,0,0,779,784,5,75,0,0,780,784,
  	5,73,0,0,781,784,5,77,0,0,782,784,5,76,0,0,783,776,1,0,0,0,783,777,1,
  	0,0,0,783,778,1,0,0,0,783,779,1,0,0,0,783,780,1,0,0,0,783,781,1,0,0,0,
  	783,782,1,0,0,0,784,97,1,0,0,0,785,786,7,1,0,0,786,99,1,0,0,0,787,788,
  	7,2,0,0,788,101,1,0,0,0,789,790,3,154,77,0,790,791,5,86,0,0,791,793,1,
  	0,0,0,792,789,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,794,795,1,0,0,0,
  	795,797,1,0,0,0,796,794,1,0,0,0,797,798,5,123,0,0,798,799,3,154,77,0,
  	799,103,1,0,0,0,800,801,5,123,0,0,801,804,3,94,47,0,802,804,3,102,51,
  	0,803,800,1,0,0,0,803,802,1,0,0,0,804,811,1,0,0,0,805,808,5,78,0,0,806,
  	809,3,106,53,0,807,809,3,110,55,0,808,806,1,0,0,0,808,807,1,0,0,0,808,
  	809,1,0,0,0,809,810,1,0,0,0,810,812,5,79,0,0,811,805,1,0,0,0,811,812,
  	1,0,0,0,812,105,1,0,0,0,813,818,3,108,54,0,814,815,5,85,0,0,815,817,3,
  	108,54,0,816,814,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,
  	0,0,819,107,1,0,0,0,820,818,1,0,0,0,821,822,3,154,77,0,822,823,5,87,0,
  	0,823,824,3,110,55,0,824,109,1,0,0,0,825,829,3,192,96,0,826,829,3,104,
  	52,0,827,829,3,112,56,0,828,825,1,0,0,0,828,826,1,0,0,0,828,827,1,0,0,
  	0,829,111,1,0,0,0,830,839,5,80,0,0,831,836,3,110,55,0,832,833,5,85,0,
  	0,833,835,3,110,55,0,834,832,1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,0,
  	836,837,1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,0,839,831,1,0,0,0,839,840,
  	1,0,0,0,840,842,1,0,0,0,841,843,5,85,0,0,842,841,1,0,0,0,842,843,1,0,
  	0,0,843,844,1,0,0,0,844,845,5,81,0,0,845,113,1,0,0,0,846,847,5,123,0,
  	0,847,848,5,28,0,0,848,849,3,154,77,0,849,850,3,116,58,0,850,115,1,0,
  	0,0,851,855,5,80,0,0,852,854,3,118,59,0,853,852,1,0,0,0,854,857,1,0,0,
  	0,855,853,1,0,0,0,855,856,1,0,0,0,856,858,1,0,0,0,857,855,1,0,0,0,858,
  	859,5,81,0,0,859,117,1,0,0,0,860,862,3,8,4,0,861,860,1,0,0,0,862,865,
  	1,0,0,0,863,861,1,0,0,0,863,864,1,0,0,0,864,866,1,0,0,0,865,863,1,0,0,
  	0,866,869,3,120,60,0,867,869,5,84,0,0,868,863,1,0,0,0,868,867,1,0,0,0,
  	869,119,1,0,0,0,870,871,3,234,117,0,871,872,3,122,61,0,872,873,5,84,0,
  	0,873,895,1,0,0,0,874,876,3,14,7,0,875,877,5,84,0,0,876,875,1,0,0,0,876,
  	877,1,0,0,0,877,895,1,0,0,0,878,880,3,30,15,0,879,881,5,84,0,0,880,879,
  	1,0,0,0,880,881,1,0,0,0,881,895,1,0,0,0,882,884,3,22,11,0,883,885,5,84,
  	0,0,884,883,1,0,0,0,884,885,1,0,0,0,885,895,1,0,0,0,886,888,3,114,57,
  	0,887,889,5,84,0,0,888,887,1,0,0,0,888,889,1,0,0,0,889,895,1,0,0,0,890,
  	892,3,138,69,0,891,893,5,84,0,0,892,891,1,0,0,0,892,893,1,0,0,0,893,895,
  	1,0,0,0,894,870,1,0,0,0,894,874,1,0,0,0,894,878,1,0,0,0,894,882,1,0,0,
  	0,894,886,1,0,0,0,894,890,1,0,0,0,895,121,1,0,0,0,896,899,3,124,62,0,
  	897,899,3,126,63,0,898,896,1,0,0,0,898,897,1,0,0,0,899,123,1,0,0,0,900,
  	901,3,154,77,0,901,902,5,78,0,0,902,904,5,79,0,0,903,905,3,128,64,0,904,
  	903,1,0,0,0,904,905,1,0,0,0,905,125,1,0,0,0,906,907,3,64,32,0,907,127,
  	1,0,0,0,908,909,5,12,0,0,909,910,3,110,55,0,910,129,1,0,0,0,911,913,5,
  	52,0,0,912,911,1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,0,914,915,5,51,0,
  	0,915,916,3,94,47,0,916,917,3,132,66,0,917,131,1,0,0,0,918,922,5,80,0,
  	0,919,921,3,134,67,0,920,919,1,0,0,0,921,924,1,0,0,0,922,920,1,0,0,0,
  	922,923,1,0,0,0,923,925,1,0,0,0,924,922,1,0,0,0,925,926,5,81,0,0,926,
  	133,1,0,0,0,927,931,5,53,0,0,928,930,3,136,68,0,929,928,1,0,0,0,930,933,
  	1,0,0,0,931,929,1,0,0,0,931,932,1,0,0,0,932,934,1,0,0,0,933,931,1,0,0,
  	0,934,935,3,94,47,0,935,936,5,84,0,0,936,964,1,0,0,0,937,938,5,54,0,0,
  	938,941,3,94,47,0,939,940,5,56,0,0,940,942,3,94,47,0,941,939,1,0,0,0,
  	941,942,1,0,0,0,942,943,1,0,0,0,943,944,5,84,0,0,944,964,1,0,0,0,945,
  	946,5,55,0,0,946,949,3,94,47,0,947,948,5,56,0,0,948,950,3,94,47,0,949,
  	947,1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,952,5,84,0,0,952,964,
  	1,0,0,0,953,954,5,57,0,0,954,955,3,94,47,0,955,956,5,84,0,0,956,964,1,
  	0,0,0,957,958,5,58,0,0,958,959,3,94,47,0,959,960,5,59,0,0,960,961,3,94,
  	47,0,961,962,5,84,0,0,962,964,1,0,0,0,963,927,1,0,0,0,963,937,1,0,0,0,
  	963,945,1,0,0,0,963,953,1,0,0,0,963,957,1,0,0,0,964,135,1,0,0,0,965,966,
  	7,3,0,0,966,137,1,0,0,0,967,968,5,63,0,0,968,970,3,154,77,0,969,971,3,
  	16,8,0,970,969,1,0,0,0,970,971,1,0,0,0,971,972,1,0,0,0,972,975,3,140,
  	70,0,973,974,5,24,0,0,974,976,3,232,116,0,975,973,1,0,0,0,975,976,1,0,
  	0,0,976,977,1,0,0,0,977,978,3,146,73,0,978,139,1,0,0,0,979,981,5,78,0,
  	0,980,982,3,142,71,0,981,980,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,
  	983,984,5,79,0,0,984,141,1,0,0,0,985,990,3,144,72,0,986,987,5,85,0,0,
  	987,989,3,144,72,0,988,986,1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,990,
  	991,1,0,0,0,991,143,1,0,0,0,992,990,1,0,0,0,993,994,3,234,117,0,994,995,
  	3,154,77,0,995,145,1,0,0,0,996,1000,5,80,0,0,997,999,3,36,18,0,998,997,
  	1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,1003,
  	1,0,0,0,1002,1000,1,0,0,0,1003,1004,5,81,0,0,1004,147,1,0,0,0,1005,1009,
  	5,80,0,0,1006,1008,3,150,75,0,1007,1006,1,0,0,0,1008,1011,1,0,0,0,1009,
  	1007,1,0,0,0,1009,1010,1,0,0,0,1010,1012,1,0,0,0,1011,1009,1,0,0,0,1012,
  	1013,5,81,0,0,1013,149,1,0,0,0,1014,1015,3,152,76,0,1015,1016,5,84,0,
  	0,1016,1020,1,0,0,0,1017,1020,3,156,78,0,1018,1020,3,158,79,0,1019,1014,
  	1,0,0,0,1019,1017,1,0,0,0,1019,1018,1,0,0,0,1020,151,1,0,0,0,1021,1023,
  	3,12,6,0,1022,1021,1,0,0,0,1023,1026,1,0,0,0,1024,1022,1,0,0,0,1024,1025,
  	1,0,0,0,1025,1035,1,0,0,0,1026,1024,1,0,0,0,1027,1028,5,61,0,0,1028,1029,
  	3,154,77,0,1029,1030,5,87,0,0,1030,1031,3,192,96,0,1031,1036,1,0,0,0,
  	1032,1033,3,234,117,0,1033,1034,3,64,32,0,1034,1036,1,0,0,0,1035,1027,
  	1,0,0,0,1035,1032,1,0,0,0,1036,153,1,0,0,0,1037,1038,7,4,0,0,1038,155,
  	1,0,0,0,1039,1041,3,10,5,0,1040,1039,1,0,0,0,1041,1044,1,0,0,0,1042,1040,
  	1,0,0,0,1042,1043,1,0,0,0,1043,1048,1,0,0,0,1044,1042,1,0,0,0,1045,1049,
  	3,14,7,0,1046,1049,3,30,15,0,1047,1049,3,138,69,0,1048,1045,1,0,0,0,1048,
  	1046,1,0,0,0,1048,1047,1,0,0,0,1049,1052,1,0,0,0,1050,1052,5,84,0,0,1051,
  	1042,1,0,0,0,1051,1050,1,0,0,0,1052,157,1,0,0,0,1053,1167,3,148,74,0,
  	1054,1055,5,2,0,0,1055,1058,3,192,96,0,1056,1057,5,93,0,0,1057,1059,3,
  	192,96,0,1058,1056,1,0,0,0,1058,1059,1,0,0,0,1059,1060,1,0,0,0,1060,1061,
  	5,84,0,0,1061,1167,1,0,0,0,1062,1063,5,22,0,0,1063,1064,3,186,93,0,1064,
  	1067,3,158,79,0,1065,1066,5,15,0,0,1066,1068,3,158,79,0,1067,1065,1,0,
  	0,0,1067,1068,1,0,0,0,1068,1167,1,0,0,0,1069,1070,5,21,0,0,1070,1071,
  	5,78,0,0,1071,1072,3,176,88,0,1072,1073,5,79,0,0,1073,1074,3,158,79,0,
  	1074,1167,1,0,0,0,1075,1076,5,50,0,0,1076,1077,3,186,93,0,1077,1078,3,
  	158,79,0,1078,1167,1,0,0,0,1079,1080,5,13,0,0,1080,1081,3,158,79,0,1081,
  	1082,5,50,0,0,1082,1083,3,186,93,0,1083,1084,5,84,0,0,1084,1167,1,0,0,
  	0,1085,1086,5,41,0,0,1086,1087,3,186,93,0,1087,1091,5,80,0,0,1088,1090,
  	3,172,86,0,1089,1088,1,0,0,0,1090,1093,1,0,0,0,1091,1089,1,0,0,0,1091,
  	1092,1,0,0,0,1092,1097,1,0,0,0,1093,1091,1,0,0,0,1094,1096,3,174,87,0,
  	1095,1094,1,0,0,0,1096,1099,1,0,0,0,1097,1095,1,0,0,0,1097,1098,1,0,0,
  	0,1098,1100,1,0,0,0,1099,1097,1,0,0,0,1100,1101,5,81,0,0,1101,1167,1,
  	0,0,0,1102,1103,5,47,0,0,1103,1113,3,148,74,0,1104,1106,3,160,80,0,1105,
  	1104,1,0,0,0,1106,1107,1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,
  	1110,1,0,0,0,1109,1111,3,164,82,0,1110,1109,1,0,0,0,1110,1111,1,0,0,0,
  	1111,1114,1,0,0,0,1112,1114,3,164,82,0,1113,1105,1,0,0,0,1113,1112,1,
  	0,0,0,1114,1167,1,0,0,0,1115,1116,5,47,0,0,1116,1117,3,166,83,0,1117,
  	1121,3,148,74,0,1118,1120,3,160,80,0,1119,1118,1,0,0,0,1120,1123,1,0,
  	0,0,1121,1119,1,0,0,0,1121,1122,1,0,0,0,1122,1125,1,0,0,0,1123,1121,1,
  	0,0,0,1124,1126,3,164,82,0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,1126,1167,
  	1,0,0,0,1127,1128,5,42,0,0,1128,1129,3,186,93,0,1129,1130,3,148,74,0,
  	1130,1167,1,0,0,0,1131,1133,5,36,0,0,1132,1134,3,192,96,0,1133,1132,1,
  	0,0,0,1133,1134,1,0,0,0,1134,1135,1,0,0,0,1135,1167,5,84,0,0,1136,1137,
  	5,44,0,0,1137,1138,3,192,96,0,1138,1139,5,84,0,0,1139,1167,1,0,0,0,1140,
  	1142,5,4,0,0,1141,1143,3,154,77,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,
  	1143,1144,1,0,0,0,1144,1167,5,84,0,0,1145,1147,5,11,0,0,1146,1148,3,154,
  	77,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,1167,
  	5,84,0,0,1150,1151,5,62,0,0,1151,1152,3,192,96,0,1152,1153,5,84,0,0,1153,
  	1167,1,0,0,0,1154,1167,5,84,0,0,1155,1156,3,192,96,0,1156,1157,5,84,0,
  	0,1157,1167,1,0,0,0,1158,1160,3,204,102,0,1159,1161,5,84,0,0,1160,1159,
  	1,0,0,0,1160,1161,1,0,0,0,1161,1167,1,0,0,0,1162,1163,3,154,77,0,1163,
  	1164,5,93,0,0,1164,1165,3,158,79,0,1165,1167,1,0,0,0,1166,1053,1,0,0,
  	0,1166,1054,1,0,0,0,1166,1062,1,0,0,0,1166,1069,1,0,0,0,1166,1075,1,0,
  	0,0,1166,1079,1,0,0,0,1166,1085,1,0,0,0,1166,1102,1,0,0,0,1166,1115,1,
  	0,0,0,1166,1127,1,0,0,0,1166,1131,1,0,0,0,1166,1136,1,0,0,0,1166,1140,
  	1,0,0,0,1166,1145,1,0,0,0,1166,1150,1,0,0,0,1166,1154,1,0,0,0,1166,1155,
  	1,0,0,0,1166,1158,1,0,0,0,1166,1162,1,0,0,0,1167,159,1,0,0,0,1168,1169,
  	5,7,0,0,1169,1173,5,78,0,0,1170,1172,3,12,6,0,1171,1170,1,0,0,0,1172,
  	1175,1,0,0,0,1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,1176,1,0,0,0,1175,
  	1173,1,0,0,0,1176,1177,3,162,81,0,1177,1178,3,154,77,0,1178,1179,5,79,
  	0,0,1179,1180,3,148,74,0,1180,161,1,0,0,0,1181,1186,3,94,47,0,1182,1183,
  	5,107,0,0,1183,1185,3,94,47,0,1184,1182,1,0,0,0,1185,1188,1,0,0,0,1186,
  	1184,1,0,0,0,1186,1187,1,0,0,0,1187,163,1,0,0,0,1188,1186,1,0,0,0,1189,
  	1190,5,19,0,0,1190,1191,3,148,74,0,1191,165,1,0,0,0,1192,1193,5,78,0,
  	0,1193,1195,3,168,84,0,1194,1196,5,84,0,0,1195,1194,1,0,0,0,1195,1196,
  	1,0,0,0,1196,1197,1,0,0,0,1197,1198,5,79,0,0,1198,167,1,0,0,0,1199,1204,
  	3,170,85,0,1200,1201,5,84,0,0,1201,1203,3,170,85,0,1202,1200,1,0,0,0,
  	1203,1206,1,0,0,0,1204,1202,1,0,0,0,1204,1205,1,0,0,0,1205,169,1,0,0,
  	0,1206,1204,1,0,0,0,1207,1209,3,12,6,0,1208,1207,1,0,0,0,1209,1212,1,
  	0,0,0,1210,1208,1,0,0,0,1210,1211,1,0,0,0,1211,1218,1,0,0,0,1212,1210,
  	1,0,0,0,1213,1214,3,74,37,0,1214,1215,3,68,34,0,1215,1219,1,0,0,0,1216,
  	1217,5,61,0,0,1217,1219,3,154,77,0,1218,1213,1,0,0,0,1218,1216,1,0,0,
  	0,1219,1220,1,0,0,0,1220,1221,5,87,0,0,1221,1222,3,192,96,0,1222,1225,
  	1,0,0,0,1223,1225,3,154,77,0,1224,1210,1,0,0,0,1224,1223,1,0,0,0,1225,
  	171,1,0,0,0,1226,1228,3,174,87,0,1227,1226,1,0,0,0,1228,1229,1,0,0,0,
  	1229,1227,1,0,0,0,1229,1230,1,0,0,0,1230,1232,1,0,0,0,1231,1233,3,150,
  	75,0,1232,1231,1,0,0,0,1233,1234,1,0,0,0,1234,1232,1,0,0,0,1234,1235,
  	1,0,0,0,1235,173,1,0,0,0,1236,1237,5,6,0,0,1237,1238,3,192,96,0,1238,
  	1239,5,93,0,0,1239,1243,1,0,0,0,1240,1241,5,12,0,0,1241,1243,5,93,0,0,
  	1242,1236,1,0,0,0,1242,1240,1,0,0,0,1243,175,1,0,0,0,1244,1257,3,184,
  	92,0,1245,1247,3,178,89,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,1247,1248,
  	1,0,0,0,1248,1250,5,84,0,0,1249,1251,3,180,90,0,1250,1249,1,0,0,0,1250,
  	1251,1,0,0,0,1251,1252,1,0,0,0,1252,1254,5,84,0,0,1253,1255,3,182,91,
  	0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1257,1,0,0,0,1256,1244,1,0,
  	0,0,1256,1246,1,0,0,0,1257,177,1,0,0,0,1258,1261,3,152,76,0,1259,1261,
  	3,188,94,0,1260,1258,1,0,0,0,1260,1259,1,0,0,0,1261,179,1,0,0,0,1262,
  	1263,3,192,96,0,1263,181,1,0,0,0,1264,1265,3,188,94,0,1265,183,1,0,0,
  	0,1266,1268,3,12,6,0,1267,1266,1,0,0,0,1268,1271,1,0,0,0,1269,1267,1,
  	0,0,0,1269,1270,1,0,0,0,1270,1274,1,0,0,0,1271,1269,1,0,0,0,1272,1275,
  	3,234,117,0,1273,1275,5,61,0,0,1274,1272,1,0,0,0,1274,1273,1,0,0,0,1275,
  	1276,1,0,0,0,1276,1277,3,68,34,0,1277,1278,5,93,0,0,1278,1279,3,192,96,
  	0,1279,185,1,0,0,0,1280,1281,5,78,0,0,1281,1282,3,192,96,0,1282,1283,
  	5,79,0,0,1283,187,1,0,0,0,1284,1289,3,192,96,0,1285,1286,5,85,0,0,1286,
  	1288,3,192,96,0,1287,1285,1,0,0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,
  	1289,1290,1,0,0,0,1290,189,1,0,0,0,1291,1289,1,0,0,0,1292,1293,3,154,
  	77,0,1293,1295,5,78,0,0,1294,1296,3,188,94,0,1295,1294,1,0,0,0,1295,1296,
  	1,0,0,0,1296,1297,1,0,0,0,1297,1298,5,79,0,0,1298,1312,1,0,0,0,1299,1300,
  	5,43,0,0,1300,1302,5,78,0,0,1301,1303,3,188,94,0,1302,1301,1,0,0,0,1302,
  	1303,1,0,0,0,1303,1304,1,0,0,0,1304,1312,5,79,0,0,1305,1306,5,40,0,0,
  	1306,1308,5,78,0,0,1307,1309,3,188,94,0,1308,1307,1,0,0,0,1308,1309,1,
  	0,0,0,1309,1310,1,0,0,0,1310,1312,5,79,0,0,1311,1292,1,0,0,0,1311,1299,
  	1,0,0,0,1311,1305,1,0,0,0,1312,191,1,0,0,0,1313,1314,6,96,-1,0,1314,1364,
  	3,202,101,0,1315,1364,3,190,95,0,1316,1318,5,31,0,0,1317,1319,3,230,115,
  	0,1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1364,3,214,
  	107,0,1321,1325,5,78,0,0,1322,1324,3,104,52,0,1323,1322,1,0,0,0,1324,
  	1327,1,0,0,0,1325,1323,1,0,0,0,1325,1326,1,0,0,0,1326,1328,1,0,0,0,1327,
  	1325,1,0,0,0,1328,1333,3,234,117,0,1329,1330,5,106,0,0,1330,1332,3,234,
  	117,0,1331,1329,1,0,0,0,1332,1335,1,0,0,0,1333,1331,1,0,0,0,1333,1334,
  	1,0,0,0,1334,1336,1,0,0,0,1335,1333,1,0,0,0,1336,1337,5,79,0,0,1337,1338,
  	3,192,96,23,1338,1364,1,0,0,0,1339,1340,7,5,0,0,1340,1364,3,192,96,21,
  	1341,1342,7,6,0,0,1342,1364,3,192,96,20,1343,1344,7,7,0,0,1344,1364,3,
  	192,96,19,1345,1364,3,196,98,0,1346,1364,3,204,102,0,1347,1348,3,234,
  	117,0,1348,1354,5,122,0,0,1349,1351,3,238,119,0,1350,1349,1,0,0,0,1350,
  	1351,1,0,0,0,1351,1352,1,0,0,0,1352,1355,3,154,77,0,1353,1355,5,31,0,
  	0,1354,1350,1,0,0,0,1354,1353,1,0,0,0,1355,1364,1,0,0,0,1356,1357,3,212,
  	106,0,1357,1359,5,122,0,0,1358,1360,3,238,119,0,1359,1358,1,0,0,0,1359,
  	1360,1,0,0,0,1360,1361,1,0,0,0,1361,1362,5,31,0,0,1362,1364,1,0,0,0,1363,
  	1313,1,0,0,0,1363,1315,1,0,0,0,1363,1316,1,0,0,0,1363,1321,1,0,0,0,1363,
  	1339,1,0,0,0,1363,1341,1,0,0,0,1363,1343,1,0,0,0,1363,1345,1,0,0,0,1363,
  	1346,1,0,0,0,1363,1347,1,0,0,0,1363,1356,1,0,0,0,1364,1448,1,0,0,0,1365,
  	1366,10,18,0,0,1366,1367,7,8,0,0,1367,1447,3,192,96,19,1368,1369,10,17,
  	0,0,1369,1370,7,6,0,0,1370,1447,3,192,96,18,1371,1379,10,16,0,0,1372,
  	1373,5,89,0,0,1373,1380,5,89,0,0,1374,1375,5,88,0,0,1375,1376,5,88,0,
  	0,1376,1380,5,88,0,0,1377,1378,5,88,0,0,1378,1380,5,88,0,0,1379,1372,
  	1,0,0,0,1379,1374,1,0,0,0,1379,1377,1,0,0,0,1380,1381,1,0,0,0,1381,1447,
  	3,192,96,17,1382,1383,10,15,0,0,1383,1384,7,9,0,0,1384,1447,3,192,96,
  	16,1385,1386,10,13,0,0,1386,1387,7,10,0,0,1387,1447,3,192,96,14,1388,
  	1389,10,12,0,0,1389,1390,5,106,0,0,1390,1447,3,192,96,13,1391,1392,10,
  	11,0,0,1392,1393,5,108,0,0,1393,1447,3,192,96,12,1394,1395,10,10,0,0,
  	1395,1396,5,107,0,0,1396,1447,3,192,96,11,1397,1398,10,9,0,0,1398,1399,
  	5,98,0,0,1399,1447,3,192,96,10,1400,1401,10,8,0,0,1401,1402,5,99,0,0,
  	1402,1447,3,192,96,9,1403,1404,10,7,0,0,1404,1405,5,92,0,0,1405,1406,
  	3,192,96,0,1406,1407,5,93,0,0,1407,1408,3,192,96,7,1408,1447,1,0,0,0,
  	1409,1410,10,6,0,0,1410,1411,7,11,0,0,1411,1447,3,192,96,6,1412,1413,
  	10,27,0,0,1413,1425,5,86,0,0,1414,1426,3,154,77,0,1415,1426,3,190,95,
  	0,1416,1426,5,43,0,0,1417,1419,5,31,0,0,1418,1420,3,230,115,0,1419,1418,
  	1,0,0,0,1419,1420,1,0,0,0,1420,1421,1,0,0,0,1421,1426,3,218,109,0,1422,
  	1423,5,40,0,0,1423,1426,3,240,120,0,1424,1426,3,224,112,0,1425,1414,1,
  	0,0,0,1425,1415,1,0,0,0,1425,1416,1,0,0,0,1425,1417,1,0,0,0,1425,1422,
  	1,0,0,0,1425,1424,1,0,0,0,1426,1447,1,0,0,0,1427,1428,10,26,0,0,1428,
  	1429,5,82,0,0,1429,1430,3,192,96,0,1430,1431,5,83,0,0,1431,1447,1,0,0,
  	0,1432,1433,10,22,0,0,1433,1447,7,5,0,0,1434,1435,10,14,0,0,1435,1438,
  	5,26,0,0,1436,1439,3,234,117,0,1437,1439,3,194,97,0,1438,1436,1,0,0,0,
  	1438,1437,1,0,0,0,1439,1447,1,0,0,0,1440,1441,10,3,0,0,1441,1443,5,122,
  	0,0,1442,1444,3,238,119,0,1443,1442,1,0,0,0,1443,1444,1,0,0,0,1444,1445,
  	1,0,0,0,1445,1447,3,154,77,0,1446,1365,1,0,0,0,1446,1368,1,0,0,0,1446,
  	1371,1,0,0,0,1446,1382,1,0,0,0,1446,1385,1,0,0,0,1446,1388,1,0,0,0,1446,
  	1391,1,0,0,0,1446,1394,1,0,0,0,1446,1397,1,0,0,0,1446,1400,1,0,0,0,1446,
  	1403,1,0,0,0,1446,1409,1,0,0,0,1446,1412,1,0,0,0,1446,1427,1,0,0,0,1446,
  	1432,1,0,0,0,1446,1434,1,0,0,0,1446,1440,1,0,0,0,1447,1450,1,0,0,0,1448,
  	1446,1,0,0,0,1448,1449,1,0,0,0,1449,193,1,0,0,0,1450,1448,1,0,0,0,1451,
  	1453,3,12,6,0,1452,1451,1,0,0,0,1453,1456,1,0,0,0,1454,1452,1,0,0,0,1454,
  	1455,1,0,0,0,1455,1457,1,0,0,0,1456,1454,1,0,0,0,1457,1461,3,234,117,
  	0,1458,1460,3,104,52,0,1459,1458,1,0,0,0,1460,1463,1,0,0,0,1461,1459,
  	1,0,0,0,1461,1462,1,0,0,0,1462,1464,1,0,0,0,1463,1461,1,0,0,0,1464,1465,
  	3,154,77,0,1465,195,1,0,0,0,1466,1467,3,198,99,0,1467,1468,5,121,0,0,
  	1468,1469,3,200,100,0,1469,197,1,0,0,0,1470,1493,3,154,77,0,1471,1473,
  	5,78,0,0,1472,1474,3,84,42,0,1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,
  	1475,1,0,0,0,1475,1493,5,79,0,0,1476,1477,5,78,0,0,1477,1482,3,154,77,
  	0,1478,1479,5,85,0,0,1479,1481,3,154,77,0,1480,1478,1,0,0,0,1481,1484,
  	1,0,0,0,1482,1480,1,0,0,0,1482,1483,1,0,0,0,1483,1485,1,0,0,0,1484,1482,
  	1,0,0,0,1485,1486,5,79,0,0,1486,1493,1,0,0,0,1487,1489,5,78,0,0,1488,
  	1490,3,90,45,0,1489,1488,1,0,0,0,1489,1490,1,0,0,0,1490,1491,1,0,0,0,
  	1491,1493,5,79,0,0,1492,1470,1,0,0,0,1492,1471,1,0,0,0,1492,1476,1,0,
  	0,0,1492,1487,1,0,0,0,1493,199,1,0,0,0,1494,1497,3,192,96,0,1495,1497,
  	3,148,74,0,1496,1494,1,0,0,0,1496,1495,1,0,0,0,1497,201,1,0,0,0,1498,
  	1499,5,78,0,0,1499,1500,3,192,96,0,1500,1501,5,79,0,0,1501,1517,1,0,0,
  	0,1502,1517,5,43,0,0,1503,1517,5,40,0,0,1504,1517,3,96,48,0,1505,1517,
  	3,154,77,0,1506,1507,3,44,22,0,1507,1508,5,86,0,0,1508,1509,5,9,0,0,1509,
  	1517,1,0,0,0,1510,1514,3,230,115,0,1511,1515,3,242,121,0,1512,1513,5,
  	43,0,0,1513,1515,3,244,122,0,1514,1511,1,0,0,0,1514,1512,1,0,0,0,1515,
  	1517,1,0,0,0,1516,1498,1,0,0,0,1516,1502,1,0,0,0,1516,1503,1,0,0,0,1516,
  	1504,1,0,0,0,1516,1505,1,0,0,0,1516,1506,1,0,0,0,1516,1510,1,0,0,0,1517,
  	203,1,0,0,0,1518,1519,5,41,0,0,1519,1520,3,186,93,0,1520,1524,5,80,0,
  	0,1521,1523,3,206,103,0,1522,1521,1,0,0,0,1523,1526,1,0,0,0,1524,1522,
  	1,0,0,0,1524,1525,1,0,0,0,1525,1527,1,0,0,0,1526,1524,1,0,0,0,1527,1528,
  	5,81,0,0,1528,205,1,0,0,0,1529,1533,5,6,0,0,1530,1534,3,188,94,0,1531,
  	1534,5,77,0,0,1532,1534,3,208,104,0,1533,1530,1,0,0,0,1533,1531,1,0,0,
  	0,1533,1532,1,0,0,0,1534,1535,1,0,0,0,1535,1536,7,12,0,0,1536,1541,3,
  	210,105,0,1537,1538,5,12,0,0,1538,1539,7,12,0,0,1539,1541,3,210,105,0,
  	1540,1529,1,0,0,0,1540,1537,1,0,0,0,1541,207,1,0,0,0,1542,1543,6,104,
  	-1,0,1543,1544,5,78,0,0,1544,1545,3,208,104,0,1545,1546,5,79,0,0,1546,
  	1569,1,0,0,0,1547,1549,3,12,6,0,1548,1547,1,0,0,0,1549,1552,1,0,0,0,1550,
  	1548,1,0,0,0,1550,1551,1,0,0,0,1551,1553,1,0,0,0,1552,1550,1,0,0,0,1553,
  	1557,3,234,117,0,1554,1556,3,104,52,0,1555,1554,1,0,0,0,1556,1559,1,0,
  	0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,1560,1,0,0,0,1559,1557,1,
  	0,0,0,1560,1565,3,154,77,0,1561,1562,5,98,0,0,1562,1564,3,192,96,0,1563,
  	1561,1,0,0,0,1564,1567,1,0,0,0,1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,
  	1569,1,0,0,0,1567,1565,1,0,0,0,1568,1542,1,0,0,0,1568,1550,1,0,0,0,1569,
  	1575,1,0,0,0,1570,1571,10,1,0,0,1571,1572,5,98,0,0,1572,1574,3,192,96,
  	0,1573,1570,1,0,0,0,1574,1577,1,0,0,0,1575,1573,1,0,0,0,1575,1576,1,0,
  	0,0,1576,209,1,0,0,0,1577,1575,1,0,0,0,1578,1586,3,148,74,0,1579,1581,
  	3,150,75,0,1580,1579,1,0,0,0,1581,1584,1,0,0,0,1582,1580,1,0,0,0,1582,
  	1583,1,0,0,0,1583,1586,1,0,0,0,1584,1582,1,0,0,0,1585,1578,1,0,0,0,1585,
  	1582,1,0,0,0,1586,211,1,0,0,0,1587,1588,3,74,37,0,1588,1589,5,86,0,0,
  	1589,1591,1,0,0,0,1590,1587,1,0,0,0,1590,1591,1,0,0,0,1591,1595,1,0,0,
  	0,1592,1594,3,104,52,0,1593,1592,1,0,0,0,1594,1597,1,0,0,0,1595,1593,
  	1,0,0,0,1595,1596,1,0,0,0,1596,1598,1,0,0,0,1597,1595,1,0,0,0,1598,1600,
  	3,154,77,0,1599,1601,3,238,119,0,1600,1599,1,0,0,0,1600,1601,1,0,0,0,
  	1601,213,1,0,0,0,1602,1605,3,216,108,0,1603,1606,3,220,110,0,1604,1606,
  	3,222,111,0,1605,1603,1,0,0,0,1605,1604,1,0,0,0,1606,215,1,0,0,0,1607,
  	1609,3,154,77,0,1608,1610,3,226,113,0,1609,1608,1,0,0,0,1609,1610,1,0,
  	0,0,1610,1618,1,0,0,0,1611,1612,5,86,0,0,1612,1614,3,154,77,0,1613,1615,
  	3,226,113,0,1614,1613,1,0,0,0,1614,1615,1,0,0,0,1615,1617,1,0,0,0,1616,
  	1611,1,0,0,0,1617,1620,1,0,0,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,
  	1623,1,0,0,0,1620,1618,1,0,0,0,1621,1623,3,236,118,0,1622,1607,1,0,0,
  	0,1622,1621,1,0,0,0,1623,217,1,0,0,0,1624,1626,3,154,77,0,1625,1627,3,
  	228,114,0,1626,1625,1,0,0,0,1626,1627,1,0,0,0,1627,1628,1,0,0,0,1628,
  	1629,3,222,111,0,1629,219,1,0,0,0,1630,1658,5,82,0,0,1631,1636,5,83,0,
  	0,1632,1633,5,82,0,0,1633,1635,5,83,0,0,1634,1632,1,0,0,0,1635,1638,1,
  	0,0,0,1636,1634,1,0,0,0,1636,1637,1,0,0,0,1637,1639,1,0,0,0,1638,1636,
  	1,0,0,0,1639,1659,3,72,36,0,1640,1641,3,192,96,0,1641,1648,5,83,0,0,1642,
  	1643,5,82,0,0,1643,1644,3,192,96,0,1644,1645,5,83,0,0,1645,1647,1,0,0,
  	0,1646,1642,1,0,0,0,1647,1650,1,0,0,0,1648,1646,1,0,0,0,1648,1649,1,0,
  	0,0,1649,1655,1,0,0,0,1650,1648,1,0,0,0,1651,1652,5,82,0,0,1652,1654,
  	5,83,0,0,1653,1651,1,0,0,0,1654,1657,1,0,0,0,1655,1653,1,0,0,0,1655,1656,
  	1,0,0,0,1656,1659,1,0,0,0,1657,1655,1,0,0,0,1658,1631,1,0,0,0,1658,1640,
  	1,0,0,0,1659,221,1,0,0,0,1660,1662,3,244,122,0,1661,1663,3,32,16,0,1662,
  	1661,1,0,0,0,1662,1663,1,0,0,0,1663,223,1,0,0,0,1664,1665,3,230,115,0,
  	1665,1666,3,242,121,0,1666,225,1,0,0,0,1667,1668,5,89,0,0,1668,1671,5,
  	88,0,0,1669,1671,3,238,119,0,1670,1667,1,0,0,0,1670,1669,1,0,0,0,1671,
  	227,1,0,0,0,1672,1673,5,89,0,0,1673,1676,5,88,0,0,1674,1676,3,230,115,
  	0,1675,1672,1,0,0,0,1675,1674,1,0,0,0,1676,229,1,0,0,0,1677,1678,5,89,
  	0,0,1678,1679,3,232,116,0,1679,1680,5,88,0,0,1680,231,1,0,0,0,1681,1686,
  	3,234,117,0,1682,1683,5,85,0,0,1683,1685,3,234,117,0,1684,1682,1,0,0,
  	0,1685,1688,1,0,0,0,1686,1684,1,0,0,0,1686,1687,1,0,0,0,1687,233,1,0,
  	0,0,1688,1686,1,0,0,0,1689,1691,3,104,52,0,1690,1689,1,0,0,0,1691,1694,
  	1,0,0,0,1692,1690,1,0,0,0,1692,1693,1,0,0,0,1693,1697,1,0,0,0,1694,1692,
  	1,0,0,0,1695,1698,3,74,37,0,1696,1698,3,236,118,0,1697,1695,1,0,0,0,1697,
  	1696,1,0,0,0,1698,1709,1,0,0,0,1699,1701,3,104,52,0,1700,1699,1,0,0,0,
  	1701,1704,1,0,0,0,1702,1700,1,0,0,0,1702,1703,1,0,0,0,1703,1705,1,0,0,
  	0,1704,1702,1,0,0,0,1705,1706,5,82,0,0,1706,1708,5,83,0,0,1707,1702,1,
  	0,0,0,1708,1711,1,0,0,0,1709,1707,1,0,0,0,1709,1710,1,0,0,0,1710,235,
  	1,0,0,0,1711,1709,1,0,0,0,1712,1713,7,13,0,0,1713,237,1,0,0,0,1714,1715,
  	5,89,0,0,1715,1720,3,76,38,0,1716,1717,5,85,0,0,1717,1719,3,76,38,0,1718,
  	1716,1,0,0,0,1719,1722,1,0,0,0,1720,1718,1,0,0,0,1720,1721,1,0,0,0,1721,
  	1723,1,0,0,0,1722,1720,1,0,0,0,1723,1724,5,88,0,0,1724,239,1,0,0,0,1725,
  	1735,3,244,122,0,1726,1728,5,86,0,0,1727,1729,3,238,119,0,1728,1727,1,
  	0,0,0,1728,1729,1,0,0,0,1729,1730,1,0,0,0,1730,1732,3,154,77,0,1731,1733,
  	3,244,122,0,1732,1731,1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,0,1734,
  	1725,1,0,0,0,1734,1726,1,0,0,0,1735,241,1,0,0,0,1736,1737,5,40,0,0,1737,
  	1742,3,240,120,0,1738,1739,3,154,77,0,1739,1740,3,244,122,0,1740,1742,
  	1,0,0,0,1741,1736,1,0,0,0,1741,1738,1,0,0,0,1742,243,1,0,0,0,1743,1745,
  	5,78,0,0,1744,1746,3,188,94,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,
  	1747,1,0,0,0,1747,1748,5,79,0,0,1748,245,1,0,0,0,222,247,251,253,258,
  	260,266,271,280,285,292,300,307,319,323,328,332,336,340,350,358,366,370,
  	377,384,388,391,394,403,409,414,417,423,429,433,437,445,454,461,467,471,
  	481,484,493,498,504,508,511,517,528,533,542,550,560,569,573,583,588,598,
  	603,612,618,625,630,638,642,644,650,655,659,666,672,674,681,686,691,694,
  	696,706,716,721,724,729,738,745,756,762,773,783,794,803,808,811,818,828,
  	836,839,842,855,863,868,876,880,884,888,892,894,898,904,912,922,931,941,
  	949,963,970,975,981,990,1000,1009,1019,1024,1035,1042,1048,1051,1058,
  	1067,1091,1097,1107,1110,1113,1121,1125,1133,1142,1147,1160,1166,1173,
  	1186,1195,1204,1210,1218,1224,1229,1234,1242,1246,1250,1254,1256,1260,
  	1269,1274,1289,1295,1302,1308,1311,1318,1325,1333,1350,1354,1359,1363,
  	1379,1419,1425,1438,1443,1446,1448,1454,1461,1473,1482,1489,1492,1496,
  	1514,1516,1524,1533,1540,1550,1557,1565,1568,1575,1582,1585,1590,1595,
  	1600,1605,1609,1614,1618,1622,1626,1636,1648,1655,1658,1662,1670,1675,
  	1686,1692,1697,1702,1709,1720,1728,1732,1734,1741,1745
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  javaparserParserStaticData = staticData.release();
}

}

JavaParser::JavaParser(TokenStream *input) : JavaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

JavaParser::JavaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  JavaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *javaparserParserStaticData->atn, javaparserParserStaticData->decisionToDFA, javaparserParserStaticData->sharedContextCache, options);
}

JavaParser::~JavaParser() {
  delete _interpreter;
}

const atn::ATN& JavaParser::getATN() const {
  return *javaparserParserStaticData->atn;
}

std::string JavaParser::getGrammarFileName() const {
  return "JavaParser.g4";
}

const std::vector<std::string>& JavaParser::getRuleNames() const {
  return javaparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& JavaParser::getVocabulary() const {
  return javaparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView JavaParser::getSerializedATN() const {
  return javaparserParserStaticData->serializedATN;
}


//----------------- CompilationUnitContext ------------------------------------------------------------------

JavaParser::CompilationUnitContext::CompilationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::PackageDeclarationContext* JavaParser::CompilationUnitContext::packageDeclaration() {
  return getRuleContext<JavaParser::PackageDeclarationContext>(0);
}

std::vector<JavaParser::ImportDeclarationContext *> JavaParser::CompilationUnitContext::importDeclaration() {
  return getRuleContexts<JavaParser::ImportDeclarationContext>();
}

JavaParser::ImportDeclarationContext* JavaParser::CompilationUnitContext::importDeclaration(size_t i) {
  return getRuleContext<JavaParser::ImportDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::CompilationUnitContext::SEMI() {
  return getTokens(JavaParser::SEMI);
}

tree::TerminalNode* JavaParser::CompilationUnitContext::SEMI(size_t i) {
  return getToken(JavaParser::SEMI, i);
}

std::vector<JavaParser::TypeDeclarationContext *> JavaParser::CompilationUnitContext::typeDeclaration() {
  return getRuleContexts<JavaParser::TypeDeclarationContext>();
}

JavaParser::TypeDeclarationContext* JavaParser::CompilationUnitContext::typeDeclaration(size_t i) {
  return getRuleContext<JavaParser::TypeDeclarationContext>(i);
}

JavaParser::ModuleDeclarationContext* JavaParser::CompilationUnitContext::moduleDeclaration() {
  return getRuleContext<JavaParser::ModuleDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::CompilationUnitContext::EOF() {
  return getToken(JavaParser::EOF, 0);
}


size_t JavaParser::CompilationUnitContext::getRuleIndex() const {
  return JavaParser::RuleCompilationUnit;
}


std::any JavaParser::CompilationUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCompilationUnit(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CompilationUnitContext* JavaParser::compilationUnit() {
  CompilationUnitContext *_localctx = _tracker.createInstance<CompilationUnitContext>(_ctx, getState());
  enterRule(_localctx, 0, JavaParser::RuleCompilationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(266);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(247);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
      case 1: {
        setState(246);
        packageDeclaration();
        break;
      }

      default:
        break;
      }
      setState(253);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(251);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case JavaParser::IMPORT: {
              setState(249);
              importDeclaration();
              break;
            }

            case JavaParser::SEMI: {
              setState(250);
              match(JavaParser::SEMI);
              break;
            }

          default:
            throw NoViableAltException(this);
          } 
        }
        setState(255);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
      }
      setState(260);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 1) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1)) & -1125457390829311) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & -8935141660702539773) != 0)) {
        setState(258);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case JavaParser::ABSTRACT:
          case JavaParser::CLASS:
          case JavaParser::ENUM:
          case JavaParser::FINAL:
          case JavaParser::INTERFACE:
          case JavaParser::PRIVATE:
          case JavaParser::PROTECTED:
          case JavaParser::PUBLIC:
          case JavaParser::STATIC:
          case JavaParser::STRICTFP:
          case JavaParser::MODULE:
          case JavaParser::OPEN:
          case JavaParser::REQUIRES:
          case JavaParser::EXPORTS:
          case JavaParser::OPENS:
          case JavaParser::TO:
          case JavaParser::USES:
          case JavaParser::PROVIDES:
          case JavaParser::WITH:
          case JavaParser::TRANSITIVE:
          case JavaParser::VAR:
          case JavaParser::YIELD:
          case JavaParser::RECORD:
          case JavaParser::SEALED:
          case JavaParser::PERMITS:
          case JavaParser::NON_SEALED:
          case JavaParser::AT:
          case JavaParser::IDENTIFIER: {
            setState(256);
            typeDeclaration();
            break;
          }

          case JavaParser::SEMI: {
            setState(257);
            match(JavaParser::SEMI);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(262);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(263);
      moduleDeclaration();
      setState(264);
      match(JavaParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PackageDeclarationContext ------------------------------------------------------------------

JavaParser::PackageDeclarationContext::PackageDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::PackageDeclarationContext::PACKAGE() {
  return getToken(JavaParser::PACKAGE, 0);
}

JavaParser::QualifiedNameContext* JavaParser::PackageDeclarationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

tree::TerminalNode* JavaParser::PackageDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::PackageDeclarationContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::PackageDeclarationContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::PackageDeclarationContext::getRuleIndex() const {
  return JavaParser::RulePackageDeclaration;
}


std::any JavaParser::PackageDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPackageDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::PackageDeclarationContext* JavaParser::packageDeclaration() {
  PackageDeclarationContext *_localctx = _tracker.createInstance<PackageDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 2, JavaParser::RulePackageDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(271);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::AT

    || _la == JavaParser::IDENTIFIER) {
      setState(268);
      annotation();
      setState(273);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(274);
    match(JavaParser::PACKAGE);
    setState(275);
    qualifiedName();
    setState(276);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportDeclarationContext ------------------------------------------------------------------

JavaParser::ImportDeclarationContext::ImportDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::IMPORT() {
  return getToken(JavaParser::IMPORT, 0);
}

JavaParser::QualifiedNameContext* JavaParser::ImportDeclarationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

tree::TerminalNode* JavaParser::ImportDeclarationContext::MUL() {
  return getToken(JavaParser::MUL, 0);
}


size_t JavaParser::ImportDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleImportDeclaration;
}


std::any JavaParser::ImportDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitImportDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ImportDeclarationContext* JavaParser::importDeclaration() {
  ImportDeclarationContext *_localctx = _tracker.createInstance<ImportDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 4, JavaParser::RuleImportDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(278);
    match(JavaParser::IMPORT);
    setState(280);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::STATIC) {
      setState(279);
      match(JavaParser::STATIC);
    }
    setState(282);
    qualifiedName();
    setState(285);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::DOT) {
      setState(283);
      match(JavaParser::DOT);
      setState(284);
      antlrcpp::downCast<ImportDeclarationContext *>(_localctx)->importAll = match(JavaParser::MUL);
    }
    setState(287);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeDeclarationContext ------------------------------------------------------------------

JavaParser::TypeDeclarationContext::TypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassDeclarationContext* JavaParser::TypeDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::TypeDeclarationContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::TypeDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::TypeDeclarationContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::TypeDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}

std::vector<JavaParser::ClassOrInterfaceModifierContext *> JavaParser::TypeDeclarationContext::classOrInterfaceModifier() {
  return getRuleContexts<JavaParser::ClassOrInterfaceModifierContext>();
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::TypeDeclarationContext::classOrInterfaceModifier(size_t i) {
  return getRuleContext<JavaParser::ClassOrInterfaceModifierContext>(i);
}


size_t JavaParser::TypeDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleTypeDeclaration;
}


std::any JavaParser::TypeDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeDeclarationContext* JavaParser::typeDeclaration() {
  TypeDeclarationContext *_localctx = _tracker.createInstance<TypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 6, JavaParser::RuleTypeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(292);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(289);
        classOrInterfaceModifier(); 
      }
      setState(294);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    }
    setState(300);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::CLASS: {
        setState(295);
        classDeclaration();
        break;
      }

      case JavaParser::ENUM: {
        setState(296);
        enumDeclaration();
        break;
      }

      case JavaParser::INTERFACE: {
        setState(297);
        interfaceDeclaration();
        break;
      }

      case JavaParser::AT: {
        setState(298);
        annotationTypeDeclaration();
        break;
      }

      case JavaParser::RECORD: {
        setState(299);
        recordDeclaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModifierContext ------------------------------------------------------------------

JavaParser::ModifierContext::ModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::ModifierContext::classOrInterfaceModifier() {
  return getRuleContext<JavaParser::ClassOrInterfaceModifierContext>(0);
}

tree::TerminalNode* JavaParser::ModifierContext::NATIVE() {
  return getToken(JavaParser::NATIVE, 0);
}

tree::TerminalNode* JavaParser::ModifierContext::SYNCHRONIZED() {
  return getToken(JavaParser::SYNCHRONIZED, 0);
}

tree::TerminalNode* JavaParser::ModifierContext::TRANSIENT() {
  return getToken(JavaParser::TRANSIENT, 0);
}

tree::TerminalNode* JavaParser::ModifierContext::VOLATILE() {
  return getToken(JavaParser::VOLATILE, 0);
}


size_t JavaParser::ModifierContext::getRuleIndex() const {
  return JavaParser::RuleModifier;
}


std::any JavaParser::ModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitModifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ModifierContext* JavaParser::modifier() {
  ModifierContext *_localctx = _tracker.createInstance<ModifierContext>(_ctx, getState());
  enterRule(_localctx, 8, JavaParser::RuleModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(307);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::FINAL:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::NON_SEALED:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(302);
        classOrInterfaceModifier();
        break;
      }

      case JavaParser::NATIVE: {
        enterOuterAlt(_localctx, 2);
        setState(303);
        match(JavaParser::NATIVE);
        break;
      }

      case JavaParser::SYNCHRONIZED: {
        enterOuterAlt(_localctx, 3);
        setState(304);
        match(JavaParser::SYNCHRONIZED);
        break;
      }

      case JavaParser::TRANSIENT: {
        enterOuterAlt(_localctx, 4);
        setState(305);
        match(JavaParser::TRANSIENT);
        break;
      }

      case JavaParser::VOLATILE: {
        enterOuterAlt(_localctx, 5);
        setState(306);
        match(JavaParser::VOLATILE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrInterfaceModifierContext ------------------------------------------------------------------

JavaParser::ClassOrInterfaceModifierContext::ClassOrInterfaceModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::ClassOrInterfaceModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::PUBLIC() {
  return getToken(JavaParser::PUBLIC, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::PROTECTED() {
  return getToken(JavaParser::PROTECTED, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::PRIVATE() {
  return getToken(JavaParser::PRIVATE, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::ABSTRACT() {
  return getToken(JavaParser::ABSTRACT, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::FINAL() {
  return getToken(JavaParser::FINAL, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::STRICTFP() {
  return getToken(JavaParser::STRICTFP, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::SEALED() {
  return getToken(JavaParser::SEALED, 0);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceModifierContext::NON_SEALED() {
  return getToken(JavaParser::NON_SEALED, 0);
}


size_t JavaParser::ClassOrInterfaceModifierContext::getRuleIndex() const {
  return JavaParser::RuleClassOrInterfaceModifier;
}


std::any JavaParser::ClassOrInterfaceModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassOrInterfaceModifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::classOrInterfaceModifier() {
  ClassOrInterfaceModifierContext *_localctx = _tracker.createInstance<ClassOrInterfaceModifierContext>(_ctx, getState());
  enterRule(_localctx, 10, JavaParser::RuleClassOrInterfaceModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(319);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(309);
      annotation();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(310);
      match(JavaParser::PUBLIC);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(311);
      match(JavaParser::PROTECTED);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(312);
      match(JavaParser::PRIVATE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(313);
      match(JavaParser::STATIC);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(314);
      match(JavaParser::ABSTRACT);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(315);
      match(JavaParser::FINAL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(316);
      match(JavaParser::STRICTFP);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(317);
      match(JavaParser::SEALED);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(318);
      match(JavaParser::NON_SEALED);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableModifierContext ------------------------------------------------------------------

JavaParser::VariableModifierContext::VariableModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::VariableModifierContext::FINAL() {
  return getToken(JavaParser::FINAL, 0);
}

JavaParser::AnnotationContext* JavaParser::VariableModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}


size_t JavaParser::VariableModifierContext::getRuleIndex() const {
  return JavaParser::RuleVariableModifier;
}


std::any JavaParser::VariableModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitVariableModifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::VariableModifierContext* JavaParser::variableModifier() {
  VariableModifierContext *_localctx = _tracker.createInstance<VariableModifierContext>(_ctx, getState());
  enterRule(_localctx, 12, JavaParser::RuleVariableModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(323);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::FINAL: {
        enterOuterAlt(_localctx, 1);
        setState(321);
        match(JavaParser::FINAL);
        break;
      }

      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(322);
        annotation();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDeclarationContext ------------------------------------------------------------------

JavaParser::ClassDeclarationContext::ClassDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassDeclarationContext::CLASS() {
  return getToken(JavaParser::CLASS, 0);
}

JavaParser::IdentifierContext* JavaParser::ClassDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ClassDeclarationContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::ClassDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

tree::TerminalNode* JavaParser::ClassDeclarationContext::EXTENDS() {
  return getToken(JavaParser::EXTENDS, 0);
}

tree::TerminalNode* JavaParser::ClassDeclarationContext::IMPLEMENTS() {
  return getToken(JavaParser::IMPLEMENTS, 0);
}

tree::TerminalNode* JavaParser::ClassDeclarationContext::PERMITS() {
  return getToken(JavaParser::PERMITS, 0);
}

std::vector<JavaParser::TypeListContext *> JavaParser::ClassDeclarationContext::typeList() {
  return getRuleContexts<JavaParser::TypeListContext>();
}

JavaParser::TypeListContext* JavaParser::ClassDeclarationContext::typeList(size_t i) {
  return getRuleContext<JavaParser::TypeListContext>(i);
}

JavaParser::TypeTypeContext* JavaParser::ClassDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}


size_t JavaParser::ClassDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleClassDeclaration;
}


std::any JavaParser::ClassDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassDeclarationContext* JavaParser::classDeclaration() {
  ClassDeclarationContext *_localctx = _tracker.createInstance<ClassDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 14, JavaParser::RuleClassDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(325);
    match(JavaParser::CLASS);
    setState(326);
    identifier();
    setState(328);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(327);
      typeParameters();
    }
    setState(332);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(330);
      match(JavaParser::EXTENDS);
      setState(331);
      antlrcpp::downCast<ClassDeclarationContext *>(_localctx)->super = typeType();
    }
    setState(336);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(334);
      match(JavaParser::IMPLEMENTS);
      setState(335);
      antlrcpp::downCast<ClassDeclarationContext *>(_localctx)->interface = typeList();
    }
    setState(340);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::PERMITS) {
      setState(338);
      match(JavaParser::PERMITS);
      setState(339);
      typeList();
    }
    setState(342);
    classBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParametersContext ------------------------------------------------------------------

JavaParser::TypeParametersContext::TypeParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeParametersContext::LT() {
  return getToken(JavaParser::LT, 0);
}

std::vector<JavaParser::TypeParameterContext *> JavaParser::TypeParametersContext::typeParameter() {
  return getRuleContexts<JavaParser::TypeParameterContext>();
}

JavaParser::TypeParameterContext* JavaParser::TypeParametersContext::typeParameter(size_t i) {
  return getRuleContext<JavaParser::TypeParameterContext>(i);
}

tree::TerminalNode* JavaParser::TypeParametersContext::GT() {
  return getToken(JavaParser::GT, 0);
}

std::vector<tree::TerminalNode *> JavaParser::TypeParametersContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::TypeParametersContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::TypeParametersContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameters;
}


std::any JavaParser::TypeParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeParameters(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeParametersContext* JavaParser::typeParameters() {
  TypeParametersContext *_localctx = _tracker.createInstance<TypeParametersContext>(_ctx, getState());
  enterRule(_localctx, 16, JavaParser::RuleTypeParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(344);
    match(JavaParser::LT);
    setState(345);
    typeParameter();
    setState(350);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(346);
      match(JavaParser::COMMA);
      setState(347);
      typeParameter();
      setState(352);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(353);
    match(JavaParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterContext ------------------------------------------------------------------

JavaParser::TypeParameterContext::TypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::TypeParameterContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeParameterContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeParameterContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

tree::TerminalNode* JavaParser::TypeParameterContext::EXTENDS() {
  return getToken(JavaParser::EXTENDS, 0);
}

JavaParser::TypeBoundContext* JavaParser::TypeParameterContext::typeBound() {
  return getRuleContext<JavaParser::TypeBoundContext>(0);
}


size_t JavaParser::TypeParameterContext::getRuleIndex() const {
  return JavaParser::RuleTypeParameter;
}


std::any JavaParser::TypeParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeParameter(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeParameterContext* JavaParser::typeParameter() {
  TypeParameterContext *_localctx = _tracker.createInstance<TypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 18, JavaParser::RuleTypeParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(358);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(355);
        annotation(); 
      }
      setState(360);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    }
    setState(361);
    identifier();
    setState(370);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(362);
      match(JavaParser::EXTENDS);
      setState(366);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(363);
          annotation(); 
        }
        setState(368);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
      }
      setState(369);
      typeBound();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeBoundContext ------------------------------------------------------------------

JavaParser::TypeBoundContext::TypeBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::TypeTypeContext *> JavaParser::TypeBoundContext::typeType() {
  return getRuleContexts<JavaParser::TypeTypeContext>();
}

JavaParser::TypeTypeContext* JavaParser::TypeBoundContext::typeType(size_t i) {
  return getRuleContext<JavaParser::TypeTypeContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::TypeBoundContext::BITAND() {
  return getTokens(JavaParser::BITAND);
}

tree::TerminalNode* JavaParser::TypeBoundContext::BITAND(size_t i) {
  return getToken(JavaParser::BITAND, i);
}


size_t JavaParser::TypeBoundContext::getRuleIndex() const {
  return JavaParser::RuleTypeBound;
}


std::any JavaParser::TypeBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeBound(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeBoundContext* JavaParser::typeBound() {
  TypeBoundContext *_localctx = _tracker.createInstance<TypeBoundContext>(_ctx, getState());
  enterRule(_localctx, 20, JavaParser::RuleTypeBound);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(372);
    typeType();
    setState(377);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::BITAND) {
      setState(373);
      match(JavaParser::BITAND);
      setState(374);
      typeType();
      setState(379);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumDeclarationContext ------------------------------------------------------------------

JavaParser::EnumDeclarationContext::EnumDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::ENUM() {
  return getToken(JavaParser::ENUM, 0);
}

JavaParser::IdentifierContext* JavaParser::EnumDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::IMPLEMENTS() {
  return getToken(JavaParser::IMPLEMENTS, 0);
}

JavaParser::EnumConstantsContext* JavaParser::EnumDeclarationContext::enumConstants() {
  return getRuleContext<JavaParser::EnumConstantsContext>(0);
}

tree::TerminalNode* JavaParser::EnumDeclarationContext::COMMA() {
  return getToken(JavaParser::COMMA, 0);
}

JavaParser::EnumBodyDeclarationsContext* JavaParser::EnumDeclarationContext::enumBodyDeclarations() {
  return getRuleContext<JavaParser::EnumBodyDeclarationsContext>(0);
}

JavaParser::TypeListContext* JavaParser::EnumDeclarationContext::typeList() {
  return getRuleContext<JavaParser::TypeListContext>(0);
}


size_t JavaParser::EnumDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleEnumDeclaration;
}


std::any JavaParser::EnumDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitEnumDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::EnumDeclarationContext* JavaParser::enumDeclaration() {
  EnumDeclarationContext *_localctx = _tracker.createInstance<EnumDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 22, JavaParser::RuleEnumDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(380);
    match(JavaParser::ENUM);
    setState(381);
    identifier();
    setState(384);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(382);
      match(JavaParser::IMPLEMENTS);
      setState(383);
      antlrcpp::downCast<EnumDeclarationContext *>(_localctx)->interface = typeList();
    }
    setState(386);
    match(JavaParser::LBRACE);
    setState(388);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::AT

    || _la == JavaParser::IDENTIFIER) {
      setState(387);
      enumConstants();
    }
    setState(391);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(390);
      match(JavaParser::COMMA);
    }
    setState(394);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::SEMI) {
      setState(393);
      enumBodyDeclarations();
    }
    setState(396);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantsContext ------------------------------------------------------------------

JavaParser::EnumConstantsContext::EnumConstantsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::EnumConstantContext *> JavaParser::EnumConstantsContext::enumConstant() {
  return getRuleContexts<JavaParser::EnumConstantContext>();
}

JavaParser::EnumConstantContext* JavaParser::EnumConstantsContext::enumConstant(size_t i) {
  return getRuleContext<JavaParser::EnumConstantContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::EnumConstantsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::EnumConstantsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::EnumConstantsContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstants;
}


std::any JavaParser::EnumConstantsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitEnumConstants(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::EnumConstantsContext* JavaParser::enumConstants() {
  EnumConstantsContext *_localctx = _tracker.createInstance<EnumConstantsContext>(_ctx, getState());
  enterRule(_localctx, 24, JavaParser::RuleEnumConstants);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(398);
    enumConstant();
    setState(403);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(399);
        match(JavaParser::COMMA);
        setState(400);
        enumConstant(); 
      }
      setState(405);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumConstantContext ------------------------------------------------------------------

JavaParser::EnumConstantContext::EnumConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::EnumConstantContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::EnumConstantContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::EnumConstantContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::ArgumentsContext* JavaParser::EnumConstantContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::EnumConstantContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}


size_t JavaParser::EnumConstantContext::getRuleIndex() const {
  return JavaParser::RuleEnumConstant;
}


std::any JavaParser::EnumConstantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitEnumConstant(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::EnumConstantContext* JavaParser::enumConstant() {
  EnumConstantContext *_localctx = _tracker.createInstance<EnumConstantContext>(_ctx, getState());
  enterRule(_localctx, 26, JavaParser::RuleEnumConstant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(409);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(406);
        annotation(); 
      }
      setState(411);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
    }
    setState(412);
    identifier();
    setState(414);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LPAREN) {
      setState(413);
      arguments();
    }
    setState(417);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LBRACE) {
      setState(416);
      classBody();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumBodyDeclarationsContext ------------------------------------------------------------------

JavaParser::EnumBodyDeclarationsContext::EnumBodyDeclarationsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::EnumBodyDeclarationsContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::EnumBodyDeclarationsContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::EnumBodyDeclarationsContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::EnumBodyDeclarationsContext::getRuleIndex() const {
  return JavaParser::RuleEnumBodyDeclarations;
}


std::any JavaParser::EnumBodyDeclarationsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitEnumBodyDeclarations(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::EnumBodyDeclarationsContext* JavaParser::enumBodyDeclarations() {
  EnumBodyDeclarationsContext *_localctx = _tracker.createInstance<EnumBodyDeclarationsContext>(_ctx, getState());
  enterRule(_localctx, 28, JavaParser::RuleEnumBodyDeclarations);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(419);
    match(JavaParser::SEMI);
    setState(423);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -665791937994347) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685729789) != 0)) {
      setState(420);
      classBodyDeclaration();
      setState(425);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceDeclarationContext::InterfaceDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::InterfaceDeclarationContext::INTERFACE() {
  return getToken(JavaParser::INTERFACE, 0);
}

JavaParser::IdentifierContext* JavaParser::InterfaceDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::InterfaceBodyContext* JavaParser::InterfaceDeclarationContext::interfaceBody() {
  return getRuleContext<JavaParser::InterfaceBodyContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::InterfaceDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceDeclarationContext::EXTENDS() {
  return getToken(JavaParser::EXTENDS, 0);
}

tree::TerminalNode* JavaParser::InterfaceDeclarationContext::PERMITS() {
  return getToken(JavaParser::PERMITS, 0);
}

std::vector<JavaParser::TypeListContext *> JavaParser::InterfaceDeclarationContext::typeList() {
  return getRuleContexts<JavaParser::TypeListContext>();
}

JavaParser::TypeListContext* JavaParser::InterfaceDeclarationContext::typeList(size_t i) {
  return getRuleContext<JavaParser::TypeListContext>(i);
}


size_t JavaParser::InterfaceDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceDeclaration;
}


std::any JavaParser::InterfaceDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceDeclarationContext* JavaParser::interfaceDeclaration() {
  InterfaceDeclarationContext *_localctx = _tracker.createInstance<InterfaceDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 30, JavaParser::RuleInterfaceDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(426);
    match(JavaParser::INTERFACE);
    setState(427);
    identifier();
    setState(429);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(428);
      typeParameters();
    }
    setState(433);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::EXTENDS) {
      setState(431);
      match(JavaParser::EXTENDS);
      setState(432);
      antlrcpp::downCast<InterfaceDeclarationContext *>(_localctx)->super = typeList();
    }
    setState(437);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::PERMITS) {
      setState(435);
      match(JavaParser::PERMITS);
      setState(436);
      typeList();
    }
    setState(439);
    interfaceBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyContext ------------------------------------------------------------------

JavaParser::ClassBodyContext::ClassBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ClassBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::ClassBodyContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::ClassBodyContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::ClassBodyContext::getRuleIndex() const {
  return JavaParser::RuleClassBody;
}


std::any JavaParser::ClassBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassBodyContext* JavaParser::classBody() {
  ClassBodyContext *_localctx = _tracker.createInstance<ClassBodyContext>(_ctx, getState());
  enterRule(_localctx, 32, JavaParser::RuleClassBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(441);
    match(JavaParser::LBRACE);
    setState(445);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -665791937994347) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685729789) != 0)) {
      setState(442);
      classBodyDeclaration();
      setState(447);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(448);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBodyContext ------------------------------------------------------------------

JavaParser::InterfaceBodyContext::InterfaceBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::InterfaceBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::InterfaceBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::InterfaceBodyDeclarationContext *> JavaParser::InterfaceBodyContext::interfaceBodyDeclaration() {
  return getRuleContexts<JavaParser::InterfaceBodyDeclarationContext>();
}

JavaParser::InterfaceBodyDeclarationContext* JavaParser::InterfaceBodyContext::interfaceBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::InterfaceBodyDeclarationContext>(i);
}


size_t JavaParser::InterfaceBodyContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceBody;
}


std::any JavaParser::InterfaceBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceBodyContext* JavaParser::interfaceBody() {
  InterfaceBodyContext *_localctx = _tracker.createInstance<InterfaceBodyContext>(_ctx, getState());
  enterRule(_localctx, 34, JavaParser::RuleInterfaceBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(450);
    match(JavaParser::LBRACE);
    setState(454);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -665791937992299) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685762557) != 0)) {
      setState(451);
      interfaceBodyDeclaration();
      setState(456);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(457);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassBodyDeclarationContext ------------------------------------------------------------------

JavaParser::ClassBodyDeclarationContext::ClassBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ClassBodyDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::BlockContext* JavaParser::ClassBodyDeclarationContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::ClassBodyDeclarationContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

JavaParser::MemberDeclarationContext* JavaParser::ClassBodyDeclarationContext::memberDeclaration() {
  return getRuleContext<JavaParser::MemberDeclarationContext>(0);
}

std::vector<JavaParser::ModifierContext *> JavaParser::ClassBodyDeclarationContext::modifier() {
  return getRuleContexts<JavaParser::ModifierContext>();
}

JavaParser::ModifierContext* JavaParser::ClassBodyDeclarationContext::modifier(size_t i) {
  return getRuleContext<JavaParser::ModifierContext>(i);
}


size_t JavaParser::ClassBodyDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleClassBodyDeclaration;
}


std::any JavaParser::ClassBodyDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassBodyDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassBodyDeclarationContext* JavaParser::classBodyDeclaration() {
  ClassBodyDeclarationContext *_localctx = _tracker.createInstance<ClassBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 36, JavaParser::RuleClassBodyDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(471);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(459);
      match(JavaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(461);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::STATIC) {
        setState(460);
        match(JavaParser::STATIC);
      }
      setState(463);
      block();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(467);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(464);
          modifier(); 
        }
        setState(469);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx);
      }
      setState(470);
      memberDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberDeclarationContext ------------------------------------------------------------------

JavaParser::MemberDeclarationContext::MemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::RecordDeclarationContext* JavaParser::MemberDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}

JavaParser::MethodDeclarationContext* JavaParser::MemberDeclarationContext::methodDeclaration() {
  return getRuleContext<JavaParser::MethodDeclarationContext>(0);
}

JavaParser::FieldDeclarationContext* JavaParser::MemberDeclarationContext::fieldDeclaration() {
  return getRuleContext<JavaParser::FieldDeclarationContext>(0);
}

JavaParser::ConstructorDeclarationContext* JavaParser::MemberDeclarationContext::constructorDeclaration() {
  return getRuleContext<JavaParser::ConstructorDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::MemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::MemberDeclarationContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::MemberDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::MemberDeclarationContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}


size_t JavaParser::MemberDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleMemberDeclaration;
}


std::any JavaParser::MemberDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMemberDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::MemberDeclarationContext* JavaParser::memberDeclaration() {
  MemberDeclarationContext *_localctx = _tracker.createInstance<MemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 38, JavaParser::RuleMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(481);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(473);
      recordDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(474);
      methodDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(475);
      fieldDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(476);
      constructorDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(477);
      interfaceDeclaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(478);
      annotationTypeDeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(479);
      classDeclaration();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(480);
      enumDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodDeclarationContext ------------------------------------------------------------------

JavaParser::MethodDeclarationContext::MethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeOrVoidContext* JavaParser::MethodDeclarationContext::typeTypeOrVoid() {
  return getRuleContext<JavaParser::TypeTypeOrVoidContext>(0);
}

JavaParser::IdentifierContext* JavaParser::MethodDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::FormalParametersContext* JavaParser::MethodDeclarationContext::formalParameters() {
  return getRuleContext<JavaParser::FormalParametersContext>(0);
}

JavaParser::MethodBodyContext* JavaParser::MethodDeclarationContext::methodBody() {
  return getRuleContext<JavaParser::MethodBodyContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::MethodDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::MethodDeclarationContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::MethodDeclarationContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::MethodDeclarationContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::MethodDeclarationContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}

tree::TerminalNode* JavaParser::MethodDeclarationContext::THROWS() {
  return getToken(JavaParser::THROWS, 0);
}

JavaParser::QualifiedNameListContext* JavaParser::MethodDeclarationContext::qualifiedNameList() {
  return getRuleContext<JavaParser::QualifiedNameListContext>(0);
}


size_t JavaParser::MethodDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleMethodDeclaration;
}


std::any JavaParser::MethodDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMethodDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::MethodDeclarationContext* JavaParser::methodDeclaration() {
  MethodDeclarationContext *_localctx = _tracker.createInstance<MethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 40, JavaParser::RuleMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(484);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(483);
      typeParameters();
    }
    setState(486);
    typeTypeOrVoid();
    setState(487);
    identifier();
    setState(488);
    formalParameters();
    setState(493);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(489);
      match(JavaParser::LBRACK);
      setState(490);
      match(JavaParser::RBRACK);
      setState(495);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(498);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::THROWS) {
      setState(496);
      match(JavaParser::THROWS);
      setState(497);
      qualifiedNameList();
    }
    setState(500);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodBodyContext ------------------------------------------------------------------

JavaParser::MethodBodyContext::MethodBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::MethodBodyContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

tree::TerminalNode* JavaParser::MethodBodyContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::MethodBodyContext::getRuleIndex() const {
  return JavaParser::RuleMethodBody;
}


std::any JavaParser::MethodBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMethodBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::MethodBodyContext* JavaParser::methodBody() {
  MethodBodyContext *_localctx = _tracker.createInstance<MethodBodyContext>(_ctx, getState());
  enterRule(_localctx, 42, JavaParser::RuleMethodBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(504);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(502);
        block();
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(503);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeTypeOrVoidContext ------------------------------------------------------------------

JavaParser::TypeTypeOrVoidContext::TypeTypeOrVoidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::TypeTypeOrVoidContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::TypeTypeOrVoidContext::VOID() {
  return getToken(JavaParser::VOID, 0);
}


size_t JavaParser::TypeTypeOrVoidContext::getRuleIndex() const {
  return JavaParser::RuleTypeTypeOrVoid;
}


std::any JavaParser::TypeTypeOrVoidContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeTypeOrVoid(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeTypeOrVoidContext* JavaParser::typeTypeOrVoid() {
  TypeTypeOrVoidContext *_localctx = _tracker.createInstance<TypeTypeOrVoidContext>(_ctx, getState());
  enterRule(_localctx, 44, JavaParser::RuleTypeTypeOrVoid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(508);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(506);
        typeType();
        break;
      }

      case JavaParser::VOID: {
        enterOuterAlt(_localctx, 2);
        setState(507);
        match(JavaParser::VOID);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorDeclarationContext ------------------------------------------------------------------

JavaParser::ConstructorDeclarationContext::ConstructorDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ConstructorDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::FormalParametersContext* JavaParser::ConstructorDeclarationContext::formalParameters() {
  return getRuleContext<JavaParser::FormalParametersContext>(0);
}

JavaParser::BlockContext* JavaParser::ConstructorDeclarationContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::ConstructorDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

tree::TerminalNode* JavaParser::ConstructorDeclarationContext::THROWS() {
  return getToken(JavaParser::THROWS, 0);
}

JavaParser::QualifiedNameListContext* JavaParser::ConstructorDeclarationContext::qualifiedNameList() {
  return getRuleContext<JavaParser::QualifiedNameListContext>(0);
}


size_t JavaParser::ConstructorDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleConstructorDeclaration;
}


std::any JavaParser::ConstructorDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitConstructorDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ConstructorDeclarationContext* JavaParser::constructorDeclaration() {
  ConstructorDeclarationContext *_localctx = _tracker.createInstance<ConstructorDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 46, JavaParser::RuleConstructorDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(511);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(510);
      typeParameters();
    }
    setState(513);
    identifier();
    setState(514);
    formalParameters();
    setState(517);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::THROWS) {
      setState(515);
      match(JavaParser::THROWS);
      setState(516);
      qualifiedNameList();
    }
    setState(519);
    antlrcpp::downCast<ConstructorDeclarationContext *>(_localctx)->constructorBody = block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldDeclarationContext ------------------------------------------------------------------

JavaParser::FieldDeclarationContext::FieldDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::FieldDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::VariableDeclaratorsContext* JavaParser::FieldDeclarationContext::variableDeclarators() {
  return getRuleContext<JavaParser::VariableDeclaratorsContext>(0);
}

tree::TerminalNode* JavaParser::FieldDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::FieldDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleFieldDeclaration;
}


std::any JavaParser::FieldDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFieldDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FieldDeclarationContext* JavaParser::fieldDeclaration() {
  FieldDeclarationContext *_localctx = _tracker.createInstance<FieldDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 48, JavaParser::RuleFieldDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(521);
    typeType();
    setState(522);
    variableDeclarators();
    setState(523);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceBodyDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceBodyDeclarationContext::InterfaceBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InterfaceMemberDeclarationContext* JavaParser::InterfaceBodyDeclarationContext::interfaceMemberDeclaration() {
  return getRuleContext<JavaParser::InterfaceMemberDeclarationContext>(0);
}

std::vector<JavaParser::ModifierContext *> JavaParser::InterfaceBodyDeclarationContext::modifier() {
  return getRuleContexts<JavaParser::ModifierContext>();
}

JavaParser::ModifierContext* JavaParser::InterfaceBodyDeclarationContext::modifier(size_t i) {
  return getRuleContext<JavaParser::ModifierContext>(i);
}

tree::TerminalNode* JavaParser::InterfaceBodyDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::InterfaceBodyDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceBodyDeclaration;
}


std::any JavaParser::InterfaceBodyDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceBodyDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceBodyDeclarationContext* JavaParser::interfaceBodyDeclaration() {
  InterfaceBodyDeclarationContext *_localctx = _tracker.createInstance<InterfaceBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 50, JavaParser::RuleInterfaceBodyDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(533);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::CLASS:
      case JavaParser::DEFAULT:
      case JavaParser::DOUBLE:
      case JavaParser::ENUM:
      case JavaParser::FINAL:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::INTERFACE:
      case JavaParser::LONG:
      case JavaParser::NATIVE:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::SHORT:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::SYNCHRONIZED:
      case JavaParser::TRANSIENT:
      case JavaParser::VOID:
      case JavaParser::VOLATILE:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::NON_SEALED:
      case JavaParser::LT:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(528);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(525);
            modifier(); 
          }
          setState(530);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx);
        }
        setState(531);
        interfaceMemberDeclaration();
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(532);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMemberDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceMemberDeclarationContext::InterfaceMemberDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ConstDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::constDeclaration() {
  return getRuleContext<JavaParser::ConstDeclarationContext>(0);
}

JavaParser::InterfaceMethodDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::interfaceMethodDeclaration() {
  return getRuleContext<JavaParser::InterfaceMethodDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::ClassDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::InterfaceMemberDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}


size_t JavaParser::InterfaceMemberDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMemberDeclaration;
}


std::any JavaParser::InterfaceMemberDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceMemberDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceMemberDeclarationContext* JavaParser::interfaceMemberDeclaration() {
  InterfaceMemberDeclarationContext *_localctx = _tracker.createInstance<InterfaceMemberDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 52, JavaParser::RuleInterfaceMemberDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(542);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(535);
      constDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(536);
      interfaceMethodDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(537);
      interfaceDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(538);
      annotationTypeDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(539);
      classDeclaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(540);
      enumDeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(541);
      recordDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstDeclarationContext ------------------------------------------------------------------

JavaParser::ConstDeclarationContext::ConstDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::ConstDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

std::vector<JavaParser::ConstantDeclaratorContext *> JavaParser::ConstDeclarationContext::constantDeclarator() {
  return getRuleContexts<JavaParser::ConstantDeclaratorContext>();
}

JavaParser::ConstantDeclaratorContext* JavaParser::ConstDeclarationContext::constantDeclarator(size_t i) {
  return getRuleContext<JavaParser::ConstantDeclaratorContext>(i);
}

tree::TerminalNode* JavaParser::ConstDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> JavaParser::ConstDeclarationContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ConstDeclarationContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ConstDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleConstDeclaration;
}


std::any JavaParser::ConstDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitConstDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ConstDeclarationContext* JavaParser::constDeclaration() {
  ConstDeclarationContext *_localctx = _tracker.createInstance<ConstDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 54, JavaParser::RuleConstDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(544);
    typeType();
    setState(545);
    constantDeclarator();
    setState(550);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(546);
      match(JavaParser::COMMA);
      setState(547);
      constantDeclarator();
      setState(552);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(553);
    match(JavaParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantDeclaratorContext ------------------------------------------------------------------

JavaParser::ConstantDeclaratorContext::ConstantDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ConstantDeclaratorContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ConstantDeclaratorContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::VariableInitializerContext* JavaParser::ConstantDeclaratorContext::variableInitializer() {
  return getRuleContext<JavaParser::VariableInitializerContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::ConstantDeclaratorContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::ConstantDeclaratorContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::ConstantDeclaratorContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::ConstantDeclaratorContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}


size_t JavaParser::ConstantDeclaratorContext::getRuleIndex() const {
  return JavaParser::RuleConstantDeclarator;
}


std::any JavaParser::ConstantDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitConstantDeclarator(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ConstantDeclaratorContext* JavaParser::constantDeclarator() {
  ConstantDeclaratorContext *_localctx = _tracker.createInstance<ConstantDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 56, JavaParser::RuleConstantDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(555);
    identifier();
    setState(560);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(556);
      match(JavaParser::LBRACK);
      setState(557);
      match(JavaParser::RBRACK);
      setState(562);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(563);
    match(JavaParser::ASSIGN);
    setState(564);
    variableInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceMethodDeclarationContext::InterfaceMethodDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::InterfaceCommonBodyDeclarationContext* JavaParser::InterfaceMethodDeclarationContext::interfaceCommonBodyDeclaration() {
  return getRuleContext<JavaParser::InterfaceCommonBodyDeclarationContext>(0);
}

std::vector<JavaParser::InterfaceMethodModifierContext *> JavaParser::InterfaceMethodDeclarationContext::interfaceMethodModifier() {
  return getRuleContexts<JavaParser::InterfaceMethodModifierContext>();
}

JavaParser::InterfaceMethodModifierContext* JavaParser::InterfaceMethodDeclarationContext::interfaceMethodModifier(size_t i) {
  return getRuleContext<JavaParser::InterfaceMethodModifierContext>(i);
}

JavaParser::TypeParametersContext* JavaParser::InterfaceMethodDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}


size_t JavaParser::InterfaceMethodDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMethodDeclaration;
}


std::any JavaParser::InterfaceMethodDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceMethodDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceMethodDeclarationContext* JavaParser::interfaceMethodDeclaration() {
  InterfaceMethodDeclarationContext *_localctx = _tracker.createInstance<InterfaceMethodDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 58, JavaParser::RuleInterfaceMethodDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(569);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(566);
        interfaceMethodModifier(); 
      }
      setState(571);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
    setState(573);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(572);
      typeParameters();
    }
    setState(575);
    interfaceCommonBodyDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceMethodModifierContext ------------------------------------------------------------------

JavaParser::InterfaceMethodModifierContext::InterfaceMethodModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationContext* JavaParser::InterfaceMethodModifierContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::PUBLIC() {
  return getToken(JavaParser::PUBLIC, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::ABSTRACT() {
  return getToken(JavaParser::ABSTRACT, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}

tree::TerminalNode* JavaParser::InterfaceMethodModifierContext::STRICTFP() {
  return getToken(JavaParser::STRICTFP, 0);
}


size_t JavaParser::InterfaceMethodModifierContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceMethodModifier;
}


std::any JavaParser::InterfaceMethodModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceMethodModifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceMethodModifierContext* JavaParser::interfaceMethodModifier() {
  InterfaceMethodModifierContext *_localctx = _tracker.createInstance<InterfaceMethodModifierContext>(_ctx, getState());
  enterRule(_localctx, 60, JavaParser::RuleInterfaceMethodModifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(583);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(577);
        annotation();
        break;
      }

      case JavaParser::PUBLIC: {
        enterOuterAlt(_localctx, 2);
        setState(578);
        match(JavaParser::PUBLIC);
        break;
      }

      case JavaParser::ABSTRACT: {
        enterOuterAlt(_localctx, 3);
        setState(579);
        match(JavaParser::ABSTRACT);
        break;
      }

      case JavaParser::DEFAULT: {
        enterOuterAlt(_localctx, 4);
        setState(580);
        match(JavaParser::DEFAULT);
        break;
      }

      case JavaParser::STATIC: {
        enterOuterAlt(_localctx, 5);
        setState(581);
        match(JavaParser::STATIC);
        break;
      }

      case JavaParser::STRICTFP: {
        enterOuterAlt(_localctx, 6);
        setState(582);
        match(JavaParser::STRICTFP);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InterfaceCommonBodyDeclarationContext ------------------------------------------------------------------

JavaParser::InterfaceCommonBodyDeclarationContext::InterfaceCommonBodyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeOrVoidContext* JavaParser::InterfaceCommonBodyDeclarationContext::typeTypeOrVoid() {
  return getRuleContext<JavaParser::TypeTypeOrVoidContext>(0);
}

JavaParser::IdentifierContext* JavaParser::InterfaceCommonBodyDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::FormalParametersContext* JavaParser::InterfaceCommonBodyDeclarationContext::formalParameters() {
  return getRuleContext<JavaParser::FormalParametersContext>(0);
}

JavaParser::MethodBodyContext* JavaParser::InterfaceCommonBodyDeclarationContext::methodBody() {
  return getRuleContext<JavaParser::MethodBodyContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::InterfaceCommonBodyDeclarationContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::InterfaceCommonBodyDeclarationContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::InterfaceCommonBodyDeclarationContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::InterfaceCommonBodyDeclarationContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::InterfaceCommonBodyDeclarationContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::InterfaceCommonBodyDeclarationContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}

tree::TerminalNode* JavaParser::InterfaceCommonBodyDeclarationContext::THROWS() {
  return getToken(JavaParser::THROWS, 0);
}

JavaParser::QualifiedNameListContext* JavaParser::InterfaceCommonBodyDeclarationContext::qualifiedNameList() {
  return getRuleContext<JavaParser::QualifiedNameListContext>(0);
}


size_t JavaParser::InterfaceCommonBodyDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleInterfaceCommonBodyDeclaration;
}


std::any JavaParser::InterfaceCommonBodyDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInterfaceCommonBodyDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InterfaceCommonBodyDeclarationContext* JavaParser::interfaceCommonBodyDeclaration() {
  InterfaceCommonBodyDeclarationContext *_localctx = _tracker.createInstance<InterfaceCommonBodyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 62, JavaParser::RuleInterfaceCommonBodyDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(588);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(585);
        annotation(); 
      }
      setState(590);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    }
    setState(591);
    typeTypeOrVoid();
    setState(592);
    identifier();
    setState(593);
    formalParameters();
    setState(598);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(594);
      match(JavaParser::LBRACK);
      setState(595);
      match(JavaParser::RBRACK);
      setState(600);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(603);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::THROWS) {
      setState(601);
      match(JavaParser::THROWS);
      setState(602);
      qualifiedNameList();
    }
    setState(605);
    methodBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorsContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorsContext::VariableDeclaratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::VariableDeclaratorContext *> JavaParser::VariableDeclaratorsContext::variableDeclarator() {
  return getRuleContexts<JavaParser::VariableDeclaratorContext>();
}

JavaParser::VariableDeclaratorContext* JavaParser::VariableDeclaratorsContext::variableDeclarator(size_t i) {
  return getRuleContext<JavaParser::VariableDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::VariableDeclaratorsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::VariableDeclaratorsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::VariableDeclaratorsContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclarators;
}


std::any JavaParser::VariableDeclaratorsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitVariableDeclarators(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::VariableDeclaratorsContext* JavaParser::variableDeclarators() {
  VariableDeclaratorsContext *_localctx = _tracker.createInstance<VariableDeclaratorsContext>(_ctx, getState());
  enterRule(_localctx, 64, JavaParser::RuleVariableDeclarators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(607);
    variableDeclarator();
    setState(612);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(608);
      match(JavaParser::COMMA);
      setState(609);
      variableDeclarator();
      setState(614);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorContext::VariableDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::VariableDeclaratorIdContext* JavaParser::VariableDeclaratorContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::VariableDeclaratorContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::VariableInitializerContext* JavaParser::VariableDeclaratorContext::variableInitializer() {
  return getRuleContext<JavaParser::VariableInitializerContext>(0);
}


size_t JavaParser::VariableDeclaratorContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclarator;
}


std::any JavaParser::VariableDeclaratorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitVariableDeclarator(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::VariableDeclaratorContext* JavaParser::variableDeclarator() {
  VariableDeclaratorContext *_localctx = _tracker.createInstance<VariableDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 66, JavaParser::RuleVariableDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(615);
    variableDeclaratorId();
    setState(618);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::ASSIGN) {
      setState(616);
      match(JavaParser::ASSIGN);
      setState(617);
      variableInitializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclaratorIdContext ------------------------------------------------------------------

JavaParser::VariableDeclaratorIdContext::VariableDeclaratorIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::VariableDeclaratorIdContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::VariableDeclaratorIdContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::VariableDeclaratorIdContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::VariableDeclaratorIdContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::VariableDeclaratorIdContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}


size_t JavaParser::VariableDeclaratorIdContext::getRuleIndex() const {
  return JavaParser::RuleVariableDeclaratorId;
}


std::any JavaParser::VariableDeclaratorIdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitVariableDeclaratorId(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::variableDeclaratorId() {
  VariableDeclaratorIdContext *_localctx = _tracker.createInstance<VariableDeclaratorIdContext>(_ctx, getState());
  enterRule(_localctx, 68, JavaParser::RuleVariableDeclaratorId);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(620);
    identifier();
    setState(625);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::LBRACK) {
      setState(621);
      match(JavaParser::LBRACK);
      setState(622);
      match(JavaParser::RBRACK);
      setState(627);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializerContext ------------------------------------------------------------------

JavaParser::VariableInitializerContext::VariableInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ArrayInitializerContext* JavaParser::VariableInitializerContext::arrayInitializer() {
  return getRuleContext<JavaParser::ArrayInitializerContext>(0);
}

JavaParser::ExpressionContext* JavaParser::VariableInitializerContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}


size_t JavaParser::VariableInitializerContext::getRuleIndex() const {
  return JavaParser::RuleVariableInitializer;
}


std::any JavaParser::VariableInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitVariableInitializer(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::VariableInitializerContext* JavaParser::variableInitializer() {
  VariableInitializerContext *_localctx = _tracker.createInstance<VariableInitializerContext>(_ctx, getState());
  enterRule(_localctx, 70, JavaParser::RuleVariableInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(630);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 1);
        setState(628);
        arrayInitializer();
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::SWITCH:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL:
      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL:
      case JavaParser::BOOL_LITERAL:
      case JavaParser::CHAR_LITERAL:
      case JavaParser::STRING_LITERAL:
      case JavaParser::TEXT_BLOCK:
      case JavaParser::NULL_LITERAL:
      case JavaParser::LPAREN:
      case JavaParser::LT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(629);
        expression(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayInitializerContext ------------------------------------------------------------------

JavaParser::ArrayInitializerContext::ArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ArrayInitializerContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ArrayInitializerContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::VariableInitializerContext *> JavaParser::ArrayInitializerContext::variableInitializer() {
  return getRuleContexts<JavaParser::VariableInitializerContext>();
}

JavaParser::VariableInitializerContext* JavaParser::ArrayInitializerContext::variableInitializer(size_t i) {
  return getRuleContext<JavaParser::VariableInitializerContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ArrayInitializerContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ArrayInitializerContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ArrayInitializerContext::getRuleIndex() const {
  return JavaParser::RuleArrayInitializer;
}


std::any JavaParser::ArrayInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitArrayInitializer(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ArrayInitializerContext* JavaParser::arrayInitializer() {
  ArrayInitializerContext *_localctx = _tracker.createInstance<ArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 72, JavaParser::RuleArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(632);
    match(JavaParser::LBRACE);
    setState(644);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2377900732130013183) != 0)) {
      setState(633);
      variableInitializer();
      setState(638);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(634);
          match(JavaParser::COMMA);
          setState(635);
          variableInitializer(); 
        }
        setState(640);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
      }
      setState(642);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COMMA) {
        setState(641);
        match(JavaParser::COMMA);
      }
    }
    setState(646);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrInterfaceTypeContext ------------------------------------------------------------------

JavaParser::ClassOrInterfaceTypeContext::ClassOrInterfaceTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::ClassOrInterfaceTypeContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::ClassOrInterfaceTypeContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<JavaParser::TypeArgumentsContext *> JavaParser::ClassOrInterfaceTypeContext::typeArguments() {
  return getRuleContexts<JavaParser::TypeArgumentsContext>();
}

JavaParser::TypeArgumentsContext* JavaParser::ClassOrInterfaceTypeContext::typeArguments(size_t i) {
  return getRuleContext<JavaParser::TypeArgumentsContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ClassOrInterfaceTypeContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::ClassOrInterfaceTypeContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}


size_t JavaParser::ClassOrInterfaceTypeContext::getRuleIndex() const {
  return JavaParser::RuleClassOrInterfaceType;
}


std::any JavaParser::ClassOrInterfaceTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassOrInterfaceType(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::classOrInterfaceType() {
  ClassOrInterfaceTypeContext *_localctx = _tracker.createInstance<ClassOrInterfaceTypeContext>(_ctx, getState());
  enterRule(_localctx, 74, JavaParser::RuleClassOrInterfaceType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(648);
    identifier();
    setState(650);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      setState(649);
      typeArguments();
      break;
    }

    default:
      break;
    }
    setState(659);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(652);
        match(JavaParser::DOT);
        setState(653);
        identifier();
        setState(655);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
        case 1: {
          setState(654);
          typeArguments();
          break;
        }

        default:
          break;
        } 
      }
      setState(661);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentContext ------------------------------------------------------------------

JavaParser::TypeArgumentContext::TypeArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::TypeArgumentContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::TypeArgumentContext::QUESTION() {
  return getToken(JavaParser::QUESTION, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeArgumentContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeArgumentContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

tree::TerminalNode* JavaParser::TypeArgumentContext::EXTENDS() {
  return getToken(JavaParser::EXTENDS, 0);
}

tree::TerminalNode* JavaParser::TypeArgumentContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}


size_t JavaParser::TypeArgumentContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgument;
}


std::any JavaParser::TypeArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeArgument(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeArgumentContext* JavaParser::typeArgument() {
  TypeArgumentContext *_localctx = _tracker.createInstance<TypeArgumentContext>(_ctx, getState());
  enterRule(_localctx, 76, JavaParser::RuleTypeArgument);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(674);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(662);
      typeType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(666);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(663);
        annotation();
        setState(668);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(669);
      match(JavaParser::QUESTION);
      setState(672);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::EXTENDS

      || _la == JavaParser::SUPER) {
        setState(670);
        _la = _input->LA(1);
        if (!(_la == JavaParser::EXTENDS

        || _la == JavaParser::SUPER)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(671);
        typeType();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameListContext ------------------------------------------------------------------

JavaParser::QualifiedNameListContext::QualifiedNameListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::QualifiedNameContext *> JavaParser::QualifiedNameListContext::qualifiedName() {
  return getRuleContexts<JavaParser::QualifiedNameContext>();
}

JavaParser::QualifiedNameContext* JavaParser::QualifiedNameListContext::qualifiedName(size_t i) {
  return getRuleContext<JavaParser::QualifiedNameContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::QualifiedNameListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::QualifiedNameListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::QualifiedNameListContext::getRuleIndex() const {
  return JavaParser::RuleQualifiedNameList;
}


std::any JavaParser::QualifiedNameListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitQualifiedNameList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::QualifiedNameListContext* JavaParser::qualifiedNameList() {
  QualifiedNameListContext *_localctx = _tracker.createInstance<QualifiedNameListContext>(_ctx, getState());
  enterRule(_localctx, 78, JavaParser::RuleQualifiedNameList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(676);
    qualifiedName();
    setState(681);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(677);
      match(JavaParser::COMMA);
      setState(678);
      qualifiedName();
      setState(683);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParametersContext ------------------------------------------------------------------

JavaParser::FormalParametersContext::FormalParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::FormalParametersContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::FormalParametersContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ReceiverParameterContext* JavaParser::FormalParametersContext::receiverParameter() {
  return getRuleContext<JavaParser::ReceiverParameterContext>(0);
}

tree::TerminalNode* JavaParser::FormalParametersContext::COMMA() {
  return getToken(JavaParser::COMMA, 0);
}

JavaParser::FormalParameterListContext* JavaParser::FormalParametersContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}


size_t JavaParser::FormalParametersContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameters;
}


std::any JavaParser::FormalParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameters(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FormalParametersContext* JavaParser::formalParameters() {
  FormalParametersContext *_localctx = _tracker.createInstance<FormalParametersContext>(_ctx, getState());
  enterRule(_localctx, 80, JavaParser::RuleFormalParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(684);
    match(JavaParser::LPAREN);
    setState(696);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
    case 1: {
      setState(686);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223090579141953573) != 0) || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(685);
        receiverParameter();
      }
      break;
    }

    case 2: {
      setState(688);
      receiverParameter();
      setState(691);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COMMA) {
        setState(689);
        match(JavaParser::COMMA);
        setState(690);
        formalParameterList();
      }
      break;
    }

    case 3: {
      setState(694);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223090579141986341) != 0) || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(693);
        formalParameterList();
      }
      break;
    }

    default:
      break;
    }
    setState(698);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReceiverParameterContext ------------------------------------------------------------------

JavaParser::ReceiverParameterContext::ReceiverParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::ReceiverParameterContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::ReceiverParameterContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

std::vector<JavaParser::IdentifierContext *> JavaParser::ReceiverParameterContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::ReceiverParameterContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ReceiverParameterContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::ReceiverParameterContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}


size_t JavaParser::ReceiverParameterContext::getRuleIndex() const {
  return JavaParser::RuleReceiverParameter;
}


std::any JavaParser::ReceiverParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitReceiverParameter(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ReceiverParameterContext* JavaParser::receiverParameter() {
  ReceiverParameterContext *_localctx = _tracker.createInstance<ReceiverParameterContext>(_ctx, getState());
  enterRule(_localctx, 82, JavaParser::RuleReceiverParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(700);
    typeType();
    setState(706);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::IDENTIFIER) {
      setState(701);
      identifier();
      setState(702);
      match(JavaParser::DOT);
      setState(708);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(709);
    match(JavaParser::THIS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterListContext ------------------------------------------------------------------

JavaParser::FormalParameterListContext::FormalParameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::FormalParameterContext *> JavaParser::FormalParameterListContext::formalParameter() {
  return getRuleContexts<JavaParser::FormalParameterContext>();
}

JavaParser::FormalParameterContext* JavaParser::FormalParameterListContext::formalParameter(size_t i) {
  return getRuleContext<JavaParser::FormalParameterContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::FormalParameterListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::FormalParameterListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}

JavaParser::LastFormalParameterContext* JavaParser::FormalParameterListContext::lastFormalParameter() {
  return getRuleContext<JavaParser::LastFormalParameterContext>(0);
}


size_t JavaParser::FormalParameterListContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameterList;
}


std::any JavaParser::FormalParameterListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameterList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FormalParameterListContext* JavaParser::formalParameterList() {
  FormalParameterListContext *_localctx = _tracker.createInstance<FormalParameterListContext>(_ctx, getState());
  enterRule(_localctx, 84, JavaParser::RuleFormalParameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(724);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(711);
      formalParameter();
      setState(716);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(712);
          match(JavaParser::COMMA);
          setState(713);
          formalParameter(); 
        }
        setState(718);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
      }
      setState(721);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COMMA) {
        setState(719);
        match(JavaParser::COMMA);
        setState(720);
        lastFormalParameter();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(723);
      lastFormalParameter();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormalParameterContext ------------------------------------------------------------------

JavaParser::FormalParameterContext::FormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::FormalParameterContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::FormalParameterContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::FormalParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::FormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::FormalParameterContext::getRuleIndex() const {
  return JavaParser::RuleFormalParameter;
}


std::any JavaParser::FormalParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFormalParameter(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FormalParameterContext* JavaParser::formalParameter() {
  FormalParameterContext *_localctx = _tracker.createInstance<FormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 86, JavaParser::RuleFormalParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(729);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(726);
        variableModifier(); 
      }
      setState(731);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
    }
    setState(732);
    typeType();
    setState(733);
    variableDeclaratorId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LastFormalParameterContext ------------------------------------------------------------------

JavaParser::LastFormalParameterContext::LastFormalParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::LastFormalParameterContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::LastFormalParameterContext::ELLIPSIS() {
  return getToken(JavaParser::ELLIPSIS, 0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::LastFormalParameterContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LastFormalParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LastFormalParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::LastFormalParameterContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::LastFormalParameterContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::LastFormalParameterContext::getRuleIndex() const {
  return JavaParser::RuleLastFormalParameter;
}


std::any JavaParser::LastFormalParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLastFormalParameter(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LastFormalParameterContext* JavaParser::lastFormalParameter() {
  LastFormalParameterContext *_localctx = _tracker.createInstance<LastFormalParameterContext>(_ctx, getState());
  enterRule(_localctx, 88, JavaParser::RuleLastFormalParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(738);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(735);
        variableModifier(); 
      }
      setState(740);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    }
    setState(741);
    typeType();
    setState(745);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::AT

    || _la == JavaParser::IDENTIFIER) {
      setState(742);
      annotation();
      setState(747);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(748);
    match(JavaParser::ELLIPSIS);
    setState(749);
    variableDeclaratorId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaLVTIListContext ------------------------------------------------------------------

JavaParser::LambdaLVTIListContext::LambdaLVTIListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::LambdaLVTIParameterContext *> JavaParser::LambdaLVTIListContext::lambdaLVTIParameter() {
  return getRuleContexts<JavaParser::LambdaLVTIParameterContext>();
}

JavaParser::LambdaLVTIParameterContext* JavaParser::LambdaLVTIListContext::lambdaLVTIParameter(size_t i) {
  return getRuleContext<JavaParser::LambdaLVTIParameterContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::LambdaLVTIListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::LambdaLVTIListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::LambdaLVTIListContext::getRuleIndex() const {
  return JavaParser::RuleLambdaLVTIList;
}


std::any JavaParser::LambdaLVTIListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLambdaLVTIList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LambdaLVTIListContext* JavaParser::lambdaLVTIList() {
  LambdaLVTIListContext *_localctx = _tracker.createInstance<LambdaLVTIListContext>(_ctx, getState());
  enterRule(_localctx, 90, JavaParser::RuleLambdaLVTIList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(751);
    lambdaLVTIParameter();
    setState(756);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(752);
      match(JavaParser::COMMA);
      setState(753);
      lambdaLVTIParameter();
      setState(758);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaLVTIParameterContext ------------------------------------------------------------------

JavaParser::LambdaLVTIParameterContext::LambdaLVTIParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::LambdaLVTIParameterContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

JavaParser::IdentifierContext* JavaParser::LambdaLVTIParameterContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LambdaLVTIParameterContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LambdaLVTIParameterContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::LambdaLVTIParameterContext::getRuleIndex() const {
  return JavaParser::RuleLambdaLVTIParameter;
}


std::any JavaParser::LambdaLVTIParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLambdaLVTIParameter(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LambdaLVTIParameterContext* JavaParser::lambdaLVTIParameter() {
  LambdaLVTIParameterContext *_localctx = _tracker.createInstance<LambdaLVTIParameterContext>(_ctx, getState());
  enterRule(_localctx, 92, JavaParser::RuleLambdaLVTIParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(762);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(759);
        variableModifier(); 
      }
      setState(764);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
    }
    setState(765);
    match(JavaParser::VAR);
    setState(766);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameContext ------------------------------------------------------------------

JavaParser::QualifiedNameContext::QualifiedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::QualifiedNameContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::QualifiedNameContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::QualifiedNameContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::QualifiedNameContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}


size_t JavaParser::QualifiedNameContext::getRuleIndex() const {
  return JavaParser::RuleQualifiedName;
}


std::any JavaParser::QualifiedNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitQualifiedName(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::QualifiedNameContext* JavaParser::qualifiedName() {
  QualifiedNameContext *_localctx = _tracker.createInstance<QualifiedNameContext>(_ctx, getState());
  enterRule(_localctx, 94, JavaParser::RuleQualifiedName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(768);
    identifier();
    setState(773);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(769);
        match(JavaParser::DOT);
        setState(770);
        identifier(); 
      }
      setState(775);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

JavaParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IntegerLiteralContext* JavaParser::LiteralContext::integerLiteral() {
  return getRuleContext<JavaParser::IntegerLiteralContext>(0);
}

JavaParser::FloatLiteralContext* JavaParser::LiteralContext::floatLiteral() {
  return getRuleContext<JavaParser::FloatLiteralContext>(0);
}

tree::TerminalNode* JavaParser::LiteralContext::CHAR_LITERAL() {
  return getToken(JavaParser::CHAR_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::STRING_LITERAL() {
  return getToken(JavaParser::STRING_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::BOOL_LITERAL() {
  return getToken(JavaParser::BOOL_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::NULL_LITERAL() {
  return getToken(JavaParser::NULL_LITERAL, 0);
}

tree::TerminalNode* JavaParser::LiteralContext::TEXT_BLOCK() {
  return getToken(JavaParser::TEXT_BLOCK, 0);
}


size_t JavaParser::LiteralContext::getRuleIndex() const {
  return JavaParser::RuleLiteral;
}


std::any JavaParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LiteralContext* JavaParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 96, JavaParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(783);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(776);
        integerLiteral();
        break;
      }

      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(777);
        floatLiteral();
        break;
      }

      case JavaParser::CHAR_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(778);
        match(JavaParser::CHAR_LITERAL);
        break;
      }

      case JavaParser::STRING_LITERAL: {
        enterOuterAlt(_localctx, 4);
        setState(779);
        match(JavaParser::STRING_LITERAL);
        break;
      }

      case JavaParser::BOOL_LITERAL: {
        enterOuterAlt(_localctx, 5);
        setState(780);
        match(JavaParser::BOOL_LITERAL);
        break;
      }

      case JavaParser::NULL_LITERAL: {
        enterOuterAlt(_localctx, 6);
        setState(781);
        match(JavaParser::NULL_LITERAL);
        break;
      }

      case JavaParser::TEXT_BLOCK: {
        enterOuterAlt(_localctx, 7);
        setState(782);
        match(JavaParser::TEXT_BLOCK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerLiteralContext ------------------------------------------------------------------

JavaParser::IntegerLiteralContext::IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::DECIMAL_LITERAL() {
  return getToken(JavaParser::DECIMAL_LITERAL, 0);
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::HEX_LITERAL() {
  return getToken(JavaParser::HEX_LITERAL, 0);
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::OCT_LITERAL() {
  return getToken(JavaParser::OCT_LITERAL, 0);
}

tree::TerminalNode* JavaParser::IntegerLiteralContext::BINARY_LITERAL() {
  return getToken(JavaParser::BINARY_LITERAL, 0);
}


size_t JavaParser::IntegerLiteralContext::getRuleIndex() const {
  return JavaParser::RuleIntegerLiteral;
}


std::any JavaParser::IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitIntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::IntegerLiteralContext* JavaParser::integerLiteral() {
  IntegerLiteralContext *_localctx = _tracker.createInstance<IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 98, JavaParser::RuleIntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(785);
    _la = _input->LA(1);
    if (!(((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatLiteralContext ------------------------------------------------------------------

JavaParser::FloatLiteralContext::FloatLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::FloatLiteralContext::FLOAT_LITERAL() {
  return getToken(JavaParser::FLOAT_LITERAL, 0);
}

tree::TerminalNode* JavaParser::FloatLiteralContext::HEX_FLOAT_LITERAL() {
  return getToken(JavaParser::HEX_FLOAT_LITERAL, 0);
}


size_t JavaParser::FloatLiteralContext::getRuleIndex() const {
  return JavaParser::RuleFloatLiteral;
}


std::any JavaParser::FloatLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFloatLiteral(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FloatLiteralContext* JavaParser::floatLiteral() {
  FloatLiteralContext *_localctx = _tracker.createInstance<FloatLiteralContext>(_ctx, getState());
  enterRule(_localctx, 100, JavaParser::RuleFloatLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(787);
    _la = _input->LA(1);
    if (!(_la == JavaParser::FLOAT_LITERAL

    || _la == JavaParser::HEX_FLOAT_LITERAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AltAnnotationQualifiedNameContext ------------------------------------------------------------------

JavaParser::AltAnnotationQualifiedNameContext::AltAnnotationQualifiedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AltAnnotationQualifiedNameContext::AT() {
  return getToken(JavaParser::AT, 0);
}

std::vector<JavaParser::IdentifierContext *> JavaParser::AltAnnotationQualifiedNameContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::AltAnnotationQualifiedNameContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::AltAnnotationQualifiedNameContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::AltAnnotationQualifiedNameContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}


size_t JavaParser::AltAnnotationQualifiedNameContext::getRuleIndex() const {
  return JavaParser::RuleAltAnnotationQualifiedName;
}


std::any JavaParser::AltAnnotationQualifiedNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAltAnnotationQualifiedName(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AltAnnotationQualifiedNameContext* JavaParser::altAnnotationQualifiedName() {
  AltAnnotationQualifiedNameContext *_localctx = _tracker.createInstance<AltAnnotationQualifiedNameContext>(_ctx, getState());
  enterRule(_localctx, 102, JavaParser::RuleAltAnnotationQualifiedName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(794);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::IDENTIFIER) {
      setState(789);
      identifier();
      setState(790);
      match(JavaParser::DOT);
      setState(796);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(797);
    match(JavaParser::AT);
    setState(798);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

JavaParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AnnotationContext::AT() {
  return getToken(JavaParser::AT, 0);
}

JavaParser::QualifiedNameContext* JavaParser::AnnotationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

JavaParser::AltAnnotationQualifiedNameContext* JavaParser::AnnotationContext::altAnnotationQualifiedName() {
  return getRuleContext<JavaParser::AltAnnotationQualifiedNameContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::AnnotationContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ElementValuePairsContext* JavaParser::AnnotationContext::elementValuePairs() {
  return getRuleContext<JavaParser::ElementValuePairsContext>(0);
}

JavaParser::ElementValueContext* JavaParser::AnnotationContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::AnnotationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotation;
}


std::any JavaParser::AnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotation(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationContext* JavaParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 104, JavaParser::RuleAnnotation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(803);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      setState(800);
      match(JavaParser::AT);
      setState(801);
      qualifiedName();
      break;
    }

    case 2: {
      setState(802);
      altAnnotationQualifiedName();
      break;
    }

    default:
      break;
    }
    setState(811);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LPAREN) {
      setState(805);
      match(JavaParser::LPAREN);
      setState(808);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
      case 1: {
        setState(806);
        elementValuePairs();
        break;
      }

      case 2: {
        setState(807);
        elementValue();
        break;
      }

      default:
        break;
      }
      setState(810);
      match(JavaParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairsContext ------------------------------------------------------------------

JavaParser::ElementValuePairsContext::ElementValuePairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ElementValuePairContext *> JavaParser::ElementValuePairsContext::elementValuePair() {
  return getRuleContexts<JavaParser::ElementValuePairContext>();
}

JavaParser::ElementValuePairContext* JavaParser::ElementValuePairsContext::elementValuePair(size_t i) {
  return getRuleContext<JavaParser::ElementValuePairContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ElementValuePairsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ElementValuePairsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ElementValuePairsContext::getRuleIndex() const {
  return JavaParser::RuleElementValuePairs;
}


std::any JavaParser::ElementValuePairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitElementValuePairs(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ElementValuePairsContext* JavaParser::elementValuePairs() {
  ElementValuePairsContext *_localctx = _tracker.createInstance<ElementValuePairsContext>(_ctx, getState());
  enterRule(_localctx, 106, JavaParser::RuleElementValuePairs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(813);
    elementValuePair();
    setState(818);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(814);
      match(JavaParser::COMMA);
      setState(815);
      elementValuePair();
      setState(820);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValuePairContext ------------------------------------------------------------------

JavaParser::ElementValuePairContext::ElementValuePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ElementValuePairContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ElementValuePairContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::ElementValueContext* JavaParser::ElementValuePairContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::ElementValuePairContext::getRuleIndex() const {
  return JavaParser::RuleElementValuePair;
}


std::any JavaParser::ElementValuePairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitElementValuePair(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ElementValuePairContext* JavaParser::elementValuePair() {
  ElementValuePairContext *_localctx = _tracker.createInstance<ElementValuePairContext>(_ctx, getState());
  enterRule(_localctx, 108, JavaParser::RuleElementValuePair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(821);
    identifier();
    setState(822);
    match(JavaParser::ASSIGN);
    setState(823);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueContext ------------------------------------------------------------------

JavaParser::ElementValueContext::ElementValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::ElementValueContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::AnnotationContext* JavaParser::ElementValueContext::annotation() {
  return getRuleContext<JavaParser::AnnotationContext>(0);
}

JavaParser::ElementValueArrayInitializerContext* JavaParser::ElementValueContext::elementValueArrayInitializer() {
  return getRuleContext<JavaParser::ElementValueArrayInitializerContext>(0);
}


size_t JavaParser::ElementValueContext::getRuleIndex() const {
  return JavaParser::RuleElementValue;
}


std::any JavaParser::ElementValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitElementValue(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ElementValueContext* JavaParser::elementValue() {
  ElementValueContext *_localctx = _tracker.createInstance<ElementValueContext>(_ctx, getState());
  enterRule(_localctx, 110, JavaParser::RuleElementValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(828);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(825);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(826);
      annotation();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(827);
      elementValueArrayInitializer();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementValueArrayInitializerContext ------------------------------------------------------------------

JavaParser::ElementValueArrayInitializerContext::ElementValueArrayInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ElementValueArrayInitializerContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ElementValueArrayInitializerContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::ElementValueContext *> JavaParser::ElementValueArrayInitializerContext::elementValue() {
  return getRuleContexts<JavaParser::ElementValueContext>();
}

JavaParser::ElementValueContext* JavaParser::ElementValueArrayInitializerContext::elementValue(size_t i) {
  return getRuleContext<JavaParser::ElementValueContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ElementValueArrayInitializerContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ElementValueArrayInitializerContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ElementValueArrayInitializerContext::getRuleIndex() const {
  return JavaParser::RuleElementValueArrayInitializer;
}


std::any JavaParser::ElementValueArrayInitializerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitElementValueArrayInitializer(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ElementValueArrayInitializerContext* JavaParser::elementValueArrayInitializer() {
  ElementValueArrayInitializerContext *_localctx = _tracker.createInstance<ElementValueArrayInitializerContext>(_ctx, getState());
  enterRule(_localctx, 112, JavaParser::RuleElementValueArrayInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(830);
    match(JavaParser::LBRACE);
    setState(839);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2377900732130013183) != 0)) {
      setState(831);
      elementValue();
      setState(836);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(832);
          match(JavaParser::COMMA);
          setState(833);
          elementValue(); 
        }
        setState(838);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
      }
    }
    setState(842);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::COMMA) {
      setState(841);
      match(JavaParser::COMMA);
    }
    setState(844);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeDeclarationContext ------------------------------------------------------------------

JavaParser::AnnotationTypeDeclarationContext::AnnotationTypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AnnotationTypeDeclarationContext::AT() {
  return getToken(JavaParser::AT, 0);
}

tree::TerminalNode* JavaParser::AnnotationTypeDeclarationContext::INTERFACE() {
  return getToken(JavaParser::INTERFACE, 0);
}

JavaParser::IdentifierContext* JavaParser::AnnotationTypeDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::AnnotationTypeBodyContext* JavaParser::AnnotationTypeDeclarationContext::annotationTypeBody() {
  return getRuleContext<JavaParser::AnnotationTypeBodyContext>(0);
}


size_t JavaParser::AnnotationTypeDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeDeclaration;
}


std::any JavaParser::AnnotationTypeDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationTypeDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::annotationTypeDeclaration() {
  AnnotationTypeDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 114, JavaParser::RuleAnnotationTypeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(846);
    match(JavaParser::AT);
    setState(847);
    match(JavaParser::INTERFACE);
    setState(848);
    identifier();
    setState(849);
    annotationTypeBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeBodyContext ------------------------------------------------------------------

JavaParser::AnnotationTypeBodyContext::AnnotationTypeBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::AnnotationTypeBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::AnnotationTypeBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::AnnotationTypeElementDeclarationContext *> JavaParser::AnnotationTypeBodyContext::annotationTypeElementDeclaration() {
  return getRuleContexts<JavaParser::AnnotationTypeElementDeclarationContext>();
}

JavaParser::AnnotationTypeElementDeclarationContext* JavaParser::AnnotationTypeBodyContext::annotationTypeElementDeclaration(size_t i) {
  return getRuleContext<JavaParser::AnnotationTypeElementDeclarationContext>(i);
}


size_t JavaParser::AnnotationTypeBodyContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeBody;
}


std::any JavaParser::AnnotationTypeBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationTypeBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationTypeBodyContext* JavaParser::annotationTypeBody() {
  AnnotationTypeBodyContext *_localctx = _tracker.createInstance<AnnotationTypeBodyContext>(_ctx, getState());
  enterRule(_localctx, 116, JavaParser::RuleAnnotationTypeBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(851);
    match(JavaParser::LBRACE);
    setState(855);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -806529426349675) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660702539773) != 0)) {
      setState(852);
      annotationTypeElementDeclaration();
      setState(857);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(858);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementDeclarationContext ------------------------------------------------------------------

JavaParser::AnnotationTypeElementDeclarationContext::AnnotationTypeElementDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationTypeElementRestContext* JavaParser::AnnotationTypeElementDeclarationContext::annotationTypeElementRest() {
  return getRuleContext<JavaParser::AnnotationTypeElementRestContext>(0);
}

std::vector<JavaParser::ModifierContext *> JavaParser::AnnotationTypeElementDeclarationContext::modifier() {
  return getRuleContexts<JavaParser::ModifierContext>();
}

JavaParser::ModifierContext* JavaParser::AnnotationTypeElementDeclarationContext::modifier(size_t i) {
  return getRuleContext<JavaParser::ModifierContext>(i);
}

tree::TerminalNode* JavaParser::AnnotationTypeElementDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::AnnotationTypeElementDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeElementDeclaration;
}


std::any JavaParser::AnnotationTypeElementDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationTypeElementDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationTypeElementDeclarationContext* JavaParser::annotationTypeElementDeclaration() {
  AnnotationTypeElementDeclarationContext *_localctx = _tracker.createInstance<AnnotationTypeElementDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 118, JavaParser::RuleAnnotationTypeElementDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(868);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::CLASS:
      case JavaParser::DOUBLE:
      case JavaParser::ENUM:
      case JavaParser::FINAL:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::INTERFACE:
      case JavaParser::LONG:
      case JavaParser::NATIVE:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::SHORT:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::SYNCHRONIZED:
      case JavaParser::TRANSIENT:
      case JavaParser::VOLATILE:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::NON_SEALED:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(863);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(860);
            modifier(); 
          }
          setState(865);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
        }
        setState(866);
        annotationTypeElementRest();
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(867);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationTypeElementRestContext ------------------------------------------------------------------

JavaParser::AnnotationTypeElementRestContext::AnnotationTypeElementRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::AnnotationTypeElementRestContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::AnnotationMethodOrConstantRestContext* JavaParser::AnnotationTypeElementRestContext::annotationMethodOrConstantRest() {
  return getRuleContext<JavaParser::AnnotationMethodOrConstantRestContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationTypeElementRestContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::ClassDeclarationContext* JavaParser::AnnotationTypeElementRestContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::AnnotationTypeElementRestContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::EnumDeclarationContext* JavaParser::AnnotationTypeElementRestContext::enumDeclaration() {
  return getRuleContext<JavaParser::EnumDeclarationContext>(0);
}

JavaParser::AnnotationTypeDeclarationContext* JavaParser::AnnotationTypeElementRestContext::annotationTypeDeclaration() {
  return getRuleContext<JavaParser::AnnotationTypeDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::AnnotationTypeElementRestContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}


size_t JavaParser::AnnotationTypeElementRestContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationTypeElementRest;
}


std::any JavaParser::AnnotationTypeElementRestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationTypeElementRest(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationTypeElementRestContext* JavaParser::annotationTypeElementRest() {
  AnnotationTypeElementRestContext *_localctx = _tracker.createInstance<AnnotationTypeElementRestContext>(_ctx, getState());
  enterRule(_localctx, 120, JavaParser::RuleAnnotationTypeElementRest);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(894);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(870);
      typeType();
      setState(871);
      annotationMethodOrConstantRest();
      setState(872);
      match(JavaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(874);
      classDeclaration();
      setState(876);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
      case 1: {
        setState(875);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(878);
      interfaceDeclaration();
      setState(880);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
      case 1: {
        setState(879);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(882);
      enumDeclaration();
      setState(884);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
      case 1: {
        setState(883);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(886);
      annotationTypeDeclaration();
      setState(888);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
      case 1: {
        setState(887);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(890);
      recordDeclaration();
      setState(892);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
      case 1: {
        setState(891);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationMethodOrConstantRestContext ------------------------------------------------------------------

JavaParser::AnnotationMethodOrConstantRestContext::AnnotationMethodOrConstantRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::AnnotationMethodRestContext* JavaParser::AnnotationMethodOrConstantRestContext::annotationMethodRest() {
  return getRuleContext<JavaParser::AnnotationMethodRestContext>(0);
}

JavaParser::AnnotationConstantRestContext* JavaParser::AnnotationMethodOrConstantRestContext::annotationConstantRest() {
  return getRuleContext<JavaParser::AnnotationConstantRestContext>(0);
}


size_t JavaParser::AnnotationMethodOrConstantRestContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationMethodOrConstantRest;
}


std::any JavaParser::AnnotationMethodOrConstantRestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationMethodOrConstantRest(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationMethodOrConstantRestContext* JavaParser::annotationMethodOrConstantRest() {
  AnnotationMethodOrConstantRestContext *_localctx = _tracker.createInstance<AnnotationMethodOrConstantRestContext>(_ctx, getState());
  enterRule(_localctx, 122, JavaParser::RuleAnnotationMethodOrConstantRest);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(898);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(896);
      annotationMethodRest();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(897);
      annotationConstantRest();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationMethodRestContext ------------------------------------------------------------------

JavaParser::AnnotationMethodRestContext::AnnotationMethodRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::AnnotationMethodRestContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::AnnotationMethodRestContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::AnnotationMethodRestContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::DefaultValueContext* JavaParser::AnnotationMethodRestContext::defaultValue() {
  return getRuleContext<JavaParser::DefaultValueContext>(0);
}


size_t JavaParser::AnnotationMethodRestContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationMethodRest;
}


std::any JavaParser::AnnotationMethodRestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationMethodRest(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationMethodRestContext* JavaParser::annotationMethodRest() {
  AnnotationMethodRestContext *_localctx = _tracker.createInstance<AnnotationMethodRestContext>(_ctx, getState());
  enterRule(_localctx, 124, JavaParser::RuleAnnotationMethodRest);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(900);
    identifier();
    setState(901);
    match(JavaParser::LPAREN);
    setState(902);
    match(JavaParser::RPAREN);
    setState(904);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::DEFAULT) {
      setState(903);
      defaultValue();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationConstantRestContext ------------------------------------------------------------------

JavaParser::AnnotationConstantRestContext::AnnotationConstantRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::VariableDeclaratorsContext* JavaParser::AnnotationConstantRestContext::variableDeclarators() {
  return getRuleContext<JavaParser::VariableDeclaratorsContext>(0);
}


size_t JavaParser::AnnotationConstantRestContext::getRuleIndex() const {
  return JavaParser::RuleAnnotationConstantRest;
}


std::any JavaParser::AnnotationConstantRestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitAnnotationConstantRest(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::AnnotationConstantRestContext* JavaParser::annotationConstantRest() {
  AnnotationConstantRestContext *_localctx = _tracker.createInstance<AnnotationConstantRestContext>(_ctx, getState());
  enterRule(_localctx, 126, JavaParser::RuleAnnotationConstantRest);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(906);
    variableDeclarators();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultValueContext ------------------------------------------------------------------

JavaParser::DefaultValueContext::DefaultValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::DefaultValueContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}

JavaParser::ElementValueContext* JavaParser::DefaultValueContext::elementValue() {
  return getRuleContext<JavaParser::ElementValueContext>(0);
}


size_t JavaParser::DefaultValueContext::getRuleIndex() const {
  return JavaParser::RuleDefaultValue;
}


std::any JavaParser::DefaultValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitDefaultValue(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::DefaultValueContext* JavaParser::defaultValue() {
  DefaultValueContext *_localctx = _tracker.createInstance<DefaultValueContext>(_ctx, getState());
  enterRule(_localctx, 128, JavaParser::RuleDefaultValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(908);
    match(JavaParser::DEFAULT);
    setState(909);
    elementValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDeclarationContext ------------------------------------------------------------------

JavaParser::ModuleDeclarationContext::ModuleDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ModuleDeclarationContext::MODULE() {
  return getToken(JavaParser::MODULE, 0);
}

JavaParser::QualifiedNameContext* JavaParser::ModuleDeclarationContext::qualifiedName() {
  return getRuleContext<JavaParser::QualifiedNameContext>(0);
}

JavaParser::ModuleBodyContext* JavaParser::ModuleDeclarationContext::moduleBody() {
  return getRuleContext<JavaParser::ModuleBodyContext>(0);
}

tree::TerminalNode* JavaParser::ModuleDeclarationContext::OPEN() {
  return getToken(JavaParser::OPEN, 0);
}


size_t JavaParser::ModuleDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleModuleDeclaration;
}


std::any JavaParser::ModuleDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitModuleDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ModuleDeclarationContext* JavaParser::moduleDeclaration() {
  ModuleDeclarationContext *_localctx = _tracker.createInstance<ModuleDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 130, JavaParser::RuleModuleDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(912);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::OPEN) {
      setState(911);
      match(JavaParser::OPEN);
    }
    setState(914);
    match(JavaParser::MODULE);
    setState(915);
    qualifiedName();
    setState(916);
    moduleBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleBodyContext ------------------------------------------------------------------

JavaParser::ModuleBodyContext::ModuleBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ModuleBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::ModuleBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::ModuleDirectiveContext *> JavaParser::ModuleBodyContext::moduleDirective() {
  return getRuleContexts<JavaParser::ModuleDirectiveContext>();
}

JavaParser::ModuleDirectiveContext* JavaParser::ModuleBodyContext::moduleDirective(size_t i) {
  return getRuleContext<JavaParser::ModuleDirectiveContext>(i);
}


size_t JavaParser::ModuleBodyContext::getRuleIndex() const {
  return JavaParser::RuleModuleBody;
}


std::any JavaParser::ModuleBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitModuleBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ModuleBodyContext* JavaParser::moduleBody() {
  ModuleBodyContext *_localctx = _tracker.createInstance<ModuleBodyContext>(_ctx, getState());
  enterRule(_localctx, 132, JavaParser::RuleModuleBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(918);
    match(JavaParser::LBRACE);
    setState(922);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 495395959010754560) != 0)) {
      setState(919);
      moduleDirective();
      setState(924);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(925);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleDirectiveContext ------------------------------------------------------------------

JavaParser::ModuleDirectiveContext::ModuleDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::REQUIRES() {
  return getToken(JavaParser::REQUIRES, 0);
}

std::vector<JavaParser::QualifiedNameContext *> JavaParser::ModuleDirectiveContext::qualifiedName() {
  return getRuleContexts<JavaParser::QualifiedNameContext>();
}

JavaParser::QualifiedNameContext* JavaParser::ModuleDirectiveContext::qualifiedName(size_t i) {
  return getRuleContext<JavaParser::QualifiedNameContext>(i);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

std::vector<JavaParser::RequiresModifierContext *> JavaParser::ModuleDirectiveContext::requiresModifier() {
  return getRuleContexts<JavaParser::RequiresModifierContext>();
}

JavaParser::RequiresModifierContext* JavaParser::ModuleDirectiveContext::requiresModifier(size_t i) {
  return getRuleContext<JavaParser::RequiresModifierContext>(i);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::EXPORTS() {
  return getToken(JavaParser::EXPORTS, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::TO() {
  return getToken(JavaParser::TO, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::OPENS() {
  return getToken(JavaParser::OPENS, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::USES() {
  return getToken(JavaParser::USES, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::PROVIDES() {
  return getToken(JavaParser::PROVIDES, 0);
}

tree::TerminalNode* JavaParser::ModuleDirectiveContext::WITH() {
  return getToken(JavaParser::WITH, 0);
}


size_t JavaParser::ModuleDirectiveContext::getRuleIndex() const {
  return JavaParser::RuleModuleDirective;
}


std::any JavaParser::ModuleDirectiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitModuleDirective(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ModuleDirectiveContext* JavaParser::moduleDirective() {
  ModuleDirectiveContext *_localctx = _tracker.createInstance<ModuleDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 134, JavaParser::RuleModuleDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(963);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::REQUIRES: {
        enterOuterAlt(_localctx, 1);
        setState(927);
        match(JavaParser::REQUIRES);
        setState(931);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(928);
            requiresModifier(); 
          }
          setState(933);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
        }
        setState(934);
        qualifiedName();
        setState(935);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::EXPORTS: {
        enterOuterAlt(_localctx, 2);
        setState(937);
        match(JavaParser::EXPORTS);
        setState(938);
        qualifiedName();
        setState(941);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::TO) {
          setState(939);
          match(JavaParser::TO);
          setState(940);
          qualifiedName();
        }
        setState(943);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::OPENS: {
        enterOuterAlt(_localctx, 3);
        setState(945);
        match(JavaParser::OPENS);
        setState(946);
        qualifiedName();
        setState(949);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::TO) {
          setState(947);
          match(JavaParser::TO);
          setState(948);
          qualifiedName();
        }
        setState(951);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::USES: {
        enterOuterAlt(_localctx, 4);
        setState(953);
        match(JavaParser::USES);
        setState(954);
        qualifiedName();
        setState(955);
        match(JavaParser::SEMI);
        break;
      }

      case JavaParser::PROVIDES: {
        enterOuterAlt(_localctx, 5);
        setState(957);
        match(JavaParser::PROVIDES);
        setState(958);
        qualifiedName();
        setState(959);
        match(JavaParser::WITH);
        setState(960);
        qualifiedName();
        setState(961);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RequiresModifierContext ------------------------------------------------------------------

JavaParser::RequiresModifierContext::RequiresModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RequiresModifierContext::TRANSITIVE() {
  return getToken(JavaParser::TRANSITIVE, 0);
}

tree::TerminalNode* JavaParser::RequiresModifierContext::STATIC() {
  return getToken(JavaParser::STATIC, 0);
}


size_t JavaParser::RequiresModifierContext::getRuleIndex() const {
  return JavaParser::RuleRequiresModifier;
}


std::any JavaParser::RequiresModifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRequiresModifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RequiresModifierContext* JavaParser::requiresModifier() {
  RequiresModifierContext *_localctx = _tracker.createInstance<RequiresModifierContext>(_ctx, getState());
  enterRule(_localctx, 136, JavaParser::RuleRequiresModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(965);
    _la = _input->LA(1);
    if (!(_la == JavaParser::STATIC

    || _la == JavaParser::TRANSITIVE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordDeclarationContext ------------------------------------------------------------------

JavaParser::RecordDeclarationContext::RecordDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RecordDeclarationContext::RECORD() {
  return getToken(JavaParser::RECORD, 0);
}

JavaParser::IdentifierContext* JavaParser::RecordDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::RecordHeaderContext* JavaParser::RecordDeclarationContext::recordHeader() {
  return getRuleContext<JavaParser::RecordHeaderContext>(0);
}

JavaParser::RecordBodyContext* JavaParser::RecordDeclarationContext::recordBody() {
  return getRuleContext<JavaParser::RecordBodyContext>(0);
}

JavaParser::TypeParametersContext* JavaParser::RecordDeclarationContext::typeParameters() {
  return getRuleContext<JavaParser::TypeParametersContext>(0);
}

tree::TerminalNode* JavaParser::RecordDeclarationContext::IMPLEMENTS() {
  return getToken(JavaParser::IMPLEMENTS, 0);
}

JavaParser::TypeListContext* JavaParser::RecordDeclarationContext::typeList() {
  return getRuleContext<JavaParser::TypeListContext>(0);
}


size_t JavaParser::RecordDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleRecordDeclaration;
}


std::any JavaParser::RecordDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRecordDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RecordDeclarationContext* JavaParser::recordDeclaration() {
  RecordDeclarationContext *_localctx = _tracker.createInstance<RecordDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 138, JavaParser::RuleRecordDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(967);
    match(JavaParser::RECORD);
    setState(968);
    identifier();
    setState(970);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(969);
      typeParameters();
    }
    setState(972);
    recordHeader();
    setState(975);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::IMPLEMENTS) {
      setState(973);
      match(JavaParser::IMPLEMENTS);
      setState(974);
      typeList();
    }
    setState(977);
    recordBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordHeaderContext ------------------------------------------------------------------

JavaParser::RecordHeaderContext::RecordHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RecordHeaderContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::RecordHeaderContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::RecordComponentListContext* JavaParser::RecordHeaderContext::recordComponentList() {
  return getRuleContext<JavaParser::RecordComponentListContext>(0);
}


size_t JavaParser::RecordHeaderContext::getRuleIndex() const {
  return JavaParser::RuleRecordHeader;
}


std::any JavaParser::RecordHeaderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRecordHeader(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RecordHeaderContext* JavaParser::recordHeader() {
  RecordHeaderContext *_localctx = _tracker.createInstance<RecordHeaderContext>(_ctx, getState());
  enterRule(_localctx, 140, JavaParser::RuleRecordHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(979);
    match(JavaParser::LPAREN);
    setState(981);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 9223090579141953573) != 0) || _la == JavaParser::AT

    || _la == JavaParser::IDENTIFIER) {
      setState(980);
      recordComponentList();
    }
    setState(983);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordComponentListContext ------------------------------------------------------------------

JavaParser::RecordComponentListContext::RecordComponentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::RecordComponentContext *> JavaParser::RecordComponentListContext::recordComponent() {
  return getRuleContexts<JavaParser::RecordComponentContext>();
}

JavaParser::RecordComponentContext* JavaParser::RecordComponentListContext::recordComponent(size_t i) {
  return getRuleContext<JavaParser::RecordComponentContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::RecordComponentListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::RecordComponentListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::RecordComponentListContext::getRuleIndex() const {
  return JavaParser::RuleRecordComponentList;
}


std::any JavaParser::RecordComponentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRecordComponentList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RecordComponentListContext* JavaParser::recordComponentList() {
  RecordComponentListContext *_localctx = _tracker.createInstance<RecordComponentListContext>(_ctx, getState());
  enterRule(_localctx, 142, JavaParser::RuleRecordComponentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(985);
    recordComponent();
    setState(990);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(986);
      match(JavaParser::COMMA);
      setState(987);
      recordComponent();
      setState(992);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordComponentContext ------------------------------------------------------------------

JavaParser::RecordComponentContext::RecordComponentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::RecordComponentContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::RecordComponentContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}


size_t JavaParser::RecordComponentContext::getRuleIndex() const {
  return JavaParser::RuleRecordComponent;
}


std::any JavaParser::RecordComponentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRecordComponent(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RecordComponentContext* JavaParser::recordComponent() {
  RecordComponentContext *_localctx = _tracker.createInstance<RecordComponentContext>(_ctx, getState());
  enterRule(_localctx, 144, JavaParser::RuleRecordComponent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(993);
    typeType();
    setState(994);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordBodyContext ------------------------------------------------------------------

JavaParser::RecordBodyContext::RecordBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::RecordBodyContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::RecordBodyContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::ClassBodyDeclarationContext *> JavaParser::RecordBodyContext::classBodyDeclaration() {
  return getRuleContexts<JavaParser::ClassBodyDeclarationContext>();
}

JavaParser::ClassBodyDeclarationContext* JavaParser::RecordBodyContext::classBodyDeclaration(size_t i) {
  return getRuleContext<JavaParser::ClassBodyDeclarationContext>(i);
}


size_t JavaParser::RecordBodyContext::getRuleIndex() const {
  return JavaParser::RuleRecordBody;
}


std::any JavaParser::RecordBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitRecordBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::RecordBodyContext* JavaParser::recordBody() {
  RecordBodyContext *_localctx = _tracker.createInstance<RecordBodyContext>(_ctx, getState());
  enterRule(_localctx, 146, JavaParser::RuleRecordBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(996);
    match(JavaParser::LBRACE);
    setState(1000);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -665791937994347) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141660685729789) != 0)) {
      setState(997);
      classBodyDeclaration();
      setState(1002);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1003);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

JavaParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::BlockContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::BlockContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::BlockStatementContext *> JavaParser::BlockContext::blockStatement() {
  return getRuleContexts<JavaParser::BlockStatementContext>();
}

JavaParser::BlockStatementContext* JavaParser::BlockContext::blockStatement(size_t i) {
  return getRuleContext<JavaParser::BlockStatementContext>(i);
}


size_t JavaParser::BlockContext::getRuleIndex() const {
  return JavaParser::RuleBlock;
}


std::any JavaParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::BlockContext* JavaParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 148, JavaParser::RuleBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1005);
    match(JavaParser::LBRACE);
    setState(1009);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -334254282492513) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141145188974593) != 0)) {
      setState(1006);
      blockStatement();
      setState(1011);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1012);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockStatementContext ------------------------------------------------------------------

JavaParser::BlockStatementContext::BlockStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LocalVariableDeclarationContext* JavaParser::BlockStatementContext::localVariableDeclaration() {
  return getRuleContext<JavaParser::LocalVariableDeclarationContext>(0);
}

tree::TerminalNode* JavaParser::BlockStatementContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::LocalTypeDeclarationContext* JavaParser::BlockStatementContext::localTypeDeclaration() {
  return getRuleContext<JavaParser::LocalTypeDeclarationContext>(0);
}

JavaParser::StatementContext* JavaParser::BlockStatementContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}


size_t JavaParser::BlockStatementContext::getRuleIndex() const {
  return JavaParser::RuleBlockStatement;
}


std::any JavaParser::BlockStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitBlockStatement(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::BlockStatementContext* JavaParser::blockStatement() {
  BlockStatementContext *_localctx = _tracker.createInstance<BlockStatementContext>(_ctx, getState());
  enterRule(_localctx, 150, JavaParser::RuleBlockStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1019);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1014);
      localVariableDeclaration();
      setState(1015);
      match(JavaParser::SEMI);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1017);
      localTypeDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1018);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalVariableDeclarationContext ------------------------------------------------------------------

JavaParser::LocalVariableDeclarationContext::LocalVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::LocalVariableDeclarationContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

JavaParser::IdentifierContext* JavaParser::LocalVariableDeclarationContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::LocalVariableDeclarationContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::ExpressionContext* JavaParser::LocalVariableDeclarationContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::TypeTypeContext* JavaParser::LocalVariableDeclarationContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::VariableDeclaratorsContext* JavaParser::LocalVariableDeclarationContext::variableDeclarators() {
  return getRuleContext<JavaParser::VariableDeclaratorsContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::LocalVariableDeclarationContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::LocalVariableDeclarationContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::LocalVariableDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleLocalVariableDeclaration;
}


std::any JavaParser::LocalVariableDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLocalVariableDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LocalVariableDeclarationContext* JavaParser::localVariableDeclaration() {
  LocalVariableDeclarationContext *_localctx = _tracker.createInstance<LocalVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 152, JavaParser::RuleLocalVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1024);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1021);
        variableModifier(); 
      }
      setState(1026);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
    }
    setState(1035);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
    case 1: {
      setState(1027);
      match(JavaParser::VAR);
      setState(1028);
      identifier();
      setState(1029);
      match(JavaParser::ASSIGN);
      setState(1030);
      expression(0);
      break;
    }

    case 2: {
      setState(1032);
      typeType();
      setState(1033);
      variableDeclarators();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

JavaParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::IdentifierContext::IDENTIFIER() {
  return getToken(JavaParser::IDENTIFIER, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::MODULE() {
  return getToken(JavaParser::MODULE, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::OPEN() {
  return getToken(JavaParser::OPEN, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::REQUIRES() {
  return getToken(JavaParser::REQUIRES, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::EXPORTS() {
  return getToken(JavaParser::EXPORTS, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::OPENS() {
  return getToken(JavaParser::OPENS, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::TO() {
  return getToken(JavaParser::TO, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::USES() {
  return getToken(JavaParser::USES, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::PROVIDES() {
  return getToken(JavaParser::PROVIDES, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::WITH() {
  return getToken(JavaParser::WITH, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::TRANSITIVE() {
  return getToken(JavaParser::TRANSITIVE, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::YIELD() {
  return getToken(JavaParser::YIELD, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::SEALED() {
  return getToken(JavaParser::SEALED, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::PERMITS() {
  return getToken(JavaParser::PERMITS, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::RECORD() {
  return getToken(JavaParser::RECORD, 0);
}

tree::TerminalNode* JavaParser::IdentifierContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}


size_t JavaParser::IdentifierContext::getRuleIndex() const {
  return JavaParser::RuleIdentifier;
}


std::any JavaParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::IdentifierContext* JavaParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 154, JavaParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1037);
    _la = _input->LA(1);
    if (!(((((_la - 51) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::IDENTIFIER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalTypeDeclarationContext ------------------------------------------------------------------

JavaParser::LocalTypeDeclarationContext::LocalTypeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassDeclarationContext* JavaParser::LocalTypeDeclarationContext::classDeclaration() {
  return getRuleContext<JavaParser::ClassDeclarationContext>(0);
}

JavaParser::InterfaceDeclarationContext* JavaParser::LocalTypeDeclarationContext::interfaceDeclaration() {
  return getRuleContext<JavaParser::InterfaceDeclarationContext>(0);
}

JavaParser::RecordDeclarationContext* JavaParser::LocalTypeDeclarationContext::recordDeclaration() {
  return getRuleContext<JavaParser::RecordDeclarationContext>(0);
}

std::vector<JavaParser::ClassOrInterfaceModifierContext *> JavaParser::LocalTypeDeclarationContext::classOrInterfaceModifier() {
  return getRuleContexts<JavaParser::ClassOrInterfaceModifierContext>();
}

JavaParser::ClassOrInterfaceModifierContext* JavaParser::LocalTypeDeclarationContext::classOrInterfaceModifier(size_t i) {
  return getRuleContext<JavaParser::ClassOrInterfaceModifierContext>(i);
}

tree::TerminalNode* JavaParser::LocalTypeDeclarationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::LocalTypeDeclarationContext::getRuleIndex() const {
  return JavaParser::RuleLocalTypeDeclaration;
}


std::any JavaParser::LocalTypeDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLocalTypeDeclaration(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LocalTypeDeclarationContext* JavaParser::localTypeDeclaration() {
  LocalTypeDeclarationContext *_localctx = _tracker.createInstance<LocalTypeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 156, JavaParser::RuleLocalTypeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1051);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::ABSTRACT:
      case JavaParser::CLASS:
      case JavaParser::FINAL:
      case JavaParser::INTERFACE:
      case JavaParser::PRIVATE:
      case JavaParser::PROTECTED:
      case JavaParser::PUBLIC:
      case JavaParser::STATIC:
      case JavaParser::STRICTFP:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::NON_SEALED:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1042);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1039);
            classOrInterfaceModifier(); 
          }
          setState(1044);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx);
        }
        setState(1048);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case JavaParser::CLASS: {
            setState(1045);
            classDeclaration();
            break;
          }

          case JavaParser::INTERFACE: {
            setState(1046);
            interfaceDeclaration();
            break;
          }

          case JavaParser::RECORD: {
            setState(1047);
            recordDeclaration();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case JavaParser::SEMI: {
        enterOuterAlt(_localctx, 2);
        setState(1050);
        match(JavaParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

JavaParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::StatementContext::getRuleIndex() const {
  return JavaParser::RuleStatement;
}

void JavaParser::StatementContext::copyFrom(StatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- StatementThrowContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementThrowContext::THROW() {
  return getToken(JavaParser::THROW, 0);
}

JavaParser::ExpressionContext* JavaParser::StatementThrowContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::StatementThrowContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::StatementThrowContext::StatementThrowContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementThrowContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementThrow(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementContinueContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementContinueContext::CONTINUE() {
  return getToken(JavaParser::CONTINUE, 0);
}

tree::TerminalNode* JavaParser::StatementContinueContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::IdentifierContext* JavaParser::StatementContinueContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::StatementContinueContext::StatementContinueContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementContinueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementContinue(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementSemiContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementSemiContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::StatementSemiContext::StatementSemiContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementSemiContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementSemi(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementReturnContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementReturnContext::RETURN() {
  return getToken(JavaParser::RETURN, 0);
}

tree::TerminalNode* JavaParser::StatementReturnContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::ExpressionContext* JavaParser::StatementReturnContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::StatementReturnContext::StatementReturnContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementReturnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementReturn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementSwitchExpContext ------------------------------------------------------------------

JavaParser::SwitchExpressionContext* JavaParser::StatementSwitchExpContext::switchExpression() {
  return getRuleContext<JavaParser::SwitchExpressionContext>(0);
}

tree::TerminalNode* JavaParser::StatementSwitchExpContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::StatementSwitchExpContext::StatementSwitchExpContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementSwitchExpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementSwitchExp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementForContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementForContext::FOR() {
  return getToken(JavaParser::FOR, 0);
}

tree::TerminalNode* JavaParser::StatementForContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::ForControlContext* JavaParser::StatementForContext::forControl() {
  return getRuleContext<JavaParser::ForControlContext>(0);
}

tree::TerminalNode* JavaParser::StatementForContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::StatementContext* JavaParser::StatementForContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

JavaParser::StatementForContext::StatementForContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementForContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementFor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementYieldContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementYieldContext::YIELD() {
  return getToken(JavaParser::YIELD, 0);
}

JavaParser::ExpressionContext* JavaParser::StatementYieldContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::StatementYieldContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::StatementYieldContext::StatementYieldContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementYieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementYield(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementLabelContext ------------------------------------------------------------------

JavaParser::IdentifierContext* JavaParser::StatementLabelContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::StatementLabelContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

JavaParser::StatementContext* JavaParser::StatementLabelContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

JavaParser::StatementLabelContext::StatementLabelContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementLabel(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementBlockContext ------------------------------------------------------------------

JavaParser::BlockContext* JavaParser::StatementBlockContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

JavaParser::StatementBlockContext::StatementBlockContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementBlock(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementAssertContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementAssertContext::ASSERT() {
  return getToken(JavaParser::ASSERT, 0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::StatementAssertContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::StatementAssertContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

tree::TerminalNode* JavaParser::StatementAssertContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

tree::TerminalNode* JavaParser::StatementAssertContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

JavaParser::StatementAssertContext::StatementAssertContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementAssertContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementAssert(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementSwitchContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementSwitchContext::SWITCH() {
  return getToken(JavaParser::SWITCH, 0);
}

JavaParser::ParExpressionContext* JavaParser::StatementSwitchContext::parExpression() {
  return getRuleContext<JavaParser::ParExpressionContext>(0);
}

tree::TerminalNode* JavaParser::StatementSwitchContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::StatementSwitchContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::SwitchBlockStatementGroupContext *> JavaParser::StatementSwitchContext::switchBlockStatementGroup() {
  return getRuleContexts<JavaParser::SwitchBlockStatementGroupContext>();
}

JavaParser::SwitchBlockStatementGroupContext* JavaParser::StatementSwitchContext::switchBlockStatementGroup(size_t i) {
  return getRuleContext<JavaParser::SwitchBlockStatementGroupContext>(i);
}

std::vector<JavaParser::SwitchLabelContext *> JavaParser::StatementSwitchContext::switchLabel() {
  return getRuleContexts<JavaParser::SwitchLabelContext>();
}

JavaParser::SwitchLabelContext* JavaParser::StatementSwitchContext::switchLabel(size_t i) {
  return getRuleContext<JavaParser::SwitchLabelContext>(i);
}

JavaParser::StatementSwitchContext::StatementSwitchContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementSwitchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementSwitch(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementBreakContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementBreakContext::BREAK() {
  return getToken(JavaParser::BREAK, 0);
}

tree::TerminalNode* JavaParser::StatementBreakContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::IdentifierContext* JavaParser::StatementBreakContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::StatementBreakContext::StatementBreakContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementBreakContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementBreak(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementDoWhileContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementDoWhileContext::DO() {
  return getToken(JavaParser::DO, 0);
}

JavaParser::StatementContext* JavaParser::StatementDoWhileContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

tree::TerminalNode* JavaParser::StatementDoWhileContext::WHILE() {
  return getToken(JavaParser::WHILE, 0);
}

JavaParser::ParExpressionContext* JavaParser::StatementDoWhileContext::parExpression() {
  return getRuleContext<JavaParser::ParExpressionContext>(0);
}

tree::TerminalNode* JavaParser::StatementDoWhileContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::StatementDoWhileContext::StatementDoWhileContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementDoWhileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementDoWhile(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementExpContext ------------------------------------------------------------------

JavaParser::ExpressionContext* JavaParser::StatementExpContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::StatementExpContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}

JavaParser::StatementExpContext::StatementExpContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementExpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementExp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementTryContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementTryContext::TRY() {
  return getToken(JavaParser::TRY, 0);
}

JavaParser::BlockContext* JavaParser::StatementTryContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

JavaParser::FinallyBlockContext* JavaParser::StatementTryContext::finallyBlock() {
  return getRuleContext<JavaParser::FinallyBlockContext>(0);
}

std::vector<JavaParser::CatchClauseContext *> JavaParser::StatementTryContext::catchClause() {
  return getRuleContexts<JavaParser::CatchClauseContext>();
}

JavaParser::CatchClauseContext* JavaParser::StatementTryContext::catchClause(size_t i) {
  return getRuleContext<JavaParser::CatchClauseContext>(i);
}

JavaParser::ResourceSpecificationContext* JavaParser::StatementTryContext::resourceSpecification() {
  return getRuleContext<JavaParser::ResourceSpecificationContext>(0);
}

JavaParser::StatementTryContext::StatementTryContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementTryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementTry(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementSyncContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementSyncContext::SYNCHRONIZED() {
  return getToken(JavaParser::SYNCHRONIZED, 0);
}

JavaParser::ParExpressionContext* JavaParser::StatementSyncContext::parExpression() {
  return getRuleContext<JavaParser::ParExpressionContext>(0);
}

JavaParser::BlockContext* JavaParser::StatementSyncContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

JavaParser::StatementSyncContext::StatementSyncContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementSyncContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementSync(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementWhileContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementWhileContext::WHILE() {
  return getToken(JavaParser::WHILE, 0);
}

JavaParser::ParExpressionContext* JavaParser::StatementWhileContext::parExpression() {
  return getRuleContext<JavaParser::ParExpressionContext>(0);
}

JavaParser::StatementContext* JavaParser::StatementWhileContext::statement() {
  return getRuleContext<JavaParser::StatementContext>(0);
}

JavaParser::StatementWhileContext::StatementWhileContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementWhileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementWhile(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementIfContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::StatementIfContext::IF() {
  return getToken(JavaParser::IF, 0);
}

JavaParser::ParExpressionContext* JavaParser::StatementIfContext::parExpression() {
  return getRuleContext<JavaParser::ParExpressionContext>(0);
}

std::vector<JavaParser::StatementContext *> JavaParser::StatementIfContext::statement() {
  return getRuleContexts<JavaParser::StatementContext>();
}

JavaParser::StatementContext* JavaParser::StatementIfContext::statement(size_t i) {
  return getRuleContext<JavaParser::StatementContext>(i);
}

tree::TerminalNode* JavaParser::StatementIfContext::ELSE() {
  return getToken(JavaParser::ELSE, 0);
}

JavaParser::StatementIfContext::StatementIfContext(StatementContext *ctx) { copyFrom(ctx); }


std::any JavaParser::StatementIfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitStatementIf(this);
  else
    return visitor->visitChildren(this);
}
JavaParser::StatementContext* JavaParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 158, JavaParser::RuleStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1166);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<JavaParser::StatementBlockContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1053);
      block();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<JavaParser::StatementAssertContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1054);
      match(JavaParser::ASSERT);
      setState(1055);
      expression(0);
      setState(1058);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::COLON) {
        setState(1056);
        match(JavaParser::COLON);
        setState(1057);
        expression(0);
      }
      setState(1060);
      match(JavaParser::SEMI);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<JavaParser::StatementIfContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(1062);
      match(JavaParser::IF);
      setState(1063);
      parExpression();
      setState(1064);
      antlrcpp::downCast<StatementIfContext *>(_localctx)->ifState = statement();
      setState(1067);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
      case 1: {
        setState(1065);
        match(JavaParser::ELSE);
        setState(1066);
        antlrcpp::downCast<StatementIfContext *>(_localctx)->elseState = statement();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<JavaParser::StatementForContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(1069);
      match(JavaParser::FOR);
      setState(1070);
      match(JavaParser::LPAREN);
      setState(1071);
      forControl();
      setState(1072);
      match(JavaParser::RPAREN);
      setState(1073);
      statement();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<JavaParser::StatementWhileContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(1075);
      match(JavaParser::WHILE);
      setState(1076);
      parExpression();
      setState(1077);
      statement();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<JavaParser::StatementDoWhileContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(1079);
      match(JavaParser::DO);
      setState(1080);
      statement();
      setState(1081);
      match(JavaParser::WHILE);
      setState(1082);
      parExpression();
      setState(1083);
      match(JavaParser::SEMI);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<JavaParser::StatementSwitchContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(1085);
      match(JavaParser::SWITCH);
      setState(1086);
      parExpression();
      setState(1087);
      match(JavaParser::LBRACE);
      setState(1091);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1088);
          switchBlockStatementGroup(); 
        }
        setState(1093);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
      }
      setState(1097);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::CASE

      || _la == JavaParser::DEFAULT) {
        setState(1094);
        switchLabel();
        setState(1099);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1100);
      match(JavaParser::RBRACE);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<JavaParser::StatementTryContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(1102);
      match(JavaParser::TRY);
      setState(1103);
      block();
      setState(1113);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::CATCH: {
          setState(1105); 
          _errHandler->sync(this);
          _la = _input->LA(1);
          do {
            setState(1104);
            catchClause();
            setState(1107); 
            _errHandler->sync(this);
            _la = _input->LA(1);
          } while (_la == JavaParser::CATCH);
          setState(1110);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaParser::FINALLY) {
            setState(1109);
            finallyBlock();
          }
          break;
        }

        case JavaParser::FINALLY: {
          setState(1112);
          finallyBlock();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<JavaParser::StatementTryContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(1115);
      match(JavaParser::TRY);
      setState(1116);
      resourceSpecification();
      setState(1117);
      block();
      setState(1121);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::CATCH) {
        setState(1118);
        catchClause();
        setState(1123);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1125);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::FINALLY) {
        setState(1124);
        finallyBlock();
      }
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<JavaParser::StatementSyncContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(1127);
      match(JavaParser::SYNCHRONIZED);
      setState(1128);
      parExpression();
      setState(1129);
      block();
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<JavaParser::StatementReturnContext>(_localctx);
      enterOuterAlt(_localctx, 11);
      setState(1131);
      match(JavaParser::RETURN);
      setState(1133);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
        setState(1132);
        expression(0);
      }
      setState(1135);
      match(JavaParser::SEMI);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<JavaParser::StatementThrowContext>(_localctx);
      enterOuterAlt(_localctx, 12);
      setState(1136);
      match(JavaParser::THROW);
      setState(1137);
      expression(0);
      setState(1138);
      match(JavaParser::SEMI);
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<JavaParser::StatementBreakContext>(_localctx);
      enterOuterAlt(_localctx, 13);
      setState(1140);
      match(JavaParser::BREAK);
      setState(1142);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::IDENTIFIER) {
        setState(1141);
        identifier();
      }
      setState(1144);
      match(JavaParser::SEMI);
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<JavaParser::StatementContinueContext>(_localctx);
      enterOuterAlt(_localctx, 14);
      setState(1145);
      match(JavaParser::CONTINUE);
      setState(1147);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 51) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::IDENTIFIER) {
        setState(1146);
        identifier();
      }
      setState(1149);
      match(JavaParser::SEMI);
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<JavaParser::StatementYieldContext>(_localctx);
      enterOuterAlt(_localctx, 15);
      setState(1150);
      match(JavaParser::YIELD);
      setState(1151);
      expression(0);
      setState(1152);
      match(JavaParser::SEMI);
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<JavaParser::StatementSemiContext>(_localctx);
      enterOuterAlt(_localctx, 16);
      setState(1154);
      match(JavaParser::SEMI);
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<JavaParser::StatementExpContext>(_localctx);
      enterOuterAlt(_localctx, 17);
      setState(1155);
      expression(0);
      setState(1156);
      match(JavaParser::SEMI);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<JavaParser::StatementSwitchExpContext>(_localctx);
      enterOuterAlt(_localctx, 18);
      setState(1158);
      switchExpression();
      setState(1160);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
      case 1: {
        setState(1159);
        match(JavaParser::SEMI);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<JavaParser::StatementLabelContext>(_localctx);
      enterOuterAlt(_localctx, 19);
      setState(1162);
      identifier();
      setState(1163);
      match(JavaParser::COLON);
      setState(1164);
      statement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchClauseContext ------------------------------------------------------------------

JavaParser::CatchClauseContext::CatchClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::CatchClauseContext::CATCH() {
  return getToken(JavaParser::CATCH, 0);
}

tree::TerminalNode* JavaParser::CatchClauseContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::CatchTypeContext* JavaParser::CatchClauseContext::catchType() {
  return getRuleContext<JavaParser::CatchTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::CatchClauseContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::CatchClauseContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::BlockContext* JavaParser::CatchClauseContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::CatchClauseContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::CatchClauseContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::CatchClauseContext::getRuleIndex() const {
  return JavaParser::RuleCatchClause;
}


std::any JavaParser::CatchClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCatchClause(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CatchClauseContext* JavaParser::catchClause() {
  CatchClauseContext *_localctx = _tracker.createInstance<CatchClauseContext>(_ctx, getState());
  enterRule(_localctx, 160, JavaParser::RuleCatchClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1168);
    match(JavaParser::CATCH);
    setState(1169);
    match(JavaParser::LPAREN);
    setState(1173);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1170);
        variableModifier(); 
      }
      setState(1175);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx);
    }
    setState(1176);
    catchType();
    setState(1177);
    identifier();
    setState(1178);
    match(JavaParser::RPAREN);
    setState(1179);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatchTypeContext ------------------------------------------------------------------

JavaParser::CatchTypeContext::CatchTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::QualifiedNameContext *> JavaParser::CatchTypeContext::qualifiedName() {
  return getRuleContexts<JavaParser::QualifiedNameContext>();
}

JavaParser::QualifiedNameContext* JavaParser::CatchTypeContext::qualifiedName(size_t i) {
  return getRuleContext<JavaParser::QualifiedNameContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::CatchTypeContext::BITOR() {
  return getTokens(JavaParser::BITOR);
}

tree::TerminalNode* JavaParser::CatchTypeContext::BITOR(size_t i) {
  return getToken(JavaParser::BITOR, i);
}


size_t JavaParser::CatchTypeContext::getRuleIndex() const {
  return JavaParser::RuleCatchType;
}


std::any JavaParser::CatchTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCatchType(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CatchTypeContext* JavaParser::catchType() {
  CatchTypeContext *_localctx = _tracker.createInstance<CatchTypeContext>(_ctx, getState());
  enterRule(_localctx, 162, JavaParser::RuleCatchType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1181);
    qualifiedName();
    setState(1186);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::BITOR) {
      setState(1182);
      match(JavaParser::BITOR);
      setState(1183);
      qualifiedName();
      setState(1188);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FinallyBlockContext ------------------------------------------------------------------

JavaParser::FinallyBlockContext::FinallyBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::FinallyBlockContext::FINALLY() {
  return getToken(JavaParser::FINALLY, 0);
}

JavaParser::BlockContext* JavaParser::FinallyBlockContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::FinallyBlockContext::getRuleIndex() const {
  return JavaParser::RuleFinallyBlock;
}


std::any JavaParser::FinallyBlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitFinallyBlock(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::FinallyBlockContext* JavaParser::finallyBlock() {
  FinallyBlockContext *_localctx = _tracker.createInstance<FinallyBlockContext>(_ctx, getState());
  enterRule(_localctx, 164, JavaParser::RuleFinallyBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1189);
    match(JavaParser::FINALLY);
    setState(1190);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceSpecificationContext ------------------------------------------------------------------

JavaParser::ResourceSpecificationContext::ResourceSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ResourceSpecificationContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::ResourcesContext* JavaParser::ResourceSpecificationContext::resources() {
  return getRuleContext<JavaParser::ResourcesContext>(0);
}

tree::TerminalNode* JavaParser::ResourceSpecificationContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

tree::TerminalNode* JavaParser::ResourceSpecificationContext::SEMI() {
  return getToken(JavaParser::SEMI, 0);
}


size_t JavaParser::ResourceSpecificationContext::getRuleIndex() const {
  return JavaParser::RuleResourceSpecification;
}


std::any JavaParser::ResourceSpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitResourceSpecification(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ResourceSpecificationContext* JavaParser::resourceSpecification() {
  ResourceSpecificationContext *_localctx = _tracker.createInstance<ResourceSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 166, JavaParser::RuleResourceSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1192);
    match(JavaParser::LPAREN);
    setState(1193);
    resources();
    setState(1195);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::SEMI) {
      setState(1194);
      match(JavaParser::SEMI);
    }
    setState(1197);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourcesContext ------------------------------------------------------------------

JavaParser::ResourcesContext::ResourcesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ResourceContext *> JavaParser::ResourcesContext::resource() {
  return getRuleContexts<JavaParser::ResourceContext>();
}

JavaParser::ResourceContext* JavaParser::ResourcesContext::resource(size_t i) {
  return getRuleContext<JavaParser::ResourceContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ResourcesContext::SEMI() {
  return getTokens(JavaParser::SEMI);
}

tree::TerminalNode* JavaParser::ResourcesContext::SEMI(size_t i) {
  return getToken(JavaParser::SEMI, i);
}


size_t JavaParser::ResourcesContext::getRuleIndex() const {
  return JavaParser::RuleResources;
}


std::any JavaParser::ResourcesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitResources(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ResourcesContext* JavaParser::resources() {
  ResourcesContext *_localctx = _tracker.createInstance<ResourcesContext>(_ctx, getState());
  enterRule(_localctx, 168, JavaParser::RuleResources);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1199);
    resource();
    setState(1204);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1200);
        match(JavaParser::SEMI);
        setState(1201);
        resource(); 
      }
      setState(1206);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceContext ------------------------------------------------------------------

JavaParser::ResourceContext::ResourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ResourceContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

JavaParser::ExpressionContext* JavaParser::ResourceContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ResourceContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

JavaParser::VariableDeclaratorIdContext* JavaParser::ResourceContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::ResourceContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

JavaParser::IdentifierContext* JavaParser::ResourceContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::ResourceContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::ResourceContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::ResourceContext::getRuleIndex() const {
  return JavaParser::RuleResource;
}


std::any JavaParser::ResourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitResource(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ResourceContext* JavaParser::resource() {
  ResourceContext *_localctx = _tracker.createInstance<ResourceContext>(_ctx, getState());
  enterRule(_localctx, 170, JavaParser::RuleResource);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1224);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1210);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1207);
          variableModifier(); 
        }
        setState(1212);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx);
      }
      setState(1218);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
      case 1: {
        setState(1213);
        classOrInterfaceType();
        setState(1214);
        variableDeclaratorId();
        break;
      }

      case 2: {
        setState(1216);
        match(JavaParser::VAR);
        setState(1217);
        identifier();
        break;
      }

      default:
        break;
      }
      setState(1220);
      match(JavaParser::ASSIGN);
      setState(1221);
      expression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1223);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchBlockStatementGroupContext ------------------------------------------------------------------

JavaParser::SwitchBlockStatementGroupContext::SwitchBlockStatementGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::SwitchLabelContext *> JavaParser::SwitchBlockStatementGroupContext::switchLabel() {
  return getRuleContexts<JavaParser::SwitchLabelContext>();
}

JavaParser::SwitchLabelContext* JavaParser::SwitchBlockStatementGroupContext::switchLabel(size_t i) {
  return getRuleContext<JavaParser::SwitchLabelContext>(i);
}

std::vector<JavaParser::BlockStatementContext *> JavaParser::SwitchBlockStatementGroupContext::blockStatement() {
  return getRuleContexts<JavaParser::BlockStatementContext>();
}

JavaParser::BlockStatementContext* JavaParser::SwitchBlockStatementGroupContext::blockStatement(size_t i) {
  return getRuleContext<JavaParser::BlockStatementContext>(i);
}


size_t JavaParser::SwitchBlockStatementGroupContext::getRuleIndex() const {
  return JavaParser::RuleSwitchBlockStatementGroup;
}


std::any JavaParser::SwitchBlockStatementGroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchBlockStatementGroup(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SwitchBlockStatementGroupContext* JavaParser::switchBlockStatementGroup() {
  SwitchBlockStatementGroupContext *_localctx = _tracker.createInstance<SwitchBlockStatementGroupContext>(_ctx, getState());
  enterRule(_localctx, 172, JavaParser::RuleSwitchBlockStatementGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1227); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1226);
      switchLabel();
      setState(1229); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == JavaParser::CASE

    || _la == JavaParser::DEFAULT);
    setState(1232); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1231);
      blockStatement();
      setState(1234); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 1) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 1)) & -334254282492513) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & -8935141145188974593) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabelContext ------------------------------------------------------------------

JavaParser::SwitchLabelContext::SwitchLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchLabelContext::CASE() {
  return getToken(JavaParser::CASE, 0);
}

JavaParser::ExpressionContext* JavaParser::SwitchLabelContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabelContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

tree::TerminalNode* JavaParser::SwitchLabelContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}


size_t JavaParser::SwitchLabelContext::getRuleIndex() const {
  return JavaParser::RuleSwitchLabel;
}


std::any JavaParser::SwitchLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchLabel(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SwitchLabelContext* JavaParser::switchLabel() {
  SwitchLabelContext *_localctx = _tracker.createInstance<SwitchLabelContext>(_ctx, getState());
  enterRule(_localctx, 174, JavaParser::RuleSwitchLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1242);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(1236);
        match(JavaParser::CASE);
        setState(1237);
        expression(0);
        setState(1238);
        match(JavaParser::COLON);
        break;
      }

      case JavaParser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1240);
        match(JavaParser::DEFAULT);
        setState(1241);
        match(JavaParser::COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForControlContext ------------------------------------------------------------------

JavaParser::ForControlContext::ForControlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::EnhancedForControlContext* JavaParser::ForControlContext::enhancedForControl() {
  return getRuleContext<JavaParser::EnhancedForControlContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::ForControlContext::SEMI() {
  return getTokens(JavaParser::SEMI);
}

tree::TerminalNode* JavaParser::ForControlContext::SEMI(size_t i) {
  return getToken(JavaParser::SEMI, i);
}

JavaParser::ForInitContext* JavaParser::ForControlContext::forInit() {
  return getRuleContext<JavaParser::ForInitContext>(0);
}

JavaParser::ForConditionContext* JavaParser::ForControlContext::forCondition() {
  return getRuleContext<JavaParser::ForConditionContext>(0);
}

JavaParser::ForUpdateContext* JavaParser::ForControlContext::forUpdate() {
  return getRuleContext<JavaParser::ForUpdateContext>(0);
}


size_t JavaParser::ForControlContext::getRuleIndex() const {
  return JavaParser::RuleForControl;
}


std::any JavaParser::ForControlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitForControl(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ForControlContext* JavaParser::forControl() {
  ForControlContext *_localctx = _tracker.createInstance<ForControlContext>(_ctx, getState());
  enterRule(_localctx, 176, JavaParser::RuleForControl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1256);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1244);
      enhancedForControl();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1246);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610998821) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
        setState(1245);
        forInit();
      }
      setState(1248);
      match(JavaParser::SEMI);
      setState(1250);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
        setState(1249);
        forCondition();
      }
      setState(1252);
      match(JavaParser::SEMI);
      setState(1254);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
        setState(1253);
        forUpdate();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInitContext ------------------------------------------------------------------

JavaParser::ForInitContext::ForInitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LocalVariableDeclarationContext* JavaParser::ForInitContext::localVariableDeclaration() {
  return getRuleContext<JavaParser::LocalVariableDeclarationContext>(0);
}

JavaParser::ExpressionListContext* JavaParser::ForInitContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}


size_t JavaParser::ForInitContext::getRuleIndex() const {
  return JavaParser::RuleForInit;
}


std::any JavaParser::ForInitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitForInit(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ForInitContext* JavaParser::forInit() {
  ForInitContext *_localctx = _tracker.createInstance<ForInitContext>(_ctx, getState());
  enterRule(_localctx, 178, JavaParser::RuleForInit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1260);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1258);
      localVariableDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1259);
      expressionList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForConditionContext ------------------------------------------------------------------

JavaParser::ForConditionContext::ForConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::ForConditionContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}


size_t JavaParser::ForConditionContext::getRuleIndex() const {
  return JavaParser::RuleForCondition;
}


std::any JavaParser::ForConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitForCondition(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ForConditionContext* JavaParser::forCondition() {
  ForConditionContext *_localctx = _tracker.createInstance<ForConditionContext>(_ctx, getState());
  enterRule(_localctx, 180, JavaParser::RuleForCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1262);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForUpdateContext ------------------------------------------------------------------

JavaParser::ForUpdateContext::ForUpdateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionListContext* JavaParser::ForUpdateContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}


size_t JavaParser::ForUpdateContext::getRuleIndex() const {
  return JavaParser::RuleForUpdate;
}


std::any JavaParser::ForUpdateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitForUpdate(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ForUpdateContext* JavaParser::forUpdate() {
  ForUpdateContext *_localctx = _tracker.createInstance<ForUpdateContext>(_ctx, getState());
  enterRule(_localctx, 182, JavaParser::RuleForUpdate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1264);
    expressionList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnhancedForControlContext ------------------------------------------------------------------

JavaParser::EnhancedForControlContext::EnhancedForControlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::VariableDeclaratorIdContext* JavaParser::EnhancedForControlContext::variableDeclaratorId() {
  return getRuleContext<JavaParser::VariableDeclaratorIdContext>(0);
}

tree::TerminalNode* JavaParser::EnhancedForControlContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

JavaParser::ExpressionContext* JavaParser::EnhancedForControlContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::TypeTypeContext* JavaParser::EnhancedForControlContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::EnhancedForControlContext::VAR() {
  return getToken(JavaParser::VAR, 0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::EnhancedForControlContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::EnhancedForControlContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}


size_t JavaParser::EnhancedForControlContext::getRuleIndex() const {
  return JavaParser::RuleEnhancedForControl;
}


std::any JavaParser::EnhancedForControlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitEnhancedForControl(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::EnhancedForControlContext* JavaParser::enhancedForControl() {
  EnhancedForControlContext *_localctx = _tracker.createInstance<EnhancedForControlContext>(_ctx, getState());
  enterRule(_localctx, 184, JavaParser::RuleEnhancedForControl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1269);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1266);
        variableModifier(); 
      }
      setState(1271);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx);
    }
    setState(1274);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      setState(1272);
      typeType();
      break;
    }

    case 2: {
      setState(1273);
      match(JavaParser::VAR);
      break;
    }

    default:
      break;
    }
    setState(1276);
    variableDeclaratorId();
    setState(1277);
    match(JavaParser::COLON);
    setState(1278);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParExpressionContext ------------------------------------------------------------------

JavaParser::ParExpressionContext::ParExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ParExpressionContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::ExpressionContext* JavaParser::ParExpressionContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ParExpressionContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}


size_t JavaParser::ParExpressionContext::getRuleIndex() const {
  return JavaParser::RuleParExpression;
}


std::any JavaParser::ParExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitParExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ParExpressionContext* JavaParser::parExpression() {
  ParExpressionContext *_localctx = _tracker.createInstance<ParExpressionContext>(_ctx, getState());
  enterRule(_localctx, 186, JavaParser::RuleParExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1280);
    match(JavaParser::LPAREN);
    setState(1281);
    expression(0);
    setState(1282);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionListContext ------------------------------------------------------------------

JavaParser::ExpressionListContext::ExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ExpressionListContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ExpressionListContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ExpressionListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::ExpressionListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::ExpressionListContext::getRuleIndex() const {
  return JavaParser::RuleExpressionList;
}


std::any JavaParser::ExpressionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ExpressionListContext* JavaParser::expressionList() {
  ExpressionListContext *_localctx = _tracker.createInstance<ExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 188, JavaParser::RuleExpressionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1284);
    expression(0);
    setState(1289);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1285);
      match(JavaParser::COMMA);
      setState(1286);
      expression(0);
      setState(1291);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MethodCallContext ------------------------------------------------------------------

JavaParser::MethodCallContext::MethodCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::MethodCallContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::MethodCallContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::MethodCallContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ExpressionListContext* JavaParser::MethodCallContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}

tree::TerminalNode* JavaParser::MethodCallContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

tree::TerminalNode* JavaParser::MethodCallContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}


size_t JavaParser::MethodCallContext::getRuleIndex() const {
  return JavaParser::RuleMethodCall;
}


std::any JavaParser::MethodCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitMethodCall(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::MethodCallContext* JavaParser::methodCall() {
  MethodCallContext *_localctx = _tracker.createInstance<MethodCallContext>(_ctx, getState());
  enterRule(_localctx, 190, JavaParser::RuleMethodCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1311);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1292);
        identifier();
        setState(1293);
        match(JavaParser::LPAREN);
        setState(1295);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 3) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
          setState(1294);
          expressionList();
        }
        setState(1297);
        match(JavaParser::RPAREN);
        break;
      }

      case JavaParser::THIS: {
        enterOuterAlt(_localctx, 2);
        setState(1299);
        match(JavaParser::THIS);
        setState(1300);
        match(JavaParser::LPAREN);
        setState(1302);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 3) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
          setState(1301);
          expressionList();
        }
        setState(1304);
        match(JavaParser::RPAREN);
        break;
      }

      case JavaParser::SUPER: {
        enterOuterAlt(_localctx, 3);
        setState(1305);
        match(JavaParser::SUPER);
        setState(1306);
        match(JavaParser::LPAREN);
        setState(1308);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 3) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
          setState(1307);
          expressionList();
        }
        setState(1310);
        match(JavaParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

JavaParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::ExpressionContext::getRuleIndex() const {
  return JavaParser::RuleExpression;
}

void JavaParser::ExpressionContext::copyFrom(ExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ExpressionNewContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::ExpressionNewContext::NEW() {
  return getToken(JavaParser::NEW, 0);
}

JavaParser::CreatorContext* JavaParser::ExpressionNewContext::creator() {
  return getRuleContext<JavaParser::CreatorContext>(0);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::ExpressionNewContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

JavaParser::ExpressionNewContext::ExpressionNewContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionNewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionNew(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionPosNegSignContext ------------------------------------------------------------------

JavaParser::ExpressionContext* JavaParser::ExpressionPosNegSignContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionPosNegSignContext::ADD() {
  return getToken(JavaParser::ADD, 0);
}

tree::TerminalNode* JavaParser::ExpressionPosNegSignContext::SUB() {
  return getToken(JavaParser::SUB, 0);
}

JavaParser::ExpressionPosNegSignContext::ExpressionPosNegSignContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionPosNegSignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionPosNegSign(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionReferenceContext ------------------------------------------------------------------

JavaParser::ExpressionContext* JavaParser::ExpressionReferenceContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionReferenceContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

JavaParser::IdentifierContext* JavaParser::ExpressionReferenceContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::MethodCallContext* JavaParser::ExpressionReferenceContext::methodCall() {
  return getRuleContext<JavaParser::MethodCallContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionReferenceContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

tree::TerminalNode* JavaParser::ExpressionReferenceContext::NEW() {
  return getToken(JavaParser::NEW, 0);
}

JavaParser::InnerCreatorContext* JavaParser::ExpressionReferenceContext::innerCreator() {
  return getRuleContext<JavaParser::InnerCreatorContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionReferenceContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}

JavaParser::SuperSuffixContext* JavaParser::ExpressionReferenceContext::superSuffix() {
  return getRuleContext<JavaParser::SuperSuffixContext>(0);
}

JavaParser::ExplicitGenericInvocationContext* JavaParser::ExpressionReferenceContext::explicitGenericInvocation() {
  return getRuleContext<JavaParser::ExplicitGenericInvocationContext>(0);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::ExpressionReferenceContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

JavaParser::ExpressionReferenceContext::ExpressionReferenceContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionReference(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionMethodReferenceContext ------------------------------------------------------------------

JavaParser::TypeTypeContext* JavaParser::ExpressionMethodReferenceContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionMethodReferenceContext::COLONCOLON() {
  return getToken(JavaParser::COLONCOLON, 0);
}

JavaParser::IdentifierContext* JavaParser::ExpressionMethodReferenceContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionMethodReferenceContext::NEW() {
  return getToken(JavaParser::NEW, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::ExpressionMethodReferenceContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}

JavaParser::ClassTypeContext* JavaParser::ExpressionMethodReferenceContext::classType() {
  return getRuleContext<JavaParser::ClassTypeContext>(0);
}

JavaParser::ExpressionContext* JavaParser::ExpressionMethodReferenceContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::ExpressionMethodReferenceContext::ExpressionMethodReferenceContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionMethodReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionMethodReference(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionInstanceOfContext ------------------------------------------------------------------

JavaParser::ExpressionContext* JavaParser::ExpressionInstanceOfContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionInstanceOfContext::INSTANCEOF() {
  return getToken(JavaParser::INSTANCEOF, 0);
}

JavaParser::TypeTypeContext* JavaParser::ExpressionInstanceOfContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::PatternContext* JavaParser::ExpressionInstanceOfContext::pattern() {
  return getRuleContext<JavaParser::PatternContext>(0);
}

JavaParser::ExpressionInstanceOfContext::ExpressionInstanceOfContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionInstanceOfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionInstanceOf(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionAssignContext ------------------------------------------------------------------

std::vector<JavaParser::ExpressionContext *> JavaParser::ExpressionAssignContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ExpressionAssignContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::ASSIGN() {
  return getToken(JavaParser::ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::ADD_ASSIGN() {
  return getToken(JavaParser::ADD_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::SUB_ASSIGN() {
  return getToken(JavaParser::SUB_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::MUL_ASSIGN() {
  return getToken(JavaParser::MUL_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::DIV_ASSIGN() {
  return getToken(JavaParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::AND_ASSIGN() {
  return getToken(JavaParser::AND_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::OR_ASSIGN() {
  return getToken(JavaParser::OR_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::XOR_ASSIGN() {
  return getToken(JavaParser::XOR_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::RSHIFT_ASSIGN() {
  return getToken(JavaParser::RSHIFT_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::URSHIFT_ASSIGN() {
  return getToken(JavaParser::URSHIFT_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::LSHIFT_ASSIGN() {
  return getToken(JavaParser::LSHIFT_ASSIGN, 0);
}

tree::TerminalNode* JavaParser::ExpressionAssignContext::MOD_ASSIGN() {
  return getToken(JavaParser::MOD_ASSIGN, 0);
}

JavaParser::ExpressionAssignContext::ExpressionAssignContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionAssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionAssign(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionUnaryLogicalContext ------------------------------------------------------------------

JavaParser::ExpressionContext* JavaParser::ExpressionUnaryLogicalContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionUnaryLogicalContext::TILDE() {
  return getToken(JavaParser::TILDE, 0);
}

tree::TerminalNode* JavaParser::ExpressionUnaryLogicalContext::BANG() {
  return getToken(JavaParser::BANG, 0);
}

JavaParser::ExpressionUnaryLogicalContext::ExpressionUnaryLogicalContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionUnaryLogicalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionUnaryLogical(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionLambdaContext ------------------------------------------------------------------

JavaParser::LambdaExpressionContext* JavaParser::ExpressionLambdaContext::lambdaExpression() {
  return getRuleContext<JavaParser::LambdaExpressionContext>(0);
}

JavaParser::ExpressionLambdaContext::ExpressionLambdaContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionLambdaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionLambda(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionPrimaryContext ------------------------------------------------------------------

JavaParser::PrimaryContext* JavaParser::ExpressionPrimaryContext::primary() {
  return getRuleContext<JavaParser::PrimaryContext>(0);
}

JavaParser::ExpressionPrimaryContext::ExpressionPrimaryContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionPrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionPrimary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionArithmeticalContext ------------------------------------------------------------------

std::vector<JavaParser::ExpressionContext *> JavaParser::ExpressionArithmeticalContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ExpressionArithmeticalContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

tree::TerminalNode* JavaParser::ExpressionArithmeticalContext::MUL() {
  return getToken(JavaParser::MUL, 0);
}

tree::TerminalNode* JavaParser::ExpressionArithmeticalContext::DIV() {
  return getToken(JavaParser::DIV, 0);
}

tree::TerminalNode* JavaParser::ExpressionArithmeticalContext::MOD() {
  return getToken(JavaParser::MOD, 0);
}

tree::TerminalNode* JavaParser::ExpressionArithmeticalContext::ADD() {
  return getToken(JavaParser::ADD, 0);
}

tree::TerminalNode* JavaParser::ExpressionArithmeticalContext::SUB() {
  return getToken(JavaParser::SUB, 0);
}

JavaParser::ExpressionArithmeticalContext::ExpressionArithmeticalContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionArithmeticalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionArithmetical(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionSwitchContext ------------------------------------------------------------------

JavaParser::SwitchExpressionContext* JavaParser::ExpressionSwitchContext::switchExpression() {
  return getRuleContext<JavaParser::SwitchExpressionContext>(0);
}

JavaParser::ExpressionSwitchContext::ExpressionSwitchContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionSwitchContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionSwitch(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionConditionalContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::ExpressionConditionalContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ExpressionConditionalContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ExpressionConditionalContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

tree::TerminalNode* JavaParser::ExpressionConditionalContext::QUESTION() {
  return getToken(JavaParser::QUESTION, 0);
}

JavaParser::ExpressionConditionalContext::ExpressionConditionalContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionConditionalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionConditional(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionCastContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::ExpressionCastContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

std::vector<JavaParser::TypeTypeContext *> JavaParser::ExpressionCastContext::typeType() {
  return getRuleContexts<JavaParser::TypeTypeContext>();
}

JavaParser::TypeTypeContext* JavaParser::ExpressionCastContext::typeType(size_t i) {
  return getRuleContext<JavaParser::TypeTypeContext>(i);
}

tree::TerminalNode* JavaParser::ExpressionCastContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ExpressionContext* JavaParser::ExpressionCastContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ExpressionCastContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ExpressionCastContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ExpressionCastContext::BITAND() {
  return getTokens(JavaParser::BITAND);
}

tree::TerminalNode* JavaParser::ExpressionCastContext::BITAND(size_t i) {
  return getToken(JavaParser::BITAND, i);
}

JavaParser::ExpressionCastContext::ExpressionCastContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionCastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionCast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionShiftContext ------------------------------------------------------------------

std::vector<JavaParser::ExpressionContext *> JavaParser::ExpressionShiftContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ExpressionShiftContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::ExpressionShiftContext::LT() {
  return getTokens(JavaParser::LT);
}

tree::TerminalNode* JavaParser::ExpressionShiftContext::LT(size_t i) {
  return getToken(JavaParser::LT, i);
}

std::vector<tree::TerminalNode *> JavaParser::ExpressionShiftContext::GT() {
  return getTokens(JavaParser::GT);
}

tree::TerminalNode* JavaParser::ExpressionShiftContext::GT(size_t i) {
  return getToken(JavaParser::GT, i);
}

JavaParser::ExpressionShiftContext::ExpressionShiftContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionShiftContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionShift(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionRelationalContext ------------------------------------------------------------------

std::vector<JavaParser::ExpressionContext *> JavaParser::ExpressionRelationalContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ExpressionRelationalContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

tree::TerminalNode* JavaParser::ExpressionRelationalContext::LE() {
  return getToken(JavaParser::LE, 0);
}

tree::TerminalNode* JavaParser::ExpressionRelationalContext::GE() {
  return getToken(JavaParser::GE, 0);
}

tree::TerminalNode* JavaParser::ExpressionRelationalContext::GT() {
  return getToken(JavaParser::GT, 0);
}

tree::TerminalNode* JavaParser::ExpressionRelationalContext::LT() {
  return getToken(JavaParser::LT, 0);
}

tree::TerminalNode* JavaParser::ExpressionRelationalContext::EQUAL() {
  return getToken(JavaParser::EQUAL, 0);
}

tree::TerminalNode* JavaParser::ExpressionRelationalContext::NOTEQUAL() {
  return getToken(JavaParser::NOTEQUAL, 0);
}

JavaParser::ExpressionRelationalContext::ExpressionRelationalContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionRelationalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionRelational(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionArrayAccessContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::ExpressionArrayAccessContext::LBRACK() {
  return getToken(JavaParser::LBRACK, 0);
}

tree::TerminalNode* JavaParser::ExpressionArrayAccessContext::RBRACK() {
  return getToken(JavaParser::RBRACK, 0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ExpressionArrayAccessContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ExpressionArrayAccessContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

JavaParser::ExpressionArrayAccessContext::ExpressionArrayAccessContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionArrayAccessContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionArrayAccess(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionIncDecContext ------------------------------------------------------------------

JavaParser::ExpressionContext* JavaParser::ExpressionIncDecContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::ExpressionIncDecContext::INC() {
  return getToken(JavaParser::INC, 0);
}

tree::TerminalNode* JavaParser::ExpressionIncDecContext::DEC() {
  return getToken(JavaParser::DEC, 0);
}

JavaParser::ExpressionIncDecContext::ExpressionIncDecContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionIncDecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionIncDec(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionMethodCallContext ------------------------------------------------------------------

JavaParser::MethodCallContext* JavaParser::ExpressionMethodCallContext::methodCall() {
  return getRuleContext<JavaParser::MethodCallContext>(0);
}

JavaParser::ExpressionMethodCallContext::ExpressionMethodCallContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionMethodCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionMethodCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExpressionLogicalContext ------------------------------------------------------------------

std::vector<JavaParser::ExpressionContext *> JavaParser::ExpressionLogicalContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ExpressionLogicalContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}

tree::TerminalNode* JavaParser::ExpressionLogicalContext::BITAND() {
  return getToken(JavaParser::BITAND, 0);
}

tree::TerminalNode* JavaParser::ExpressionLogicalContext::CARET() {
  return getToken(JavaParser::CARET, 0);
}

tree::TerminalNode* JavaParser::ExpressionLogicalContext::BITOR() {
  return getToken(JavaParser::BITOR, 0);
}

tree::TerminalNode* JavaParser::ExpressionLogicalContext::AND() {
  return getToken(JavaParser::AND, 0);
}

tree::TerminalNode* JavaParser::ExpressionLogicalContext::OR() {
  return getToken(JavaParser::OR, 0);
}

JavaParser::ExpressionLogicalContext::ExpressionLogicalContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any JavaParser::ExpressionLogicalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExpressionLogical(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ExpressionContext* JavaParser::expression() {
   return expression(0);
}

JavaParser::ExpressionContext* JavaParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  JavaParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 192;
  enterRecursionRule(_localctx, 192, JavaParser::RuleExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1363);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<ExpressionPrimaryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(1314);
      primary();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ExpressionMethodCallContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1315);
      methodCall();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<ExpressionNewContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1316);
      match(JavaParser::NEW);
      setState(1318);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1317);
        nonWildcardTypeArguments();
      }
      setState(1320);
      creator();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<ExpressionCastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1321);
      match(JavaParser::LPAREN);
      setState(1325);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1322);
          annotation(); 
        }
        setState(1327);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
      }
      setState(1328);
      typeType();
      setState(1333);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::BITAND) {
        setState(1329);
        match(JavaParser::BITAND);
        setState(1330);
        typeType();
        setState(1335);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1336);
      match(JavaParser::RPAREN);
      setState(1337);
      expression(23);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<ExpressionIncDecContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1339);
      antlrcpp::downCast<ExpressionIncDecContext *>(_localctx)->prefix = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == JavaParser::INC

      || _la == JavaParser::DEC)) {
        antlrcpp::downCast<ExpressionIncDecContext *>(_localctx)->prefix = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1340);
      expression(21);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<ExpressionPosNegSignContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1341);
      antlrcpp::downCast<ExpressionPosNegSignContext *>(_localctx)->prefix = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == JavaParser::ADD

      || _la == JavaParser::SUB)) {
        antlrcpp::downCast<ExpressionPosNegSignContext *>(_localctx)->prefix = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1342);
      expression(20);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<ExpressionUnaryLogicalContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1343);
      antlrcpp::downCast<ExpressionUnaryLogicalContext *>(_localctx)->prefix = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == JavaParser::BANG

      || _la == JavaParser::TILDE)) {
        antlrcpp::downCast<ExpressionUnaryLogicalContext *>(_localctx)->prefix = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1344);
      expression(19);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<ExpressionLambdaContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1345);
      lambdaExpression();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ExpressionSwitchContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1346);
      switchExpression();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<ExpressionMethodReferenceContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1347);
      typeType();
      setState(1348);
      match(JavaParser::COLONCOLON);
      setState(1354);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::MODULE:
        case JavaParser::OPEN:
        case JavaParser::REQUIRES:
        case JavaParser::EXPORTS:
        case JavaParser::OPENS:
        case JavaParser::TO:
        case JavaParser::USES:
        case JavaParser::PROVIDES:
        case JavaParser::WITH:
        case JavaParser::TRANSITIVE:
        case JavaParser::VAR:
        case JavaParser::YIELD:
        case JavaParser::RECORD:
        case JavaParser::SEALED:
        case JavaParser::PERMITS:
        case JavaParser::LT:
        case JavaParser::IDENTIFIER: {
          setState(1350);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaParser::LT) {
            setState(1349);
            typeArguments();
          }
          setState(1352);
          identifier();
          break;
        }

        case JavaParser::NEW: {
          setState(1353);
          match(JavaParser::NEW);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<ExpressionMethodReferenceContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(1356);
      classType();
      setState(1357);
      match(JavaParser::COLONCOLON);
      setState(1359);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == JavaParser::LT) {
        setState(1358);
        typeArguments();
      }
      setState(1361);
      match(JavaParser::NEW);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(1448);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1446);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ExpressionArithmeticalContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1365);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
          setState(1366);
          antlrcpp::downCast<ExpressionArithmeticalContext *>(_localctx)->bop = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 104) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 104)) & 35) != 0))) {
            antlrcpp::downCast<ExpressionArithmeticalContext *>(_localctx)->bop = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1367);
          antlrcpp::downCast<ExpressionArithmeticalContext *>(_localctx)->e2 = expression(19);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ExpressionArithmeticalContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1368);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(1369);
          antlrcpp::downCast<ExpressionArithmeticalContext *>(_localctx)->bop = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == JavaParser::ADD

          || _la == JavaParser::SUB)) {
            antlrcpp::downCast<ExpressionArithmeticalContext *>(_localctx)->bop = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1370);
          antlrcpp::downCast<ExpressionArithmeticalContext *>(_localctx)->e2 = expression(18);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ExpressionShiftContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1371);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(1379);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
          case 1: {
            setState(1372);
            antlrcpp::downCast<ExpressionShiftContext *>(_localctx)->bop1 = match(JavaParser::LT);
            setState(1373);
            match(JavaParser::LT);
            break;
          }

          case 2: {
            setState(1374);
            antlrcpp::downCast<ExpressionShiftContext *>(_localctx)->bop2 = match(JavaParser::GT);
            setState(1375);
            match(JavaParser::GT);
            setState(1376);
            match(JavaParser::GT);
            break;
          }

          case 3: {
            setState(1377);
            antlrcpp::downCast<ExpressionShiftContext *>(_localctx)->bop3 = match(JavaParser::GT);
            setState(1378);
            match(JavaParser::GT);
            break;
          }

          default:
            break;
          }
          setState(1381);
          antlrcpp::downCast<ExpressionShiftContext *>(_localctx)->e2 = expression(17);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ExpressionRelationalContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1382);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(1383);
          antlrcpp::downCast<ExpressionRelationalContext *>(_localctx)->bop = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 88) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 88)) & 387) != 0))) {
            antlrcpp::downCast<ExpressionRelationalContext *>(_localctx)->bop = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1384);
          antlrcpp::downCast<ExpressionRelationalContext *>(_localctx)->e2 = expression(16);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ExpressionRelationalContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1385);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(1386);
          antlrcpp::downCast<ExpressionRelationalContext *>(_localctx)->bop = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == JavaParser::EQUAL

          || _la == JavaParser::NOTEQUAL)) {
            antlrcpp::downCast<ExpressionRelationalContext *>(_localctx)->bop = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1387);
          antlrcpp::downCast<ExpressionRelationalContext *>(_localctx)->e2 = expression(14);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<ExpressionLogicalContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1388);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(1389);
          antlrcpp::downCast<ExpressionLogicalContext *>(_localctx)->bop = match(JavaParser::BITAND);
          setState(1390);
          antlrcpp::downCast<ExpressionLogicalContext *>(_localctx)->e2 = expression(13);
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<ExpressionLogicalContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1391);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(1392);
          antlrcpp::downCast<ExpressionLogicalContext *>(_localctx)->bop = match(JavaParser::CARET);
          setState(1393);
          antlrcpp::downCast<ExpressionLogicalContext *>(_localctx)->e2 = expression(12);
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<ExpressionLogicalContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1394);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(1395);
          antlrcpp::downCast<ExpressionLogicalContext *>(_localctx)->bop = match(JavaParser::BITOR);
          setState(1396);
          antlrcpp::downCast<ExpressionLogicalContext *>(_localctx)->e2 = expression(11);
          break;
        }

        case 9: {
          auto newContext = _tracker.createInstance<ExpressionLogicalContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1397);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(1398);
          antlrcpp::downCast<ExpressionLogicalContext *>(_localctx)->bop = match(JavaParser::AND);
          setState(1399);
          antlrcpp::downCast<ExpressionLogicalContext *>(_localctx)->e2 = expression(10);
          break;
        }

        case 10: {
          auto newContext = _tracker.createInstance<ExpressionLogicalContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1400);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(1401);
          antlrcpp::downCast<ExpressionLogicalContext *>(_localctx)->bop = match(JavaParser::OR);
          setState(1402);
          antlrcpp::downCast<ExpressionLogicalContext *>(_localctx)->e2 = expression(9);
          break;
        }

        case 11: {
          auto newContext = _tracker.createInstance<ExpressionConditionalContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1403);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(1404);
          antlrcpp::downCast<ExpressionConditionalContext *>(_localctx)->bop = match(JavaParser::QUESTION);
          setState(1405);
          antlrcpp::downCast<ExpressionConditionalContext *>(_localctx)->e2 = expression(0);
          setState(1406);
          match(JavaParser::COLON);
          setState(1407);
          antlrcpp::downCast<ExpressionConditionalContext *>(_localctx)->e3 = expression(7);
          break;
        }

        case 12: {
          auto newContext = _tracker.createInstance<ExpressionAssignContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1409);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(1410);
          antlrcpp::downCast<ExpressionAssignContext *>(_localctx)->bop = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 87) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 87)) & 17171480577) != 0))) {
            antlrcpp::downCast<ExpressionAssignContext *>(_localctx)->bop = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(1411);
          antlrcpp::downCast<ExpressionAssignContext *>(_localctx)->e2 = expression(6);
          break;
        }

        case 13: {
          auto newContext = _tracker.createInstance<ExpressionReferenceContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1412);

          if (!(precpred(_ctx, 27))) throw FailedPredicateException(this, "precpred(_ctx, 27)");
          setState(1413);
          antlrcpp::downCast<ExpressionReferenceContext *>(_localctx)->bop = match(JavaParser::DOT);
          setState(1425);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
          case 1: {
            setState(1414);
            identifier();
            break;
          }

          case 2: {
            setState(1415);
            methodCall();
            break;
          }

          case 3: {
            setState(1416);
            match(JavaParser::THIS);
            break;
          }

          case 4: {
            setState(1417);
            match(JavaParser::NEW);
            setState(1419);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == JavaParser::LT) {
              setState(1418);
              nonWildcardTypeArguments();
            }
            setState(1421);
            innerCreator();
            break;
          }

          case 5: {
            setState(1422);
            match(JavaParser::SUPER);
            setState(1423);
            superSuffix();
            break;
          }

          case 6: {
            setState(1424);
            explicitGenericInvocation();
            break;
          }

          default:
            break;
          }
          break;
        }

        case 14: {
          auto newContext = _tracker.createInstance<ExpressionArrayAccessContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->e1 = previousContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1427);

          if (!(precpred(_ctx, 26))) throw FailedPredicateException(this, "precpred(_ctx, 26)");
          setState(1428);
          match(JavaParser::LBRACK);
          setState(1429);
          antlrcpp::downCast<ExpressionArrayAccessContext *>(_localctx)->e2 = expression(0);
          setState(1430);
          match(JavaParser::RBRACK);
          break;
        }

        case 15: {
          auto newContext = _tracker.createInstance<ExpressionIncDecContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1432);

          if (!(precpred(_ctx, 22))) throw FailedPredicateException(this, "precpred(_ctx, 22)");
          setState(1433);
          antlrcpp::downCast<ExpressionIncDecContext *>(_localctx)->postfix = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == JavaParser::INC

          || _la == JavaParser::DEC)) {
            antlrcpp::downCast<ExpressionIncDecContext *>(_localctx)->postfix = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        case 16: {
          auto newContext = _tracker.createInstance<ExpressionInstanceOfContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1434);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(1435);
          antlrcpp::downCast<ExpressionInstanceOfContext *>(_localctx)->bop = match(JavaParser::INSTANCEOF);
          setState(1438);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
          case 1: {
            setState(1436);
            typeType();
            break;
          }

          case 2: {
            setState(1437);
            pattern();
            break;
          }

          default:
            break;
          }
          break;
        }

        case 17: {
          auto newContext = _tracker.createInstance<ExpressionMethodReferenceContext>(_tracker.createInstance<ExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleExpression);
          setState(1440);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(1441);
          match(JavaParser::COLONCOLON);
          setState(1443);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaParser::LT) {
            setState(1442);
            typeArguments();
          }
          setState(1445);
          identifier();
          break;
        }

        default:
          break;
        } 
      }
      setState(1450);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

JavaParser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::TypeTypeContext* JavaParser::PatternContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::PatternContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::PatternContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::PatternContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::PatternContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::PatternContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}


size_t JavaParser::PatternContext::getRuleIndex() const {
  return JavaParser::RulePattern;
}


std::any JavaParser::PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPattern(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::PatternContext* JavaParser::pattern() {
  PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, getState());
  enterRule(_localctx, 194, JavaParser::RulePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1454);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1451);
        variableModifier(); 
      }
      setState(1456);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    }
    setState(1457);
    typeType();
    setState(1461);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1458);
        annotation(); 
      }
      setState(1463);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
    }
    setState(1464);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaExpressionContext ------------------------------------------------------------------

JavaParser::LambdaExpressionContext::LambdaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::LambdaParametersContext* JavaParser::LambdaExpressionContext::lambdaParameters() {
  return getRuleContext<JavaParser::LambdaParametersContext>(0);
}

tree::TerminalNode* JavaParser::LambdaExpressionContext::ARROW() {
  return getToken(JavaParser::ARROW, 0);
}

JavaParser::LambdaBodyContext* JavaParser::LambdaExpressionContext::lambdaBody() {
  return getRuleContext<JavaParser::LambdaBodyContext>(0);
}


size_t JavaParser::LambdaExpressionContext::getRuleIndex() const {
  return JavaParser::RuleLambdaExpression;
}


std::any JavaParser::LambdaExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLambdaExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LambdaExpressionContext* JavaParser::lambdaExpression() {
  LambdaExpressionContext *_localctx = _tracker.createInstance<LambdaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 196, JavaParser::RuleLambdaExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1466);
    lambdaParameters();
    setState(1467);
    match(JavaParser::ARROW);
    setState(1468);
    lambdaBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaParametersContext ------------------------------------------------------------------

JavaParser::LambdaParametersContext::LambdaParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::LambdaParametersContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::LambdaParametersContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

tree::TerminalNode* JavaParser::LambdaParametersContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::LambdaParametersContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::FormalParameterListContext* JavaParser::LambdaParametersContext::formalParameterList() {
  return getRuleContext<JavaParser::FormalParameterListContext>(0);
}

std::vector<tree::TerminalNode *> JavaParser::LambdaParametersContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::LambdaParametersContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}

JavaParser::LambdaLVTIListContext* JavaParser::LambdaParametersContext::lambdaLVTIList() {
  return getRuleContext<JavaParser::LambdaLVTIListContext>(0);
}


size_t JavaParser::LambdaParametersContext::getRuleIndex() const {
  return JavaParser::RuleLambdaParameters;
}


std::any JavaParser::LambdaParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLambdaParameters(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LambdaParametersContext* JavaParser::lambdaParameters() {
  LambdaParametersContext *_localctx = _tracker.createInstance<LambdaParametersContext>(_ctx, getState());
  enterRule(_localctx, 198, JavaParser::RuleLambdaParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1492);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1470);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1471);
      match(JavaParser::LPAREN);
      setState(1473);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 3) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 3)) & 9223090579141986341) != 0) || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(1472);
        formalParameterList();
      }
      setState(1475);
      match(JavaParser::RPAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1476);
      match(JavaParser::LPAREN);
      setState(1477);
      identifier();
      setState(1482);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == JavaParser::COMMA) {
        setState(1478);
        match(JavaParser::COMMA);
        setState(1479);
        identifier();
        setState(1484);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1485);
      match(JavaParser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1487);
      match(JavaParser::LPAREN);
      setState(1489);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 18) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 18)) & 281466386776065) != 0) || _la == JavaParser::AT

      || _la == JavaParser::IDENTIFIER) {
        setState(1488);
        lambdaLVTIList();
      }
      setState(1491);
      match(JavaParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaBodyContext ------------------------------------------------------------------

JavaParser::LambdaBodyContext::LambdaBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ExpressionContext* JavaParser::LambdaBodyContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

JavaParser::BlockContext* JavaParser::LambdaBodyContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}


size_t JavaParser::LambdaBodyContext::getRuleIndex() const {
  return JavaParser::RuleLambdaBody;
}


std::any JavaParser::LambdaBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitLambdaBody(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::LambdaBodyContext* JavaParser::lambdaBody() {
  LambdaBodyContext *_localctx = _tracker.createInstance<LambdaBodyContext>(_ctx, getState());
  enterRule(_localctx, 200, JavaParser::RuleLambdaBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1496);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::SWITCH:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL:
      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL:
      case JavaParser::BOOL_LITERAL:
      case JavaParser::CHAR_LITERAL:
      case JavaParser::STRING_LITERAL:
      case JavaParser::TEXT_BLOCK:
      case JavaParser::NULL_LITERAL:
      case JavaParser::LPAREN:
      case JavaParser::LT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1494);
        expression(0);
        break;
      }

      case JavaParser::LBRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1495);
        block();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

JavaParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t JavaParser::PrimaryContext::getRuleIndex() const {
  return JavaParser::RulePrimary;
}

void JavaParser::PrimaryContext::copyFrom(PrimaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PrimarySuperContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::PrimarySuperContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}

JavaParser::PrimarySuperContext::PrimarySuperContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::PrimarySuperContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPrimarySuper(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryExpContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::PrimaryExpContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::ExpressionContext* JavaParser::PrimaryExpContext::expression() {
  return getRuleContext<JavaParser::ExpressionContext>(0);
}

tree::TerminalNode* JavaParser::PrimaryExpContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::PrimaryExpContext::PrimaryExpContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::PrimaryExpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryExp(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryThisContext ------------------------------------------------------------------

tree::TerminalNode* JavaParser::PrimaryThisContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

JavaParser::PrimaryThisContext::PrimaryThisContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::PrimaryThisContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryThis(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryMethodCallWithExplicitTypeArgumentContext ------------------------------------------------------------------

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::PrimaryMethodCallWithExplicitTypeArgumentContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

JavaParser::ExplicitGenericInvocationSuffixContext* JavaParser::PrimaryMethodCallWithExplicitTypeArgumentContext::explicitGenericInvocationSuffix() {
  return getRuleContext<JavaParser::ExplicitGenericInvocationSuffixContext>(0);
}

tree::TerminalNode* JavaParser::PrimaryMethodCallWithExplicitTypeArgumentContext::THIS() {
  return getToken(JavaParser::THIS, 0);
}

JavaParser::ArgumentsContext* JavaParser::PrimaryMethodCallWithExplicitTypeArgumentContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

JavaParser::PrimaryMethodCallWithExplicitTypeArgumentContext::PrimaryMethodCallWithExplicitTypeArgumentContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::PrimaryMethodCallWithExplicitTypeArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryMethodCallWithExplicitTypeArgument(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryIdentifierContext ------------------------------------------------------------------

JavaParser::IdentifierContext* JavaParser::PrimaryIdentifierContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::PrimaryIdentifierContext::PrimaryIdentifierContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::PrimaryIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryClassContext ------------------------------------------------------------------

JavaParser::TypeTypeOrVoidContext* JavaParser::PrimaryClassContext::typeTypeOrVoid() {
  return getRuleContext<JavaParser::TypeTypeOrVoidContext>(0);
}

tree::TerminalNode* JavaParser::PrimaryClassContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

tree::TerminalNode* JavaParser::PrimaryClassContext::CLASS() {
  return getToken(JavaParser::CLASS, 0);
}

JavaParser::PrimaryClassContext::PrimaryClassContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::PrimaryClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryClass(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryLiteralContext ------------------------------------------------------------------

JavaParser::LiteralContext* JavaParser::PrimaryLiteralContext::literal() {
  return getRuleContext<JavaParser::LiteralContext>(0);
}

JavaParser::PrimaryLiteralContext::PrimaryLiteralContext(PrimaryContext *ctx) { copyFrom(ctx); }


std::any JavaParser::PrimaryLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPrimaryLiteral(this);
  else
    return visitor->visitChildren(this);
}
JavaParser::PrimaryContext* JavaParser::primary() {
  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
  enterRule(_localctx, 202, JavaParser::RulePrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1516);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<JavaParser::PrimaryExpContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1498);
      match(JavaParser::LPAREN);
      setState(1499);
      expression(0);
      setState(1500);
      match(JavaParser::RPAREN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<JavaParser::PrimaryThisContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1502);
      match(JavaParser::THIS);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<JavaParser::PrimarySuperContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(1503);
      match(JavaParser::SUPER);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<JavaParser::PrimaryLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(1504);
      literal();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<JavaParser::PrimaryIdentifierContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(1505);
      identifier();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<JavaParser::PrimaryClassContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(1506);
      typeTypeOrVoid();
      setState(1507);
      match(JavaParser::DOT);
      setState(1508);
      match(JavaParser::CLASS);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<JavaParser::PrimaryMethodCallWithExplicitTypeArgumentContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(1510);
      nonWildcardTypeArguments();
      setState(1514);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case JavaParser::SUPER:
        case JavaParser::MODULE:
        case JavaParser::OPEN:
        case JavaParser::REQUIRES:
        case JavaParser::EXPORTS:
        case JavaParser::OPENS:
        case JavaParser::TO:
        case JavaParser::USES:
        case JavaParser::PROVIDES:
        case JavaParser::WITH:
        case JavaParser::TRANSITIVE:
        case JavaParser::VAR:
        case JavaParser::YIELD:
        case JavaParser::RECORD:
        case JavaParser::SEALED:
        case JavaParser::PERMITS:
        case JavaParser::IDENTIFIER: {
          setState(1511);
          explicitGenericInvocationSuffix();
          break;
        }

        case JavaParser::THIS: {
          setState(1512);
          match(JavaParser::THIS);
          setState(1513);
          arguments();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchExpressionContext ------------------------------------------------------------------

JavaParser::SwitchExpressionContext::SwitchExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchExpressionContext::SWITCH() {
  return getToken(JavaParser::SWITCH, 0);
}

JavaParser::ParExpressionContext* JavaParser::SwitchExpressionContext::parExpression() {
  return getRuleContext<JavaParser::ParExpressionContext>(0);
}

tree::TerminalNode* JavaParser::SwitchExpressionContext::LBRACE() {
  return getToken(JavaParser::LBRACE, 0);
}

tree::TerminalNode* JavaParser::SwitchExpressionContext::RBRACE() {
  return getToken(JavaParser::RBRACE, 0);
}

std::vector<JavaParser::SwitchLabeledRuleContext *> JavaParser::SwitchExpressionContext::switchLabeledRule() {
  return getRuleContexts<JavaParser::SwitchLabeledRuleContext>();
}

JavaParser::SwitchLabeledRuleContext* JavaParser::SwitchExpressionContext::switchLabeledRule(size_t i) {
  return getRuleContext<JavaParser::SwitchLabeledRuleContext>(i);
}


size_t JavaParser::SwitchExpressionContext::getRuleIndex() const {
  return JavaParser::RuleSwitchExpression;
}


std::any JavaParser::SwitchExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchExpression(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SwitchExpressionContext* JavaParser::switchExpression() {
  SwitchExpressionContext *_localctx = _tracker.createInstance<SwitchExpressionContext>(_ctx, getState());
  enterRule(_localctx, 204, JavaParser::RuleSwitchExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1518);
    match(JavaParser::SWITCH);
    setState(1519);
    parExpression();
    setState(1520);
    match(JavaParser::LBRACE);
    setState(1524);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::CASE

    || _la == JavaParser::DEFAULT) {
      setState(1521);
      switchLabeledRule();
      setState(1526);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1527);
    match(JavaParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwitchLabeledRuleContext ------------------------------------------------------------------

JavaParser::SwitchLabeledRuleContext::SwitchLabeledRuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::CASE() {
  return getToken(JavaParser::CASE, 0);
}

JavaParser::SwitchRuleOutcomeContext* JavaParser::SwitchLabeledRuleContext::switchRuleOutcome() {
  return getRuleContext<JavaParser::SwitchRuleOutcomeContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::ARROW() {
  return getToken(JavaParser::ARROW, 0);
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::COLON() {
  return getToken(JavaParser::COLON, 0);
}

JavaParser::ExpressionListContext* JavaParser::SwitchLabeledRuleContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::NULL_LITERAL() {
  return getToken(JavaParser::NULL_LITERAL, 0);
}

JavaParser::GuardedPatternContext* JavaParser::SwitchLabeledRuleContext::guardedPattern() {
  return getRuleContext<JavaParser::GuardedPatternContext>(0);
}

tree::TerminalNode* JavaParser::SwitchLabeledRuleContext::DEFAULT() {
  return getToken(JavaParser::DEFAULT, 0);
}


size_t JavaParser::SwitchLabeledRuleContext::getRuleIndex() const {
  return JavaParser::RuleSwitchLabeledRule;
}


std::any JavaParser::SwitchLabeledRuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchLabeledRule(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SwitchLabeledRuleContext* JavaParser::switchLabeledRule() {
  SwitchLabeledRuleContext *_localctx = _tracker.createInstance<SwitchLabeledRuleContext>(_ctx, getState());
  enterRule(_localctx, 206, JavaParser::RuleSwitchLabeledRule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1540);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::CASE: {
        enterOuterAlt(_localctx, 1);
        setState(1529);
        match(JavaParser::CASE);
        setState(1533);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
        case 1: {
          setState(1530);
          expressionList();
          break;
        }

        case 2: {
          setState(1531);
          match(JavaParser::NULL_LITERAL);
          break;
        }

        case 3: {
          setState(1532);
          guardedPattern(0);
          break;
        }

        default:
          break;
        }
        setState(1535);
        _la = _input->LA(1);
        if (!(_la == JavaParser::COLON

        || _la == JavaParser::ARROW)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1536);
        switchRuleOutcome();
        break;
      }

      case JavaParser::DEFAULT: {
        enterOuterAlt(_localctx, 2);
        setState(1537);
        match(JavaParser::DEFAULT);
        setState(1538);
        _la = _input->LA(1);
        if (!(_la == JavaParser::COLON

        || _la == JavaParser::ARROW)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1539);
        switchRuleOutcome();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GuardedPatternContext ------------------------------------------------------------------

JavaParser::GuardedPatternContext::GuardedPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::GuardedPatternContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

JavaParser::GuardedPatternContext* JavaParser::GuardedPatternContext::guardedPattern() {
  return getRuleContext<JavaParser::GuardedPatternContext>(0);
}

tree::TerminalNode* JavaParser::GuardedPatternContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::TypeTypeContext* JavaParser::GuardedPatternContext::typeType() {
  return getRuleContext<JavaParser::TypeTypeContext>(0);
}

JavaParser::IdentifierContext* JavaParser::GuardedPatternContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

std::vector<JavaParser::VariableModifierContext *> JavaParser::GuardedPatternContext::variableModifier() {
  return getRuleContexts<JavaParser::VariableModifierContext>();
}

JavaParser::VariableModifierContext* JavaParser::GuardedPatternContext::variableModifier(size_t i) {
  return getRuleContext<JavaParser::VariableModifierContext>(i);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::GuardedPatternContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::GuardedPatternContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::GuardedPatternContext::AND() {
  return getTokens(JavaParser::AND);
}

tree::TerminalNode* JavaParser::GuardedPatternContext::AND(size_t i) {
  return getToken(JavaParser::AND, i);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::GuardedPatternContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::GuardedPatternContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}


size_t JavaParser::GuardedPatternContext::getRuleIndex() const {
  return JavaParser::RuleGuardedPattern;
}


std::any JavaParser::GuardedPatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitGuardedPattern(this);
  else
    return visitor->visitChildren(this);
}


JavaParser::GuardedPatternContext* JavaParser::guardedPattern() {
   return guardedPattern(0);
}

JavaParser::GuardedPatternContext* JavaParser::guardedPattern(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  JavaParser::GuardedPatternContext *_localctx = _tracker.createInstance<GuardedPatternContext>(_ctx, parentState);
  JavaParser::GuardedPatternContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 208;
  enterRecursionRule(_localctx, 208, JavaParser::RuleGuardedPattern, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1568);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LPAREN: {
        setState(1543);
        match(JavaParser::LPAREN);
        setState(1544);
        guardedPattern(0);
        setState(1545);
        match(JavaParser::RPAREN);
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FINAL:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        setState(1550);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1547);
            variableModifier(); 
          }
          setState(1552);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx);
        }
        setState(1553);
        typeType();
        setState(1557);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1554);
            annotation(); 
          }
          setState(1559);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
        }
        setState(1560);
        identifier();
        setState(1565);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1561);
            match(JavaParser::AND);
            setState(1562);
            expression(0); 
          }
          setState(1567);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(1575);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<GuardedPatternContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleGuardedPattern);
        setState(1570);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1571);
        match(JavaParser::AND);
        setState(1572);
        expression(0); 
      }
      setState(1577);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SwitchRuleOutcomeContext ------------------------------------------------------------------

JavaParser::SwitchRuleOutcomeContext::SwitchRuleOutcomeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::BlockContext* JavaParser::SwitchRuleOutcomeContext::block() {
  return getRuleContext<JavaParser::BlockContext>(0);
}

std::vector<JavaParser::BlockStatementContext *> JavaParser::SwitchRuleOutcomeContext::blockStatement() {
  return getRuleContexts<JavaParser::BlockStatementContext>();
}

JavaParser::BlockStatementContext* JavaParser::SwitchRuleOutcomeContext::blockStatement(size_t i) {
  return getRuleContext<JavaParser::BlockStatementContext>(i);
}


size_t JavaParser::SwitchRuleOutcomeContext::getRuleIndex() const {
  return JavaParser::RuleSwitchRuleOutcome;
}


std::any JavaParser::SwitchRuleOutcomeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSwitchRuleOutcome(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SwitchRuleOutcomeContext* JavaParser::switchRuleOutcome() {
  SwitchRuleOutcomeContext *_localctx = _tracker.createInstance<SwitchRuleOutcomeContext>(_ctx, getState());
  enterRule(_localctx, 210, JavaParser::RuleSwitchRuleOutcome);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1585);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1578);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1582);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 1) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 1)) & -334254282492513) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & -8935141145188974593) != 0)) {
        setState(1579);
        blockStatement();
        setState(1584);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassTypeContext ------------------------------------------------------------------

JavaParser::ClassTypeContext::ClassTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::ClassTypeContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::ClassTypeContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

tree::TerminalNode* JavaParser::ClassTypeContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::ClassTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::ClassTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

JavaParser::TypeArgumentsContext* JavaParser::ClassTypeContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::ClassTypeContext::getRuleIndex() const {
  return JavaParser::RuleClassType;
}


std::any JavaParser::ClassTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassType(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassTypeContext* JavaParser::classType() {
  ClassTypeContext *_localctx = _tracker.createInstance<ClassTypeContext>(_ctx, getState());
  enterRule(_localctx, 212, JavaParser::RuleClassType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1590);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      setState(1587);
      classOrInterfaceType();
      setState(1588);
      match(JavaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(1595);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1592);
        annotation(); 
      }
      setState(1597);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx);
    }
    setState(1598);
    identifier();
    setState(1600);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1599);
      typeArguments();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreatorContext ------------------------------------------------------------------

JavaParser::CreatorContext::CreatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::CreatedNameContext* JavaParser::CreatorContext::createdName() {
  return getRuleContext<JavaParser::CreatedNameContext>(0);
}

JavaParser::ArrayCreatorRestContext* JavaParser::CreatorContext::arrayCreatorRest() {
  return getRuleContext<JavaParser::ArrayCreatorRestContext>(0);
}

JavaParser::ClassCreatorRestContext* JavaParser::CreatorContext::classCreatorRest() {
  return getRuleContext<JavaParser::ClassCreatorRestContext>(0);
}


size_t JavaParser::CreatorContext::getRuleIndex() const {
  return JavaParser::RuleCreator;
}


std::any JavaParser::CreatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCreator(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CreatorContext* JavaParser::creator() {
  CreatorContext *_localctx = _tracker.createInstance<CreatorContext>(_ctx, getState());
  enterRule(_localctx, 214, JavaParser::RuleCreator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1602);
    createdName();
    setState(1605);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LBRACK: {
        setState(1603);
        arrayCreatorRest();
        break;
      }

      case JavaParser::LPAREN: {
        setState(1604);
        classCreatorRest();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreatedNameContext ------------------------------------------------------------------

JavaParser::CreatedNameContext::CreatedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::IdentifierContext *> JavaParser::CreatedNameContext::identifier() {
  return getRuleContexts<JavaParser::IdentifierContext>();
}

JavaParser::IdentifierContext* JavaParser::CreatedNameContext::identifier(size_t i) {
  return getRuleContext<JavaParser::IdentifierContext>(i);
}

std::vector<JavaParser::TypeArgumentsOrDiamondContext *> JavaParser::CreatedNameContext::typeArgumentsOrDiamond() {
  return getRuleContexts<JavaParser::TypeArgumentsOrDiamondContext>();
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::CreatedNameContext::typeArgumentsOrDiamond(size_t i) {
  return getRuleContext<JavaParser::TypeArgumentsOrDiamondContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::CreatedNameContext::DOT() {
  return getTokens(JavaParser::DOT);
}

tree::TerminalNode* JavaParser::CreatedNameContext::DOT(size_t i) {
  return getToken(JavaParser::DOT, i);
}

JavaParser::PrimitiveTypeContext* JavaParser::CreatedNameContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}


size_t JavaParser::CreatedNameContext::getRuleIndex() const {
  return JavaParser::RuleCreatedName;
}


std::any JavaParser::CreatedNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitCreatedName(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::CreatedNameContext* JavaParser::createdName() {
  CreatedNameContext *_localctx = _tracker.createInstance<CreatedNameContext>(_ctx, getState());
  enterRule(_localctx, 216, JavaParser::RuleCreatedName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1622);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1607);
        identifier();
        setState(1609);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(1608);
          typeArgumentsOrDiamond();
        }
        setState(1618);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::DOT) {
          setState(1611);
          match(JavaParser::DOT);
          setState(1612);
          identifier();
          setState(1614);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == JavaParser::LT) {
            setState(1613);
            typeArgumentsOrDiamond();
          }
          setState(1620);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT: {
        enterOuterAlt(_localctx, 2);
        setState(1621);
        primitiveType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InnerCreatorContext ------------------------------------------------------------------

JavaParser::InnerCreatorContext::InnerCreatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::IdentifierContext* JavaParser::InnerCreatorContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ClassCreatorRestContext* JavaParser::InnerCreatorContext::classCreatorRest() {
  return getRuleContext<JavaParser::ClassCreatorRestContext>(0);
}

JavaParser::NonWildcardTypeArgumentsOrDiamondContext* JavaParser::InnerCreatorContext::nonWildcardTypeArgumentsOrDiamond() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsOrDiamondContext>(0);
}


size_t JavaParser::InnerCreatorContext::getRuleIndex() const {
  return JavaParser::RuleInnerCreator;
}


std::any JavaParser::InnerCreatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitInnerCreator(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::InnerCreatorContext* JavaParser::innerCreator() {
  InnerCreatorContext *_localctx = _tracker.createInstance<InnerCreatorContext>(_ctx, getState());
  enterRule(_localctx, 218, JavaParser::RuleInnerCreator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1624);
    identifier();
    setState(1626);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == JavaParser::LT) {
      setState(1625);
      nonWildcardTypeArgumentsOrDiamond();
    }
    setState(1628);
    classCreatorRest();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArrayCreatorRestContext ------------------------------------------------------------------

JavaParser::ArrayCreatorRestContext::ArrayCreatorRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> JavaParser::ArrayCreatorRestContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::ArrayCreatorRestContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::ArrayCreatorRestContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::ArrayCreatorRestContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}

JavaParser::ArrayInitializerContext* JavaParser::ArrayCreatorRestContext::arrayInitializer() {
  return getRuleContext<JavaParser::ArrayInitializerContext>(0);
}

std::vector<JavaParser::ExpressionContext *> JavaParser::ArrayCreatorRestContext::expression() {
  return getRuleContexts<JavaParser::ExpressionContext>();
}

JavaParser::ExpressionContext* JavaParser::ArrayCreatorRestContext::expression(size_t i) {
  return getRuleContext<JavaParser::ExpressionContext>(i);
}


size_t JavaParser::ArrayCreatorRestContext::getRuleIndex() const {
  return JavaParser::RuleArrayCreatorRest;
}


std::any JavaParser::ArrayCreatorRestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitArrayCreatorRest(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ArrayCreatorRestContext* JavaParser::arrayCreatorRest() {
  ArrayCreatorRestContext *_localctx = _tracker.createInstance<ArrayCreatorRestContext>(_ctx, getState());
  enterRule(_localctx, 220, JavaParser::RuleArrayCreatorRest);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1630);
    match(JavaParser::LBRACK);
    setState(1658);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::RBRACK: {
        setState(1631);
        match(JavaParser::RBRACK);
        setState(1636);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == JavaParser::LBRACK) {
          setState(1632);
          match(JavaParser::LBRACK);
          setState(1633);
          match(JavaParser::RBRACK);
          setState(1638);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1639);
        arrayInitializer();
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::NEW:
      case JavaParser::SHORT:
      case JavaParser::SUPER:
      case JavaParser::SWITCH:
      case JavaParser::THIS:
      case JavaParser::VOID:
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::DECIMAL_LITERAL:
      case JavaParser::HEX_LITERAL:
      case JavaParser::OCT_LITERAL:
      case JavaParser::BINARY_LITERAL:
      case JavaParser::FLOAT_LITERAL:
      case JavaParser::HEX_FLOAT_LITERAL:
      case JavaParser::BOOL_LITERAL:
      case JavaParser::CHAR_LITERAL:
      case JavaParser::STRING_LITERAL:
      case JavaParser::TEXT_BLOCK:
      case JavaParser::NULL_LITERAL:
      case JavaParser::LPAREN:
      case JavaParser::LT:
      case JavaParser::BANG:
      case JavaParser::TILDE:
      case JavaParser::INC:
      case JavaParser::DEC:
      case JavaParser::ADD:
      case JavaParser::SUB:
      case JavaParser::AT:
      case JavaParser::IDENTIFIER: {
        setState(1640);
        expression(0);
        setState(1641);
        match(JavaParser::RBRACK);
        setState(1648);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1642);
            match(JavaParser::LBRACK);
            setState(1643);
            expression(0);
            setState(1644);
            match(JavaParser::RBRACK); 
          }
          setState(1650);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
        }
        setState(1655);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1651);
            match(JavaParser::LBRACK);
            setState(1652);
            match(JavaParser::RBRACK); 
          }
          setState(1657);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassCreatorRestContext ------------------------------------------------------------------

JavaParser::ClassCreatorRestContext::ClassCreatorRestContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ArgumentsContext* JavaParser::ClassCreatorRestContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

JavaParser::ClassBodyContext* JavaParser::ClassCreatorRestContext::classBody() {
  return getRuleContext<JavaParser::ClassBodyContext>(0);
}


size_t JavaParser::ClassCreatorRestContext::getRuleIndex() const {
  return JavaParser::RuleClassCreatorRest;
}


std::any JavaParser::ClassCreatorRestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitClassCreatorRest(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ClassCreatorRestContext* JavaParser::classCreatorRest() {
  ClassCreatorRestContext *_localctx = _tracker.createInstance<ClassCreatorRestContext>(_ctx, getState());
  enterRule(_localctx, 222, JavaParser::RuleClassCreatorRest);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1660);
    arguments();
    setState(1662);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      setState(1661);
      classBody();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitGenericInvocationContext ------------------------------------------------------------------

JavaParser::ExplicitGenericInvocationContext::ExplicitGenericInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::ExplicitGenericInvocationContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}

JavaParser::ExplicitGenericInvocationSuffixContext* JavaParser::ExplicitGenericInvocationContext::explicitGenericInvocationSuffix() {
  return getRuleContext<JavaParser::ExplicitGenericInvocationSuffixContext>(0);
}


size_t JavaParser::ExplicitGenericInvocationContext::getRuleIndex() const {
  return JavaParser::RuleExplicitGenericInvocation;
}


std::any JavaParser::ExplicitGenericInvocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExplicitGenericInvocation(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ExplicitGenericInvocationContext* JavaParser::explicitGenericInvocation() {
  ExplicitGenericInvocationContext *_localctx = _tracker.createInstance<ExplicitGenericInvocationContext>(_ctx, getState());
  enterRule(_localctx, 224, JavaParser::RuleExplicitGenericInvocation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1664);
    nonWildcardTypeArguments();
    setState(1665);
    explicitGenericInvocationSuffix();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsOrDiamondContext ------------------------------------------------------------------

JavaParser::TypeArgumentsOrDiamondContext::TypeArgumentsOrDiamondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeArgumentsOrDiamondContext::LT() {
  return getToken(JavaParser::LT, 0);
}

tree::TerminalNode* JavaParser::TypeArgumentsOrDiamondContext::GT() {
  return getToken(JavaParser::GT, 0);
}

JavaParser::TypeArgumentsContext* JavaParser::TypeArgumentsOrDiamondContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::TypeArgumentsOrDiamondContext::getRuleIndex() const {
  return JavaParser::RuleTypeArgumentsOrDiamond;
}


std::any JavaParser::TypeArgumentsOrDiamondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeArgumentsOrDiamond(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeArgumentsOrDiamondContext* JavaParser::typeArgumentsOrDiamond() {
  TypeArgumentsOrDiamondContext *_localctx = _tracker.createInstance<TypeArgumentsOrDiamondContext>(_ctx, getState());
  enterRule(_localctx, 226, JavaParser::RuleTypeArgumentsOrDiamond);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1670);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1667);
      match(JavaParser::LT);
      setState(1668);
      match(JavaParser::GT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1669);
      typeArguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonWildcardTypeArgumentsOrDiamondContext ------------------------------------------------------------------

JavaParser::NonWildcardTypeArgumentsOrDiamondContext::NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsOrDiamondContext::LT() {
  return getToken(JavaParser::LT, 0);
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsOrDiamondContext::GT() {
  return getToken(JavaParser::GT, 0);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::NonWildcardTypeArgumentsOrDiamondContext::nonWildcardTypeArguments() {
  return getRuleContext<JavaParser::NonWildcardTypeArgumentsContext>(0);
}


size_t JavaParser::NonWildcardTypeArgumentsOrDiamondContext::getRuleIndex() const {
  return JavaParser::RuleNonWildcardTypeArgumentsOrDiamond;
}


std::any JavaParser::NonWildcardTypeArgumentsOrDiamondContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitNonWildcardTypeArgumentsOrDiamond(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::NonWildcardTypeArgumentsOrDiamondContext* JavaParser::nonWildcardTypeArgumentsOrDiamond() {
  NonWildcardTypeArgumentsOrDiamondContext *_localctx = _tracker.createInstance<NonWildcardTypeArgumentsOrDiamondContext>(_ctx, getState());
  enterRule(_localctx, 228, JavaParser::RuleNonWildcardTypeArgumentsOrDiamond);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1675);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1672);
      match(JavaParser::LT);
      setState(1673);
      match(JavaParser::GT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1674);
      nonWildcardTypeArguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonWildcardTypeArgumentsContext ------------------------------------------------------------------

JavaParser::NonWildcardTypeArgumentsContext::NonWildcardTypeArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsContext::LT() {
  return getToken(JavaParser::LT, 0);
}

JavaParser::TypeListContext* JavaParser::NonWildcardTypeArgumentsContext::typeList() {
  return getRuleContext<JavaParser::TypeListContext>(0);
}

tree::TerminalNode* JavaParser::NonWildcardTypeArgumentsContext::GT() {
  return getToken(JavaParser::GT, 0);
}


size_t JavaParser::NonWildcardTypeArgumentsContext::getRuleIndex() const {
  return JavaParser::RuleNonWildcardTypeArguments;
}


std::any JavaParser::NonWildcardTypeArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitNonWildcardTypeArguments(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::NonWildcardTypeArgumentsContext* JavaParser::nonWildcardTypeArguments() {
  NonWildcardTypeArgumentsContext *_localctx = _tracker.createInstance<NonWildcardTypeArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 230, JavaParser::RuleNonWildcardTypeArguments);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1677);
    match(JavaParser::LT);
    setState(1678);
    typeList();
    setState(1679);
    match(JavaParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeListContext ------------------------------------------------------------------

JavaParser::TypeListContext::TypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<JavaParser::TypeTypeContext *> JavaParser::TypeListContext::typeType() {
  return getRuleContexts<JavaParser::TypeTypeContext>();
}

JavaParser::TypeTypeContext* JavaParser::TypeListContext::typeType(size_t i) {
  return getRuleContext<JavaParser::TypeTypeContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::TypeListContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::TypeListContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::TypeListContext::getRuleIndex() const {
  return JavaParser::RuleTypeList;
}


std::any JavaParser::TypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeList(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeListContext* JavaParser::typeList() {
  TypeListContext *_localctx = _tracker.createInstance<TypeListContext>(_ctx, getState());
  enterRule(_localctx, 232, JavaParser::RuleTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1681);
    typeType();
    setState(1686);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1682);
      match(JavaParser::COMMA);
      setState(1683);
      typeType();
      setState(1688);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeTypeContext ------------------------------------------------------------------

JavaParser::TypeTypeContext::TypeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ClassOrInterfaceTypeContext* JavaParser::TypeTypeContext::classOrInterfaceType() {
  return getRuleContext<JavaParser::ClassOrInterfaceTypeContext>(0);
}

JavaParser::PrimitiveTypeContext* JavaParser::TypeTypeContext::primitiveType() {
  return getRuleContext<JavaParser::PrimitiveTypeContext>(0);
}

std::vector<JavaParser::AnnotationContext *> JavaParser::TypeTypeContext::annotation() {
  return getRuleContexts<JavaParser::AnnotationContext>();
}

JavaParser::AnnotationContext* JavaParser::TypeTypeContext::annotation(size_t i) {
  return getRuleContext<JavaParser::AnnotationContext>(i);
}

std::vector<tree::TerminalNode *> JavaParser::TypeTypeContext::LBRACK() {
  return getTokens(JavaParser::LBRACK);
}

tree::TerminalNode* JavaParser::TypeTypeContext::LBRACK(size_t i) {
  return getToken(JavaParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> JavaParser::TypeTypeContext::RBRACK() {
  return getTokens(JavaParser::RBRACK);
}

tree::TerminalNode* JavaParser::TypeTypeContext::RBRACK(size_t i) {
  return getToken(JavaParser::RBRACK, i);
}


size_t JavaParser::TypeTypeContext::getRuleIndex() const {
  return JavaParser::RuleTypeType;
}


std::any JavaParser::TypeTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeType(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeTypeContext* JavaParser::typeType() {
  TypeTypeContext *_localctx = _tracker.createInstance<TypeTypeContext>(_ctx, getState());
  enterRule(_localctx, 234, JavaParser::RuleTypeType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1692);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1689);
        annotation(); 
      }
      setState(1694);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx);
    }
    setState(1697);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        setState(1695);
        classOrInterfaceType();
        break;
      }

      case JavaParser::BOOLEAN:
      case JavaParser::BYTE:
      case JavaParser::CHAR:
      case JavaParser::DOUBLE:
      case JavaParser::FLOAT:
      case JavaParser::INT:
      case JavaParser::LONG:
      case JavaParser::SHORT: {
        setState(1696);
        primitiveType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1709);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1702);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 51) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 51)) & 32767) != 0) || _la == JavaParser::AT

        || _la == JavaParser::IDENTIFIER) {
          setState(1699);
          annotation();
          setState(1704);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1705);
        match(JavaParser::LBRACK);
        setState(1706);
        match(JavaParser::RBRACK); 
      }
      setState(1711);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveTypeContext ------------------------------------------------------------------

JavaParser::PrimitiveTypeContext::PrimitiveTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::BOOLEAN() {
  return getToken(JavaParser::BOOLEAN, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::CHAR() {
  return getToken(JavaParser::CHAR, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::BYTE() {
  return getToken(JavaParser::BYTE, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::SHORT() {
  return getToken(JavaParser::SHORT, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::INT() {
  return getToken(JavaParser::INT, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::LONG() {
  return getToken(JavaParser::LONG, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::FLOAT() {
  return getToken(JavaParser::FLOAT, 0);
}

tree::TerminalNode* JavaParser::PrimitiveTypeContext::DOUBLE() {
  return getToken(JavaParser::DOUBLE, 0);
}


size_t JavaParser::PrimitiveTypeContext::getRuleIndex() const {
  return JavaParser::RulePrimitiveType;
}


std::any JavaParser::PrimitiveTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitPrimitiveType(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::PrimitiveTypeContext* JavaParser::primitiveType() {
  PrimitiveTypeContext *_localctx = _tracker.createInstance<PrimitiveTypeContext>(_ctx, getState());
  enterRule(_localctx, 236, JavaParser::RulePrimitiveType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1712);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 138111107368) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeArgumentsContext ------------------------------------------------------------------

JavaParser::TypeArgumentsContext::TypeArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::TypeArgumentsContext::LT() {
  return getToken(JavaParser::LT, 0);
}

std::vector<JavaParser::TypeArgumentContext *> JavaParser::TypeArgumentsContext::typeArgument() {
  return getRuleContexts<JavaParser::TypeArgumentContext>();
}

JavaParser::TypeArgumentContext* JavaParser::TypeArgumentsContext::typeArgument(size_t i) {
  return getRuleContext<JavaParser::TypeArgumentContext>(i);
}

tree::TerminalNode* JavaParser::TypeArgumentsContext::GT() {
  return getToken(JavaParser::GT, 0);
}

std::vector<tree::TerminalNode *> JavaParser::TypeArgumentsContext::COMMA() {
  return getTokens(JavaParser::COMMA);
}

tree::TerminalNode* JavaParser::TypeArgumentsContext::COMMA(size_t i) {
  return getToken(JavaParser::COMMA, i);
}


size_t JavaParser::TypeArgumentsContext::getRuleIndex() const {
  return JavaParser::RuleTypeArguments;
}


std::any JavaParser::TypeArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitTypeArguments(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::TypeArgumentsContext* JavaParser::typeArguments() {
  TypeArgumentsContext *_localctx = _tracker.createInstance<TypeArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 238, JavaParser::RuleTypeArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1714);
    match(JavaParser::LT);
    setState(1715);
    typeArgument();
    setState(1720);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == JavaParser::COMMA) {
      setState(1716);
      match(JavaParser::COMMA);
      setState(1717);
      typeArgument();
      setState(1722);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1723);
    match(JavaParser::GT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SuperSuffixContext ------------------------------------------------------------------

JavaParser::SuperSuffixContext::SuperSuffixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

JavaParser::ArgumentsContext* JavaParser::SuperSuffixContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}

tree::TerminalNode* JavaParser::SuperSuffixContext::DOT() {
  return getToken(JavaParser::DOT, 0);
}

JavaParser::IdentifierContext* JavaParser::SuperSuffixContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::TypeArgumentsContext* JavaParser::SuperSuffixContext::typeArguments() {
  return getRuleContext<JavaParser::TypeArgumentsContext>(0);
}


size_t JavaParser::SuperSuffixContext::getRuleIndex() const {
  return JavaParser::RuleSuperSuffix;
}


std::any JavaParser::SuperSuffixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitSuperSuffix(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::SuperSuffixContext* JavaParser::superSuffix() {
  SuperSuffixContext *_localctx = _tracker.createInstance<SuperSuffixContext>(_ctx, getState());
  enterRule(_localctx, 240, JavaParser::RuleSuperSuffix);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1734);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::LPAREN: {
        enterOuterAlt(_localctx, 1);
        setState(1725);
        arguments();
        break;
      }

      case JavaParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(1726);
        match(JavaParser::DOT);
        setState(1728);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == JavaParser::LT) {
          setState(1727);
          typeArguments();
        }
        setState(1730);
        identifier();
        setState(1732);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
        case 1: {
          setState(1731);
          arguments();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitGenericInvocationSuffixContext ------------------------------------------------------------------

JavaParser::ExplicitGenericInvocationSuffixContext::ExplicitGenericInvocationSuffixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ExplicitGenericInvocationSuffixContext::SUPER() {
  return getToken(JavaParser::SUPER, 0);
}

JavaParser::SuperSuffixContext* JavaParser::ExplicitGenericInvocationSuffixContext::superSuffix() {
  return getRuleContext<JavaParser::SuperSuffixContext>(0);
}

JavaParser::IdentifierContext* JavaParser::ExplicitGenericInvocationSuffixContext::identifier() {
  return getRuleContext<JavaParser::IdentifierContext>(0);
}

JavaParser::ArgumentsContext* JavaParser::ExplicitGenericInvocationSuffixContext::arguments() {
  return getRuleContext<JavaParser::ArgumentsContext>(0);
}


size_t JavaParser::ExplicitGenericInvocationSuffixContext::getRuleIndex() const {
  return JavaParser::RuleExplicitGenericInvocationSuffix;
}


std::any JavaParser::ExplicitGenericInvocationSuffixContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitExplicitGenericInvocationSuffix(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ExplicitGenericInvocationSuffixContext* JavaParser::explicitGenericInvocationSuffix() {
  ExplicitGenericInvocationSuffixContext *_localctx = _tracker.createInstance<ExplicitGenericInvocationSuffixContext>(_ctx, getState());
  enterRule(_localctx, 242, JavaParser::RuleExplicitGenericInvocationSuffix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1741);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case JavaParser::SUPER: {
        enterOuterAlt(_localctx, 1);
        setState(1736);
        match(JavaParser::SUPER);
        setState(1737);
        superSuffix();
        break;
      }

      case JavaParser::MODULE:
      case JavaParser::OPEN:
      case JavaParser::REQUIRES:
      case JavaParser::EXPORTS:
      case JavaParser::OPENS:
      case JavaParser::TO:
      case JavaParser::USES:
      case JavaParser::PROVIDES:
      case JavaParser::WITH:
      case JavaParser::TRANSITIVE:
      case JavaParser::VAR:
      case JavaParser::YIELD:
      case JavaParser::RECORD:
      case JavaParser::SEALED:
      case JavaParser::PERMITS:
      case JavaParser::IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1738);
        identifier();
        setState(1739);
        arguments();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

JavaParser::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* JavaParser::ArgumentsContext::LPAREN() {
  return getToken(JavaParser::LPAREN, 0);
}

tree::TerminalNode* JavaParser::ArgumentsContext::RPAREN() {
  return getToken(JavaParser::RPAREN, 0);
}

JavaParser::ExpressionListContext* JavaParser::ArgumentsContext::expressionList() {
  return getRuleContext<JavaParser::ExpressionListContext>(0);
}


size_t JavaParser::ArgumentsContext::getRuleIndex() const {
  return JavaParser::RuleArguments;
}


std::any JavaParser::ArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<JavaParserVisitor*>(visitor))
    return parserVisitor->visitArguments(this);
  else
    return visitor->visitChildren(this);
}

JavaParser::ArgumentsContext* JavaParser::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 244, JavaParser::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1743);
    match(JavaParser::LPAREN);
    setState(1745);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 3) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 3)) & 9223127275610966053) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 2377900732130004991) != 0)) {
      setState(1744);
      expressionList();
    }
    setState(1747);
    match(JavaParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool JavaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 96: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);
    case 104: return guardedPatternSempred(antlrcpp::downCast<GuardedPatternContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool JavaParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 18);
    case 1: return precpred(_ctx, 17);
    case 2: return precpred(_ctx, 16);
    case 3: return precpred(_ctx, 15);
    case 4: return precpred(_ctx, 13);
    case 5: return precpred(_ctx, 12);
    case 6: return precpred(_ctx, 11);
    case 7: return precpred(_ctx, 10);
    case 8: return precpred(_ctx, 9);
    case 9: return precpred(_ctx, 8);
    case 10: return precpred(_ctx, 7);
    case 11: return precpred(_ctx, 6);
    case 12: return precpred(_ctx, 27);
    case 13: return precpred(_ctx, 26);
    case 14: return precpred(_ctx, 22);
    case 15: return precpred(_ctx, 14);
    case 16: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool JavaParser::guardedPatternSempred(GuardedPatternContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 17: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void JavaParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  javaparserParserInitialize();
#else
  ::antlr4::internal::call_once(javaparserParserOnceFlag, javaparserParserInitialize);
#endif
}
